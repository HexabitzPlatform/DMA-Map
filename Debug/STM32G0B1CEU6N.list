
STM32G0B1CEU6N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ecc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004f88  08004f88  00005f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005028  08005028  00007084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005028  08005028  00006028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005030  08005030  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005030  08005030  00006030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005034  08005034  00006034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005038  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000084  080050bc  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000908  080050bc  00007908  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d58a  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b7  00000000  00000000  00014636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  000168f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007cf  00000000  00000000  00017328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b116  00000000  00000000  00017af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e808  00000000  00000000  00032c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad622  00000000  00000000  00041415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eea37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002284  00000000  00000000  000eea7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f0d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000084 	.word	0x20000084
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004f70 	.word	0x08004f70

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000088 	.word	0x20000088
 8000100:	08004f70 	.word	0x08004f70

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MapTx_Start>:
//		{ FWD_TO_PORT, .src = UART_PORT6, .dst = UART_PORT3, .size = 10 } };

// -----------------------------------------------------
// Start map execution
// -----------------------------------------------------
void MapTx_Start(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	map_index = 0;
 8000620:	4b03      	ldr	r3, [pc, #12]	@ (8000630 <MapTx_Start+0x14>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
	MapTx_Setup();
 8000626:	f000 f805 	bl	8000634 <MapTx_Setup>
}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000a0 	.word	0x200000a0

08000634 <MapTx_Setup>:

// -----------------------------------------------------
// Advance to next entry
// -----------------------------------------------------
void MapTx_Setup(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	if (map_index >= module_tx_map_len) {
 800063a:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <MapTx_Setup+0xbc>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <MapTx_Setup+0xc0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	d24e      	bcs.n	80006e4 <MapTx_Setup+0xb0>
		// Done
		return;
	}

	const map_entry_t *e = &module_tx_map[map_index];
 8000646:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <MapTx_Setup+0xbc>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	0013      	movs	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	189b      	adds	r3, r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4a29      	ldr	r2, [pc, #164]	@ (80006f8 <MapTx_Setup+0xc4>)
 8000654:	189b      	adds	r3, r3, r2
 8000656:	607b      	str	r3, [r7, #4]

	switch (e->type) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d036      	beq.n	80006ce <MapTx_Setup+0x9a>
 8000660:	dc42      	bgt.n	80006e8 <MapTx_Setup+0xb4>
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <MapTx_Setup+0x38>
 8000666:	2b01      	cmp	r3, #1
 8000668:	d019      	beq.n	800069e <MapTx_Setup+0x6a>
	case MEM_TO_PORT:
		HAL_UART_Transmit_DMA(e->dst, e->mem, e->size);
		break;

	default:
		break;
 800066a:	e03d      	b.n	80006e8 <MapTx_Setup+0xb4>
		HAL_UARTEx_ReceiveToIdle_DMA(e->src, e->mem, e->size);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6858      	ldr	r0, [r3, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6919      	ldr	r1, [r3, #16]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	b29b      	uxth	r3, r3
 800067a:	001a      	movs	r2, r3
 800067c:	f004 fb86 	bl	8004d8c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(e->src->hdmarx, DMA_IT_HT);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	2280      	movs	r2, #128	@ 0x80
 8000686:	589b      	ldr	r3, [r3, r2]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	585b      	ldr	r3, [r3, r1]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2104      	movs	r1, #4
 8000698:	438a      	bics	r2, r1
 800069a:	601a      	str	r2, [r3, #0]
		break;
 800069c:	e025      	b.n	80006ea <MapTx_Setup+0xb6>
		HAL_UARTEx_ReceiveToIdle_DMA(e->src, staging_buf, e->size);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6858      	ldr	r0, [r3, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MapTx_Setup+0xc8>)
 80006aa:	0019      	movs	r1, r3
 80006ac:	f004 fb6e 	bl	8004d8c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(e->src->hdmarx, DMA_IT_HT);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	589b      	ldr	r3, [r3, r2]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	585b      	ldr	r3, [r3, r1]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2104      	movs	r1, #4
 80006c8:	438a      	bics	r2, r1
 80006ca:	601a      	str	r2, [r3, #0]
		break;
 80006cc:	e00d      	b.n	80006ea <MapTx_Setup+0xb6>
		HAL_UART_Transmit_DMA(e->dst, e->mem, e->size);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6898      	ldr	r0, [r3, #8]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6919      	ldr	r1, [r3, #16]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	001a      	movs	r2, r3
 80006de:	f002 fead 	bl	800343c <HAL_UART_Transmit_DMA>
		break;
 80006e2:	e002      	b.n	80006ea <MapTx_Setup+0xb6>
		return;
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	e000      	b.n	80006ea <MapTx_Setup+0xb6>
		break;
 80006e8:	46c0      	nop			@ (mov r8, r8)
	}
}
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b002      	add	sp, #8
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000a0 	.word	0x200000a0
 80006f4:	08004f9c 	.word	0x08004f9c
 80006f8:	08004f88 	.word	0x08004f88
 80006fc:	200000a4 	.word	0x200000a4

08000700 <HAL_UARTEx_RxEventCallback>:

// -------------------------------------------------
// IDLE Line Event Callback
// -------------------------------------------------
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	000a      	movs	r2, r1
 800070a:	1cbb      	adds	r3, r7, #2
 800070c:	801a      	strh	r2, [r3, #0]
	const map_entry_t *e = &module_tx_map[map_index];
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <HAL_UARTEx_RxEventCallback+0x6c>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	0013      	movs	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	189b      	adds	r3, r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <HAL_UARTEx_RxEventCallback+0x70>)
 800071c:	189b      	adds	r3, r3, r2
 800071e:	60fb      	str	r3, [r7, #12]

	if (e->type == FWD_TO_PORT && e->src == huart) {
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d10d      	bne.n	8000744 <HAL_UARTEx_RxEventCallback+0x44>
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	429a      	cmp	r2, r3
 8000730:	d108      	bne.n	8000744 <HAL_UARTEx_RxEventCallback+0x44>
		HAL_UART_Transmit_DMA(e->dst, staging_buf, Size);
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	6898      	ldr	r0, [r3, #8]
 8000736:	1cbb      	adds	r3, r7, #2
 8000738:	881a      	ldrh	r2, [r3, #0]
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <HAL_UARTEx_RxEventCallback+0x74>)
 800073c:	0019      	movs	r1, r3
 800073e:	f002 fe7d 	bl	800343c <HAL_UART_Transmit_DMA>
        MapTx_Setup();
    }

//	map_index++;
//	MapTx_Setup();
}
 8000742:	e00f      	b.n	8000764 <HAL_UARTEx_RxEventCallback+0x64>
	else if (e->type == PORT_TO_MEM && e->src == huart) {
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d10b      	bne.n	8000764 <HAL_UARTEx_RxEventCallback+0x64>
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	429a      	cmp	r2, r3
 8000754:	d106      	bne.n	8000764 <HAL_UARTEx_RxEventCallback+0x64>
        map_index++;
 8000756:	4b05      	ldr	r3, [pc, #20]	@ (800076c <HAL_UARTEx_RxEventCallback+0x6c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <HAL_UARTEx_RxEventCallback+0x6c>)
 800075e:	601a      	str	r2, [r3, #0]
        MapTx_Setup();
 8000760:	f7ff ff68 	bl	8000634 <MapTx_Setup>
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b004      	add	sp, #16
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000a0 	.word	0x200000a0
 8000770:	08004f88 	.word	0x08004f88
 8000774:	200000a4 	.word	0x200000a4

08000778 <HAL_UART_TxCpltCallback>:

/* only advance once TX really finishes. */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    const map_entry_t *e = &module_tx_map[map_index];
 8000780:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <HAL_UART_TxCpltCallback+0x44>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	0013      	movs	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	189b      	adds	r3, r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4a0c      	ldr	r2, [pc, #48]	@ (80007c0 <HAL_UART_TxCpltCallback+0x48>)
 800078e:	189b      	adds	r3, r3, r2
 8000790:	60fb      	str	r3, [r7, #12]

    if (e->type == FWD_TO_PORT && e->dst == huart) {
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d10b      	bne.n	80007b2 <HAL_UART_TxCpltCallback+0x3a>
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d106      	bne.n	80007b2 <HAL_UART_TxCpltCallback+0x3a>
        // Now safe to advance
        map_index++;
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <HAL_UART_TxCpltCallback+0x44>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <HAL_UART_TxCpltCallback+0x44>)
 80007ac:	601a      	str	r2, [r3, #0]
        MapTx_Setup();
 80007ae:	f7ff ff41 	bl	8000634 <MapTx_Setup>
    }
}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b004      	add	sp, #16
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	200000a0 	.word	0x200000a0
 80007c0:	08004f88 	.word	0x08004f88

080007c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_DMA_Init+0x70>)
 80007cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_DMA_Init+0x70>)
 80007d0:	2101      	movs	r1, #1
 80007d2:	430a      	orrs	r2, r1
 80007d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_DMA_Init+0x70>)
 80007d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007da:	2201      	movs	r2, #1
 80007dc:	4013      	ands	r3, r2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_DMA_Init+0x70>)
 80007e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_DMA_Init+0x70>)
 80007e8:	2102      	movs	r1, #2
 80007ea:	430a      	orrs	r2, r1
 80007ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_DMA_Init+0x70>)
 80007f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007f2:	2202      	movs	r2, #2
 80007f4:	4013      	ands	r3, r2
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2009      	movs	r0, #9
 8000800:	f001 f92e 	bl	8001a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000804:	2009      	movs	r0, #9
 8000806:	f001 f940 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	200a      	movs	r0, #10
 8000810:	f001 f926 	bl	8001a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000814:	200a      	movs	r0, #10
 8000816:	f001 f938 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	200b      	movs	r0, #11
 8000820:	f001 f91e 	bl	8001a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 8000824:	200b      	movs	r0, #11
 8000826:	f001 f930 	bl	8001a8a <HAL_NVIC_EnableIRQ>

}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	40021000 	.word	0x40021000

08000838 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_GPIO_Init+0x70>)
 8000840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000842:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <MX_GPIO_Init+0x70>)
 8000844:	2120      	movs	r1, #32
 8000846:	430a      	orrs	r2, r1
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
 800084a:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <MX_GPIO_Init+0x70>)
 800084c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800084e:	2220      	movs	r2, #32
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_GPIO_Init+0x70>)
 8000858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800085a:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <MX_GPIO_Init+0x70>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	635a      	str	r2, [r3, #52]	@ 0x34
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_GPIO_Init+0x70>)
 8000864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_GPIO_Init+0x70>)
 8000870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <MX_GPIO_Init+0x70>)
 8000874:	2102      	movs	r1, #2
 8000876:	430a      	orrs	r2, r1
 8000878:	635a      	str	r2, [r3, #52]	@ 0x34
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_GPIO_Init+0x70>)
 800087c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800087e:	2202      	movs	r2, #2
 8000880:	4013      	ands	r3, r2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_GPIO_Init+0x70>)
 8000888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_GPIO_Init+0x70>)
 800088c:	2108      	movs	r1, #8
 800088e:	430a      	orrs	r2, r1
 8000890:	635a      	str	r2, [r3, #52]	@ 0x34
 8000892:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <MX_GPIO_Init+0x70>)
 8000894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000896:	2208      	movs	r2, #8
 8000898:	4013      	ands	r3, r2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b004      	add	sp, #16
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b0:	f000 ff8e 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b4:	f000 f814 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b8:	f7ff ffbe 	bl	8000838 <MX_GPIO_Init>
  MX_DMA_Init();
 80008bc:	f7ff ff82 	bl	80007c4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008c0:	f000 f964 	bl	8000b8c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80008c4:	f000 f9b4 	bl	8000c30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80008c8:	f000 fa04 	bl	8000cd4 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 80008cc:	f000 fa54 	bl	8000d78 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 80008d0:	f000 fa86 	bl	8000de0 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 80008d4:	f000 fab8 	bl	8000e48 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuffer, 1000);
//  HAL_UART_Receive_DMA(&huart2, RxBuffer, 1000);

    // Start the TX phase
    MapTx_Start();
 80008d8:	f7ff fea0 	bl	800061c <MapTx_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	e7fd      	b.n	80008dc <main+0x30>

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b095      	sub	sp, #84	@ 0x54
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	2414      	movs	r4, #20
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	0018      	movs	r0, r3
 80008ec:	233c      	movs	r3, #60	@ 0x3c
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	f004 fb11 	bl	8004f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	0018      	movs	r0, r3
 80008fa:	2310      	movs	r3, #16
 80008fc:	001a      	movs	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f004 fb0a 	bl	8004f18 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	0018      	movs	r0, r3
 800090a:	f001 fdaf 	bl	800246c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	0252      	lsls	r2, r2, #9
 800091a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091c:	0021      	movs	r1, r4
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2202      	movs	r2, #2
 8000922:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2203      	movs	r2, #3
 8000928:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2210      	movs	r2, #16
 8000934:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2280      	movs	r2, #128	@ 0x80
 800093a:	0292      	lsls	r2, r2, #10
 800093c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2280      	movs	r2, #128	@ 0x80
 8000942:	0492      	lsls	r2, r2, #18
 8000944:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2280      	movs	r2, #128	@ 0x80
 800094a:	0592      	lsls	r2, r2, #22
 800094c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	187b      	adds	r3, r7, r1
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fdd7 	bl	8002504 <HAL_RCC_OscConfig>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800095a:	f000 f819 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2207      	movs	r2, #7
 8000962:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2202      	movs	r2, #2
 8000968:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2102      	movs	r1, #2
 800097a:	0018      	movs	r0, r3
 800097c:	f002 f922 	bl	8002bc4 <HAL_RCC_ClockConfig>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000984:	f000 f804 	bl	8000990 <Error_Handler>
  }
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b015      	add	sp, #84	@ 0x54
 800098e:	bd90      	pop	{r4, r7, pc}

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	2201      	movs	r2, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c0:	2180      	movs	r1, #128	@ 0x80
 80009c2:	0549      	lsls	r1, r1, #21
 80009c4:	430a      	orrs	r2, r1
 80009c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009c8:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009cc:	2380      	movs	r3, #128	@ 0x80
 80009ce:	055b      	lsls	r3, r3, #21
 80009d0:	4013      	ands	r3, r2
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009d6:	23c0      	movs	r3, #192	@ 0xc0
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 ff7e 	bl	80018dc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b002      	add	sp, #8
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000

080009ec <NMI_Handler>:
/*           Cortex-M0+ Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000a14:	f000 ff46 	bl	80018a4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel 1 interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <DMA1_Channel1_IRQHandler+0x14>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f001 fa46 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	20000484 	.word	0x20000484

08000a38 <DMA1_Channel2_3_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
 */
void DMA1_Channel2_3_IRQHandler(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

	/* USER CODE END DMA1_Channel2_3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fa3a 	bl	8001eb8 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a44:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 fa36 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

	/* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	200004e4 	.word	0x200004e4
 8000a58:	20000544 	.word	0x20000544

08000a5c <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
 * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
 */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

	/* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x54>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 fa28 	bl	8001eb8 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x58>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f001 fa24 	bl	8001eb8 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x5c>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 fa20 	bl	8001eb8 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8000a78:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x60>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 fa1c 	bl	8001eb8 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x64>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 fa18 	bl	8001eb8 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart5_rx);
 8000a88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x68>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 fa14 	bl	8001eb8 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart5_tx);
 8000a90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x6c>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f001 fa10 	bl	8001eb8 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x70>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 fa0c 	bl	8001eb8 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x74>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f001 fa08 	bl	8001eb8 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

	/* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	200005a4 	.word	0x200005a4
 8000ab4:	20000604 	.word	0x20000604
 8000ab8:	20000664 	.word	0x20000664
 8000abc:	200006c4 	.word	0x200006c4
 8000ac0:	20000724 	.word	0x20000724
 8000ac4:	20000784 	.word	0x20000784
 8000ac8:	200007e4 	.word	0x200007e4
 8000acc:	20000844 	.word	0x20000844
 8000ad0:	200008a4 	.word	0x200008a4

08000ad4 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <USART1_IRQHandler+0x14>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 fd40 	bl	8003560 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	2000010c 	.word	0x2000010c

08000aec <USART2_LPUART2_IRQHandler>:

/**
 * @brief This function handles USART2 + LPUART2 Interrupt.
 */
void USART2_LPUART2_IRQHandler(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

	/* USER CODE END USART2_LPUART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8000af0:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <USART2_LPUART2_IRQHandler+0x14>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f002 fd34 	bl	8003560 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

	/* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	200001a0 	.word	0x200001a0

08000b04 <USART3_4_5_6_LPUART1_IRQHandler>:

/**
 * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
 */
void USART3_4_5_6_LPUART1_IRQHandler(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

	/* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <USART3_4_5_6_LPUART1_IRQHandler+0x2c>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 fd28 	bl	8003560 <HAL_UART_IRQHandler>
	HAL_UART_IRQHandler(&huart4);
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <USART3_4_5_6_LPUART1_IRQHandler+0x30>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f002 fd24 	bl	8003560 <HAL_UART_IRQHandler>
	HAL_UART_IRQHandler(&huart5);
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <USART3_4_5_6_LPUART1_IRQHandler+0x34>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f002 fd20 	bl	8003560 <HAL_UART_IRQHandler>
	HAL_UART_IRQHandler(&huart6);
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <USART3_4_5_6_LPUART1_IRQHandler+0x38>)
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 fd1c 	bl	8003560 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

	/* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	20000234 	.word	0x20000234
 8000b34:	200002c8 	.word	0x200002c8
 8000b38:	2000035c 	.word	0x2000035c
 8000b3c:	200003f0 	.word	0x200003f0

08000b40 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	FullInit++;
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <HAL_UART_RxCpltCallback+0x1c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b02      	ldr	r3, [pc, #8]	@ (8000b5c <HAL_UART_RxCpltCallback+0x1c>)
 8000b52:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(huart, pData, 10, 10);

}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000108 	.word	0x20000108

08000b60 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	HalfInit++;
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b02      	ldr	r3, [pc, #8]	@ (8000b7c <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b72:	701a      	strb	r2, [r3, #0]

}
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000109 	.word	0x20000109

08000b80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b90:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000b92:	4a25      	ldr	r2, [pc, #148]	@ (8000c28 <MX_USART1_UART_Init+0x9c>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8000b96:	4b23      	ldr	r3, [pc, #140]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000b98:	4a24      	ldr	r2, [pc, #144]	@ (8000c2c <MX_USART1_UART_Init+0xa0>)
 8000b9a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9c:	4b21      	ldr	r3, [pc, #132]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bb0:	220c      	movs	r2, #12
 8000bb2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd2:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fbdb 	bl	8003390 <HAL_UART_Init>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000bde:	f7ff fed7 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000be2:	2380      	movs	r3, #128	@ 0x80
 8000be4:	05da      	lsls	r2, r3, #23
 8000be6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000be8:	0011      	movs	r1, r2
 8000bea:	0018      	movs	r0, r3
 8000bec:	f004 f84c 	bl	8004c88 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf0:	1e03      	subs	r3, r0, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000bf4:	f7ff fecc 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000bf8:	2380      	movs	r3, #128	@ 0x80
 8000bfa:	04da      	lsls	r2, r3, #19
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f004 f881 	bl	8004d08 <HAL_UARTEx_SetRxFifoThreshold>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000c0a:	f7ff fec1 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f003 ffff 	bl	8004c14 <HAL_UARTEx_DisableFifoMode>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000c1a:	f7ff feb9 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000010c 	.word	0x2000010c
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	001e8480 	.word	0x001e8480

08000c30 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b24      	ldr	r3, [pc, #144]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c36:	4a25      	ldr	r2, [pc, #148]	@ (8000ccc <MX_USART2_UART_Init+0x9c>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8000c3a:	4b23      	ldr	r3, [pc, #140]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c3c:	4a24      	ldr	r2, [pc, #144]	@ (8000cd0 <MX_USART2_UART_Init+0xa0>)
 8000c3e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c40:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c46:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c54:	220c      	movs	r2, #12
 8000c56:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c6a:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c70:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c76:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f002 fb89 	bl	8003390 <HAL_UART_Init>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000c82:	f7ff fe85 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000c86:	2380      	movs	r3, #128	@ 0x80
 8000c88:	05da      	lsls	r2, r3, #23
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f003 fffa 	bl	8004c88 <HAL_UARTEx_SetTxFifoThreshold>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c98:	f7ff fe7a 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000c9c:	2380      	movs	r3, #128	@ 0x80
 8000c9e:	04da      	lsls	r2, r3, #19
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f004 f82f 	bl	8004d08 <HAL_UARTEx_SetRxFifoThreshold>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 8000cae:	f7ff fe6f 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cb2:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f003 ffad 	bl	8004c14 <HAL_UARTEx_DisableFifoMode>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 8000cbe:	f7ff fe67 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001a0 	.word	0x200001a0
 8000ccc:	40004400 	.word	0x40004400
 8000cd0:	001e8480 	.word	0x001e8480

08000cd4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cd8:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000cda:	4a25      	ldr	r2, [pc, #148]	@ (8000d70 <MX_USART3_UART_Init+0x9c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000cde:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000ce0:	4a24      	ldr	r2, [pc, #144]	@ (8000d74 <MX_USART3_UART_Init+0xa0>)
 8000ce2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce4:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cea:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000cf8:	220c      	movs	r2, #12
 8000cfa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f002 fb37 	bl	8003390 <HAL_UART_Init>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000d26:	f7ff fe33 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000d2a:	2380      	movs	r3, #128	@ 0x80
 8000d2c:	05da      	lsls	r2, r3, #23
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d30:	0011      	movs	r1, r2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f003 ffa8 	bl	8004c88 <HAL_UARTEx_SetTxFifoThreshold>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8000d3c:	f7ff fe28 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000d40:	2380      	movs	r3, #128	@ 0x80
 8000d42:	04da      	lsls	r2, r3, #19
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f003 ffdd 	bl	8004d08 <HAL_UARTEx_SetRxFifoThreshold>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000d52:	f7ff fe1d 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d56:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f003 ff5b 	bl	8004c14 <HAL_UARTEx_DisableFifoMode>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000d62:	f7ff fe15 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000234 	.word	0x20000234
 8000d70:	40004800 	.word	0x40004800
 8000d74:	001e8480 	.word	0x001e8480

08000d78 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000d7e:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <MX_USART4_UART_Init+0x60>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000d84:	4a15      	ldr	r2, [pc, #84]	@ (8000ddc <MX_USART4_UART_Init+0x64>)
 8000d86:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000d9c:	220c      	movs	r2, #12
 8000d9e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db2:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dbe:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <MX_USART4_UART_Init+0x5c>)
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f002 fae5 	bl	8003390 <HAL_UART_Init>
 8000dc6:	1e03      	subs	r3, r0, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART4_UART_Init+0x56>
  {
    Error_Handler();
 8000dca:	f7ff fde1 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200002c8 	.word	0x200002c8
 8000dd8:	40004c00 	.word	0x40004c00
 8000ddc:	001e8480 	.word	0x001e8480

08000de0 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000de4:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000de6:	4a16      	ldr	r2, [pc, #88]	@ (8000e40 <MX_USART5_UART_Init+0x60>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 2000000;
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000dec:	4a15      	ldr	r2, [pc, #84]	@ (8000e44 <MX_USART5_UART_Init+0x64>)
 8000dee:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000e04:	220c      	movs	r2, #12
 8000e06:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000e26:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <MX_USART5_UART_Init+0x5c>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f002 fab1 	bl	8003390 <HAL_UART_Init>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART5_UART_Init+0x56>
  {
    Error_Handler();
 8000e32:	f7ff fdad 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000035c 	.word	0x2000035c
 8000e40:	40005000 	.word	0x40005000
 8000e44:	001e8480 	.word	0x001e8480

08000e48 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ea8 <MX_USART6_UART_Init+0x60>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 2000000;
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e54:	4a15      	ldr	r2, [pc, #84]	@ (8000eac <MX_USART6_UART_Init+0x64>)
 8000e56:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e6c:	220c      	movs	r2, #12
 8000e6e:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <MX_USART6_UART_Init+0x5c>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f002 fa7d 	bl	8003390 <HAL_UART_Init>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART6_UART_Init+0x56>
  {
    Error_Handler();
 8000e9a:	f7ff fd79 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200003f0 	.word	0x200003f0
 8000ea8:	40013c00 	.word	0x40013c00
 8000eac:	001e8480 	.word	0x001e8480

08000eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b0ab      	sub	sp, #172	@ 0xac
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	2394      	movs	r3, #148	@ 0x94
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	2314      	movs	r3, #20
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f004 f828 	bl	8004f18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	2448      	movs	r4, #72	@ 0x48
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	0018      	movs	r0, r3
 8000ece:	234c      	movs	r3, #76	@ 0x4c
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f004 f820 	bl	8004f18 <memset>
  if(uartHandle->Instance==USART1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4aa0      	ldr	r2, [pc, #640]	@ (8001160 <HAL_UART_MspInit+0x2b0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d000      	beq.n	8000ee4 <HAL_UART_MspInit+0x34>
 8000ee2:	e09b      	b.n	800101c <HAL_UART_MspInit+0x16c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	2200      	movs	r2, #0
 8000eee:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f002 f810 	bl	8002f18 <HAL_RCCEx_PeriphCLKConfig>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000efc:	f7ff fd48 	bl	8000990 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f00:	4b98      	ldr	r3, [pc, #608]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 8000f02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f04:	4b97      	ldr	r3, [pc, #604]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 8000f06:	2180      	movs	r1, #128	@ 0x80
 8000f08:	01c9      	lsls	r1, r1, #7
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f0e:	4b95      	ldr	r3, [pc, #596]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 8000f10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f12:	2380      	movs	r3, #128	@ 0x80
 8000f14:	01db      	lsls	r3, r3, #7
 8000f16:	4013      	ands	r3, r2
 8000f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b91      	ldr	r3, [pc, #580]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 8000f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f20:	4b90      	ldr	r3, [pc, #576]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	430a      	orrs	r2, r1
 8000f26:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f28:	4b8e      	ldr	r3, [pc, #568]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 8000f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4013      	ands	r3, r2
 8000f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f34:	2194      	movs	r1, #148	@ 0x94
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	22c0      	movs	r2, #192	@ 0xc0
 8000f3a:	00d2      	lsls	r2, r2, #3
 8000f3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2202      	movs	r2, #2
 8000f42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2201      	movs	r2, #1
 8000f54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	187a      	adds	r2, r7, r1
 8000f58:	23a0      	movs	r3, #160	@ 0xa0
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 f918 	bl	8002194 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000f64:	4b80      	ldr	r3, [pc, #512]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000f66:	4a81      	ldr	r2, [pc, #516]	@ (800116c <HAL_UART_MspInit+0x2bc>)
 8000f68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000f6c:	2232      	movs	r2, #50	@ 0x32
 8000f6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f70:	4b7d      	ldr	r3, [pc, #500]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f76:	4b7c      	ldr	r3, [pc, #496]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f7c:	4b7a      	ldr	r3, [pc, #488]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000f7e:	2280      	movs	r2, #128	@ 0x80
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f82:	4b79      	ldr	r3, [pc, #484]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f88:	4b77      	ldr	r3, [pc, #476]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f8e:	4b76      	ldr	r3, [pc, #472]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000f90:	2220      	movs	r2, #32
 8000f92:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f94:	4b74      	ldr	r3, [pc, #464]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f9a:	4b73      	ldr	r3, [pc, #460]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 fd91 	bl	8001ac4 <HAL_DMA_Init>
 8000fa2:	1e03      	subs	r3, r0, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000fa6:	f7ff fcf3 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2180      	movs	r1, #128	@ 0x80
 8000fae:	4a6e      	ldr	r2, [pc, #440]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000fb0:	505a      	str	r2, [r3, r1]
 8000fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001168 <HAL_UART_MspInit+0x2b8>)
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000fb8:	4b6d      	ldr	r3, [pc, #436]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8000fba:	4a6e      	ldr	r2, [pc, #440]	@ (8001174 <HAL_UART_MspInit+0x2c4>)
 8000fbc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8000fc0:	2233      	movs	r2, #51	@ 0x33
 8000fc2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fca:	4b69      	ldr	r3, [pc, #420]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd0:	4b67      	ldr	r3, [pc, #412]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8000fd2:	2280      	movs	r2, #128	@ 0x80
 8000fd4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd6:	4b66      	ldr	r3, [pc, #408]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fdc:	4b64      	ldr	r3, [pc, #400]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000fe2:	4b63      	ldr	r3, [pc, #396]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fe8:	4b61      	ldr	r3, [pc, #388]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000fee:	4b60      	ldr	r3, [pc, #384]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f000 fd67 	bl	8001ac4 <HAL_DMA_Init>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8000ffa:	f7ff fcc9 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a5b      	ldr	r2, [pc, #364]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8001002:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001004:	4b5a      	ldr	r3, [pc, #360]	@ (8001170 <HAL_UART_MspInit+0x2c0>)
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	201b      	movs	r0, #27
 8001010:	f000 fd26 	bl	8001a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001014:	201b      	movs	r0, #27
 8001016:	f000 fd38 	bl	8001a8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800101a:	e390      	b.n	800173e <HAL_UART_MspInit+0x88e>
  else if(uartHandle->Instance==USART2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a55      	ldr	r2, [pc, #340]	@ (8001178 <HAL_UART_MspInit+0x2c8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d000      	beq.n	8001028 <HAL_UART_MspInit+0x178>
 8001026:	e0b1      	b.n	800118c <HAL_UART_MspInit+0x2dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001028:	2148      	movs	r1, #72	@ 0x48
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2202      	movs	r2, #2
 800102e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001030:	187b      	adds	r3, r7, r1
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001036:	187b      	adds	r3, r7, r1
 8001038:	0018      	movs	r0, r3
 800103a:	f001 ff6d 	bl	8002f18 <HAL_RCCEx_PeriphCLKConfig>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8001042:	f7ff fca5 	bl	8000990 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001046:	4b47      	ldr	r3, [pc, #284]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 8001048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800104a:	4b46      	ldr	r3, [pc, #280]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	0289      	lsls	r1, r1, #10
 8001050:	430a      	orrs	r2, r1
 8001052:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001054:	4b43      	ldr	r3, [pc, #268]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 8001056:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001058:	2380      	movs	r3, #128	@ 0x80
 800105a:	029b      	lsls	r3, r3, #10
 800105c:	4013      	ands	r3, r2
 800105e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b40      	ldr	r3, [pc, #256]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 8001064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001066:	4b3f      	ldr	r3, [pc, #252]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 8001068:	2101      	movs	r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	635a      	str	r2, [r3, #52]	@ 0x34
 800106e:	4b3d      	ldr	r3, [pc, #244]	@ (8001164 <HAL_UART_MspInit+0x2b4>)
 8001070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001072:	2201      	movs	r2, #1
 8001074:	4013      	ands	r3, r2
 8001076:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800107a:	2194      	movs	r1, #148	@ 0x94
 800107c:	187b      	adds	r3, r7, r1
 800107e:	220c      	movs	r2, #12
 8001080:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2202      	movs	r2, #2
 8001086:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2201      	movs	r2, #1
 8001098:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	187a      	adds	r2, r7, r1
 800109c:	23a0      	movs	r3, #160	@ 0xa0
 800109e:	05db      	lsls	r3, r3, #23
 80010a0:	0011      	movs	r1, r2
 80010a2:	0018      	movs	r0, r3
 80010a4:	f001 f876 	bl	8002194 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80010a8:	4b34      	ldr	r3, [pc, #208]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010aa:	4a35      	ldr	r2, [pc, #212]	@ (8001180 <HAL_UART_MspInit+0x2d0>)
 80010ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80010ae:	4b33      	ldr	r3, [pc, #204]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010b0:	2234      	movs	r2, #52	@ 0x34
 80010b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b4:	4b31      	ldr	r3, [pc, #196]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ba:	4b30      	ldr	r3, [pc, #192]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010c0:	4b2e      	ldr	r3, [pc, #184]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010c2:	2280      	movs	r2, #128	@ 0x80
 80010c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c6:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010cc:	4b2b      	ldr	r3, [pc, #172]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80010d2:	4b2a      	ldr	r3, [pc, #168]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010d4:	2220      	movs	r2, #32
 80010d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010d8:	4b28      	ldr	r3, [pc, #160]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010de:	4b27      	ldr	r3, [pc, #156]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010e0:	0018      	movs	r0, r3
 80010e2:	f000 fcef 	bl	8001ac4 <HAL_DMA_Init>
 80010e6:	1e03      	subs	r3, r0, #0
 80010e8:	d001      	beq.n	80010ee <HAL_UART_MspInit+0x23e>
      Error_Handler();
 80010ea:	f7ff fc51 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2180      	movs	r1, #128	@ 0x80
 80010f2:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010f4:	505a      	str	r2, [r3, r1]
 80010f6:	4b21      	ldr	r3, [pc, #132]	@ (800117c <HAL_UART_MspInit+0x2cc>)
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80010fc:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 80010fe:	4a22      	ldr	r2, [pc, #136]	@ (8001188 <HAL_UART_MspInit+0x2d8>)
 8001100:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001102:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 8001104:	2235      	movs	r2, #53	@ 0x35
 8001106:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001108:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 800110a:	2210      	movs	r2, #16
 800110c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110e:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 8001116:	2280      	movs	r2, #128	@ 0x80
 8001118:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 8001128:	2220      	movs	r2, #32
 800112a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fcc5 	bl	8001ac4 <HAL_DMA_Init>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <HAL_UART_MspInit+0x292>
      Error_Handler();
 800113e:	f7ff fc27 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a0f      	ldr	r2, [pc, #60]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 8001146:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <HAL_UART_MspInit+0x2d4>)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	201c      	movs	r0, #28
 8001154:	f000 fc84 	bl	8001a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8001158:	201c      	movs	r0, #28
 800115a:	f000 fc96 	bl	8001a8a <HAL_NVIC_EnableIRQ>
}
 800115e:	e2ee      	b.n	800173e <HAL_UART_MspInit+0x88e>
 8001160:	40013800 	.word	0x40013800
 8001164:	40021000 	.word	0x40021000
 8001168:	20000484 	.word	0x20000484
 800116c:	40020008 	.word	0x40020008
 8001170:	200004e4 	.word	0x200004e4
 8001174:	4002001c 	.word	0x4002001c
 8001178:	40004400 	.word	0x40004400
 800117c:	20000544 	.word	0x20000544
 8001180:	40020030 	.word	0x40020030
 8001184:	200005a4 	.word	0x200005a4
 8001188:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART3)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4aaa      	ldr	r2, [pc, #680]	@ (800143c <HAL_UART_MspInit+0x58c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d000      	beq.n	8001198 <HAL_UART_MspInit+0x2e8>
 8001196:	e0bd      	b.n	8001314 <HAL_UART_MspInit+0x464>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001198:	2148      	movs	r1, #72	@ 0x48
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2204      	movs	r2, #4
 800119e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	0018      	movs	r0, r3
 80011aa:	f001 feb5 	bl	8002f18 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	1e03      	subs	r3, r0, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_UART_MspInit+0x306>
      Error_Handler();
 80011b2:	f7ff fbed 	bl	8000990 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b6:	4ba2      	ldr	r3, [pc, #648]	@ (8001440 <HAL_UART_MspInit+0x590>)
 80011b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001440 <HAL_UART_MspInit+0x590>)
 80011bc:	2180      	movs	r1, #128	@ 0x80
 80011be:	02c9      	lsls	r1, r1, #11
 80011c0:	430a      	orrs	r2, r1
 80011c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011c4:	4b9e      	ldr	r3, [pc, #632]	@ (8001440 <HAL_UART_MspInit+0x590>)
 80011c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	02db      	lsls	r3, r3, #11
 80011cc:	4013      	ands	r3, r2
 80011ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80011d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b9b      	ldr	r3, [pc, #620]	@ (8001440 <HAL_UART_MspInit+0x590>)
 80011d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011d6:	4b9a      	ldr	r3, [pc, #616]	@ (8001440 <HAL_UART_MspInit+0x590>)
 80011d8:	2101      	movs	r1, #1
 80011da:	430a      	orrs	r2, r1
 80011dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80011de:	4b98      	ldr	r3, [pc, #608]	@ (8001440 <HAL_UART_MspInit+0x590>)
 80011e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e2:	2201      	movs	r2, #1
 80011e4:	4013      	ands	r3, r2
 80011e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80011e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	4b95      	ldr	r3, [pc, #596]	@ (8001440 <HAL_UART_MspInit+0x590>)
 80011ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011ee:	4b94      	ldr	r3, [pc, #592]	@ (8001440 <HAL_UART_MspInit+0x590>)
 80011f0:	2102      	movs	r1, #2
 80011f2:	430a      	orrs	r2, r1
 80011f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011f6:	4b92      	ldr	r3, [pc, #584]	@ (8001440 <HAL_UART_MspInit+0x590>)
 80011f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011fa:	2202      	movs	r2, #2
 80011fc:	4013      	ands	r3, r2
 80011fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001202:	2494      	movs	r4, #148	@ 0x94
 8001204:	193b      	adds	r3, r7, r4
 8001206:	2220      	movs	r2, #32
 8001208:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	193b      	adds	r3, r7, r4
 800120c:	2202      	movs	r2, #2
 800120e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	193b      	adds	r3, r7, r4
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	193b      	adds	r3, r7, r4
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800121c:	193b      	adds	r3, r7, r4
 800121e:	2204      	movs	r2, #4
 8001220:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	193a      	adds	r2, r7, r4
 8001224:	23a0      	movs	r3, #160	@ 0xa0
 8001226:	05db      	lsls	r3, r3, #23
 8001228:	0011      	movs	r1, r2
 800122a:	0018      	movs	r0, r3
 800122c:	f000 ffb2 	bl	8002194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001230:	0021      	movs	r1, r4
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2202      	movs	r2, #2
 800123c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	187b      	adds	r3, r7, r1
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800124a:	187b      	adds	r3, r7, r1
 800124c:	2204      	movs	r2, #4
 800124e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	187b      	adds	r3, r7, r1
 8001252:	4a7c      	ldr	r2, [pc, #496]	@ (8001444 <HAL_UART_MspInit+0x594>)
 8001254:	0019      	movs	r1, r3
 8001256:	0010      	movs	r0, r2
 8001258:	f000 ff9c 	bl	8002194 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel5;
 800125c:	4b7a      	ldr	r3, [pc, #488]	@ (8001448 <HAL_UART_MspInit+0x598>)
 800125e:	4a7b      	ldr	r2, [pc, #492]	@ (800144c <HAL_UART_MspInit+0x59c>)
 8001260:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001262:	4b79      	ldr	r3, [pc, #484]	@ (8001448 <HAL_UART_MspInit+0x598>)
 8001264:	2236      	movs	r2, #54	@ 0x36
 8001266:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001268:	4b77      	ldr	r3, [pc, #476]	@ (8001448 <HAL_UART_MspInit+0x598>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126e:	4b76      	ldr	r3, [pc, #472]	@ (8001448 <HAL_UART_MspInit+0x598>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001274:	4b74      	ldr	r3, [pc, #464]	@ (8001448 <HAL_UART_MspInit+0x598>)
 8001276:	2280      	movs	r2, #128	@ 0x80
 8001278:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800127a:	4b73      	ldr	r3, [pc, #460]	@ (8001448 <HAL_UART_MspInit+0x598>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001280:	4b71      	ldr	r3, [pc, #452]	@ (8001448 <HAL_UART_MspInit+0x598>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001286:	4b70      	ldr	r3, [pc, #448]	@ (8001448 <HAL_UART_MspInit+0x598>)
 8001288:	2220      	movs	r2, #32
 800128a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800128c:	4b6e      	ldr	r3, [pc, #440]	@ (8001448 <HAL_UART_MspInit+0x598>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001292:	4b6d      	ldr	r3, [pc, #436]	@ (8001448 <HAL_UART_MspInit+0x598>)
 8001294:	0018      	movs	r0, r3
 8001296:	f000 fc15 	bl	8001ac4 <HAL_DMA_Init>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d001      	beq.n	80012a2 <HAL_UART_MspInit+0x3f2>
      Error_Handler();
 800129e:	f7ff fb77 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2180      	movs	r1, #128	@ 0x80
 80012a6:	4a68      	ldr	r2, [pc, #416]	@ (8001448 <HAL_UART_MspInit+0x598>)
 80012a8:	505a      	str	r2, [r3, r1]
 80012aa:	4b67      	ldr	r3, [pc, #412]	@ (8001448 <HAL_UART_MspInit+0x598>)
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_tx.Instance = DMA1_Channel6;
 80012b0:	4b67      	ldr	r3, [pc, #412]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012b2:	4a68      	ldr	r2, [pc, #416]	@ (8001454 <HAL_UART_MspInit+0x5a4>)
 80012b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80012b6:	4b66      	ldr	r3, [pc, #408]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012b8:	2237      	movs	r2, #55	@ 0x37
 80012ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012bc:	4b64      	ldr	r3, [pc, #400]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012be:	2210      	movs	r2, #16
 80012c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c2:	4b63      	ldr	r3, [pc, #396]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012c8:	4b61      	ldr	r3, [pc, #388]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012ca:	2280      	movs	r2, #128	@ 0x80
 80012cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ce:	4b60      	ldr	r3, [pc, #384]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 80012da:	4b5d      	ldr	r3, [pc, #372]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012dc:	2220      	movs	r2, #32
 80012de:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80012e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012e8:	0018      	movs	r0, r3
 80012ea:	f000 fbeb 	bl	8001ac4 <HAL_DMA_Init>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_UART_MspInit+0x446>
      Error_Handler();
 80012f2:	f7ff fb4d 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a55      	ldr	r2, [pc, #340]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012fa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80012fc:	4b54      	ldr	r3, [pc, #336]	@ (8001450 <HAL_UART_MspInit+0x5a0>)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	201d      	movs	r0, #29
 8001308:	f000 fbaa 	bl	8001a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 800130c:	201d      	movs	r0, #29
 800130e:	f000 fbbc 	bl	8001a8a <HAL_NVIC_EnableIRQ>
}
 8001312:	e214      	b.n	800173e <HAL_UART_MspInit+0x88e>
  else if(uartHandle->Instance==USART4)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a4f      	ldr	r2, [pc, #316]	@ (8001458 <HAL_UART_MspInit+0x5a8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d000      	beq.n	8001320 <HAL_UART_MspInit+0x470>
 800131e:	e0a5      	b.n	800146c <HAL_UART_MspInit+0x5bc>
    __HAL_RCC_USART4_CLK_ENABLE();
 8001320:	4b47      	ldr	r3, [pc, #284]	@ (8001440 <HAL_UART_MspInit+0x590>)
 8001322:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001324:	4b46      	ldr	r3, [pc, #280]	@ (8001440 <HAL_UART_MspInit+0x590>)
 8001326:	2180      	movs	r1, #128	@ 0x80
 8001328:	0309      	lsls	r1, r1, #12
 800132a:	430a      	orrs	r2, r1
 800132c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800132e:	4b44      	ldr	r3, [pc, #272]	@ (8001440 <HAL_UART_MspInit+0x590>)
 8001330:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001332:	2380      	movs	r3, #128	@ 0x80
 8001334:	031b      	lsls	r3, r3, #12
 8001336:	4013      	ands	r3, r2
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800133a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <HAL_UART_MspInit+0x590>)
 800133e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001340:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <HAL_UART_MspInit+0x590>)
 8001342:	2101      	movs	r1, #1
 8001344:	430a      	orrs	r2, r1
 8001346:	635a      	str	r2, [r3, #52]	@ 0x34
 8001348:	4b3d      	ldr	r3, [pc, #244]	@ (8001440 <HAL_UART_MspInit+0x590>)
 800134a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800134c:	2201      	movs	r2, #1
 800134e:	4013      	ands	r3, r2
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001354:	2194      	movs	r1, #148	@ 0x94
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2203      	movs	r2, #3
 800135a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2202      	movs	r2, #2
 8001360:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2204      	movs	r2, #4
 8001372:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	187a      	adds	r2, r7, r1
 8001376:	23a0      	movs	r3, #160	@ 0xa0
 8001378:	05db      	lsls	r3, r3, #23
 800137a:	0011      	movs	r1, r2
 800137c:	0018      	movs	r0, r3
 800137e:	f000 ff09 	bl	8002194 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel7;
 8001382:	4b36      	ldr	r3, [pc, #216]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 8001384:	4a36      	ldr	r2, [pc, #216]	@ (8001460 <HAL_UART_MspInit+0x5b0>)
 8001386:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 8001388:	4b34      	ldr	r3, [pc, #208]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 800138a:	2238      	movs	r2, #56	@ 0x38
 800138c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138e:	4b33      	ldr	r3, [pc, #204]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001394:	4b31      	ldr	r3, [pc, #196]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800139a:	4b30      	ldr	r3, [pc, #192]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 800139c:	2280      	movs	r2, #128	@ 0x80
 800139e:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013a0:	4b2e      	ldr	r3, [pc, #184]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a6:	4b2d      	ldr	r3, [pc, #180]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80013ac:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 80013ae:	2220      	movs	r2, #32
 80013b0:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013b2:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80013b8:	4b28      	ldr	r3, [pc, #160]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 fb82 	bl	8001ac4 <HAL_DMA_Init>
 80013c0:	1e03      	subs	r3, r0, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_UART_MspInit+0x518>
      Error_Handler();
 80013c4:	f7ff fae4 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2180      	movs	r1, #128	@ 0x80
 80013cc:	4a23      	ldr	r2, [pc, #140]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 80013ce:	505a      	str	r2, [r3, r1]
 80013d0:	4b22      	ldr	r3, [pc, #136]	@ (800145c <HAL_UART_MspInit+0x5ac>)
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA2_Channel1;
 80013d6:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 80013d8:	4a23      	ldr	r2, [pc, #140]	@ (8001468 <HAL_UART_MspInit+0x5b8>)
 80013da:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 80013dc:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 80013de:	2239      	movs	r2, #57	@ 0x39
 80013e0:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 80013e4:	2210      	movs	r2, #16
 80013e6:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 80013f0:	2280      	movs	r2, #128	@ 0x80
 80013f2:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_CIRCULAR;
 8001400:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 8001402:	2220      	movs	r2, #32
 8001404:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001406:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 800140e:	0018      	movs	r0, r3
 8001410:	f000 fb58 	bl	8001ac4 <HAL_DMA_Init>
 8001414:	1e03      	subs	r3, r0, #0
 8001416:	d001      	beq.n	800141c <HAL_UART_MspInit+0x56c>
      Error_Handler();
 8001418:	f7ff faba 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 8001420:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <HAL_UART_MspInit+0x5b4>)
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	201d      	movs	r0, #29
 800142e:	f000 fb17 	bl	8001a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8001432:	201d      	movs	r0, #29
 8001434:	f000 fb29 	bl	8001a8a <HAL_NVIC_EnableIRQ>
}
 8001438:	e181      	b.n	800173e <HAL_UART_MspInit+0x88e>
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	40004800 	.word	0x40004800
 8001440:	40021000 	.word	0x40021000
 8001444:	50000400 	.word	0x50000400
 8001448:	20000604 	.word	0x20000604
 800144c:	40020058 	.word	0x40020058
 8001450:	20000664 	.word	0x20000664
 8001454:	4002006c 	.word	0x4002006c
 8001458:	40004c00 	.word	0x40004c00
 800145c:	200006c4 	.word	0x200006c4
 8001460:	40020080 	.word	0x40020080
 8001464:	20000724 	.word	0x20000724
 8001468:	40020408 	.word	0x40020408
  else if(uartHandle->Instance==USART5)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4ab5      	ldr	r2, [pc, #724]	@ (8001748 <HAL_UART_MspInit+0x898>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d000      	beq.n	8001478 <HAL_UART_MspInit+0x5c8>
 8001476:	e0ad      	b.n	80015d4 <HAL_UART_MspInit+0x724>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001478:	4bb4      	ldr	r3, [pc, #720]	@ (800174c <HAL_UART_MspInit+0x89c>)
 800147a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800147c:	4bb3      	ldr	r3, [pc, #716]	@ (800174c <HAL_UART_MspInit+0x89c>)
 800147e:	2180      	movs	r1, #128	@ 0x80
 8001480:	0049      	lsls	r1, r1, #1
 8001482:	430a      	orrs	r2, r1
 8001484:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001486:	4bb1      	ldr	r3, [pc, #708]	@ (800174c <HAL_UART_MspInit+0x89c>)
 8001488:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4013      	ands	r3, r2
 8001490:	623b      	str	r3, [r7, #32]
 8001492:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4bad      	ldr	r3, [pc, #692]	@ (800174c <HAL_UART_MspInit+0x89c>)
 8001496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001498:	4bac      	ldr	r3, [pc, #688]	@ (800174c <HAL_UART_MspInit+0x89c>)
 800149a:	2102      	movs	r1, #2
 800149c:	430a      	orrs	r2, r1
 800149e:	635a      	str	r2, [r3, #52]	@ 0x34
 80014a0:	4baa      	ldr	r3, [pc, #680]	@ (800174c <HAL_UART_MspInit+0x89c>)
 80014a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a4:	2202      	movs	r2, #2
 80014a6:	4013      	ands	r3, r2
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ac:	4ba7      	ldr	r3, [pc, #668]	@ (800174c <HAL_UART_MspInit+0x89c>)
 80014ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014b0:	4ba6      	ldr	r3, [pc, #664]	@ (800174c <HAL_UART_MspInit+0x89c>)
 80014b2:	2108      	movs	r1, #8
 80014b4:	430a      	orrs	r2, r1
 80014b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b8:	4ba4      	ldr	r3, [pc, #656]	@ (800174c <HAL_UART_MspInit+0x89c>)
 80014ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014bc:	2208      	movs	r2, #8
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014c4:	2494      	movs	r4, #148	@ 0x94
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	2202      	movs	r2, #2
 80014d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	193b      	adds	r3, r7, r4
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	193b      	adds	r3, r7, r4
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART5;
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2208      	movs	r2, #8
 80014e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	4a9a      	ldr	r2, [pc, #616]	@ (8001750 <HAL_UART_MspInit+0x8a0>)
 80014e8:	0019      	movs	r1, r3
 80014ea:	0010      	movs	r0, r2
 80014ec:	f000 fe52 	bl	8002194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f0:	0021      	movs	r1, r4
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2208      	movs	r2, #8
 80014f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2202      	movs	r2, #2
 80014fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2203      	movs	r2, #3
 800150e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001510:	187b      	adds	r3, r7, r1
 8001512:	4a90      	ldr	r2, [pc, #576]	@ (8001754 <HAL_UART_MspInit+0x8a4>)
 8001514:	0019      	movs	r1, r3
 8001516:	0010      	movs	r0, r2
 8001518:	f000 fe3c 	bl	8002194 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA2_Channel2;
 800151c:	4b8e      	ldr	r3, [pc, #568]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 800151e:	4a8f      	ldr	r2, [pc, #572]	@ (800175c <HAL_UART_MspInit+0x8ac>)
 8001520:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_USART5_RX;
 8001522:	4b8d      	ldr	r3, [pc, #564]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 8001524:	224a      	movs	r2, #74	@ 0x4a
 8001526:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001528:	4b8b      	ldr	r3, [pc, #556]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	4b8a      	ldr	r3, [pc, #552]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001534:	4b88      	ldr	r3, [pc, #544]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153a:	4b87      	ldr	r3, [pc, #540]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001540:	4b85      	ldr	r3, [pc, #532]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_CIRCULAR;
 8001546:	4b84      	ldr	r3, [pc, #528]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 8001548:	2220      	movs	r2, #32
 800154a:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800154c:	4b82      	ldr	r3, [pc, #520]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 8001552:	4b81      	ldr	r3, [pc, #516]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 8001554:	0018      	movs	r0, r3
 8001556:	f000 fab5 	bl	8001ac4 <HAL_DMA_Init>
 800155a:	1e03      	subs	r3, r0, #0
 800155c:	d001      	beq.n	8001562 <HAL_UART_MspInit+0x6b2>
      Error_Handler();
 800155e:	f7ff fa17 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart5_rx);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2180      	movs	r1, #128	@ 0x80
 8001566:	4a7c      	ldr	r2, [pc, #496]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 8001568:	505a      	str	r2, [r3, r1]
 800156a:	4b7b      	ldr	r3, [pc, #492]	@ (8001758 <HAL_UART_MspInit+0x8a8>)
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart5_tx.Instance = DMA2_Channel3;
 8001570:	4b7b      	ldr	r3, [pc, #492]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 8001572:	4a7c      	ldr	r2, [pc, #496]	@ (8001764 <HAL_UART_MspInit+0x8b4>)
 8001574:	601a      	str	r2, [r3, #0]
    hdma_usart5_tx.Init.Request = DMA_REQUEST_USART5_TX;
 8001576:	4b7a      	ldr	r3, [pc, #488]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 8001578:	224b      	movs	r2, #75	@ 0x4b
 800157a:	605a      	str	r2, [r3, #4]
    hdma_usart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800157c:	4b78      	ldr	r3, [pc, #480]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 800157e:	2210      	movs	r2, #16
 8001580:	609a      	str	r2, [r3, #8]
    hdma_usart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001582:	4b77      	ldr	r3, [pc, #476]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
    hdma_usart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001588:	4b75      	ldr	r3, [pc, #468]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 800158a:	2280      	movs	r2, #128	@ 0x80
 800158c:	611a      	str	r2, [r3, #16]
    hdma_usart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800158e:	4b74      	ldr	r3, [pc, #464]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
    hdma_usart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001594:	4b72      	ldr	r3, [pc, #456]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
    hdma_usart5_tx.Init.Mode = DMA_CIRCULAR;
 800159a:	4b71      	ldr	r3, [pc, #452]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 800159c:	2220      	movs	r2, #32
 800159e:	61da      	str	r2, [r3, #28]
    hdma_usart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_tx) != HAL_OK)
 80015a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 fa8b 	bl	8001ac4 <HAL_DMA_Init>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_UART_MspInit+0x706>
      Error_Handler();
 80015b2:	f7ff f9ed 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart5_tx);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a69      	ldr	r2, [pc, #420]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 80015ba:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015bc:	4b68      	ldr	r3, [pc, #416]	@ (8001760 <HAL_UART_MspInit+0x8b0>)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	201d      	movs	r0, #29
 80015c8:	f000 fa4a 	bl	8001a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 80015cc:	201d      	movs	r0, #29
 80015ce:	f000 fa5c 	bl	8001a8a <HAL_NVIC_EnableIRQ>
}
 80015d2:	e0b4      	b.n	800173e <HAL_UART_MspInit+0x88e>
  else if(uartHandle->Instance==USART6)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a63      	ldr	r2, [pc, #396]	@ (8001768 <HAL_UART_MspInit+0x8b8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d000      	beq.n	80015e0 <HAL_UART_MspInit+0x730>
 80015de:	e0ae      	b.n	800173e <HAL_UART_MspInit+0x88e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015e0:	4b5a      	ldr	r3, [pc, #360]	@ (800174c <HAL_UART_MspInit+0x89c>)
 80015e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015e4:	4b59      	ldr	r3, [pc, #356]	@ (800174c <HAL_UART_MspInit+0x89c>)
 80015e6:	2180      	movs	r1, #128	@ 0x80
 80015e8:	0089      	lsls	r1, r1, #2
 80015ea:	430a      	orrs	r2, r1
 80015ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015ee:	4b57      	ldr	r3, [pc, #348]	@ (800174c <HAL_UART_MspInit+0x89c>)
 80015f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4013      	ands	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b53      	ldr	r3, [pc, #332]	@ (800174c <HAL_UART_MspInit+0x89c>)
 80015fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001600:	4b52      	ldr	r3, [pc, #328]	@ (800174c <HAL_UART_MspInit+0x89c>)
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34
 8001608:	4b50      	ldr	r3, [pc, #320]	@ (800174c <HAL_UART_MspInit+0x89c>)
 800160a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800160c:	2201      	movs	r2, #1
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b4d      	ldr	r3, [pc, #308]	@ (800174c <HAL_UART_MspInit+0x89c>)
 8001616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001618:	4b4c      	ldr	r3, [pc, #304]	@ (800174c <HAL_UART_MspInit+0x89c>)
 800161a:	2102      	movs	r1, #2
 800161c:	430a      	orrs	r2, r1
 800161e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001620:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <HAL_UART_MspInit+0x89c>)
 8001622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800162c:	2494      	movs	r4, #148	@ 0x94
 800162e:	193b      	adds	r3, r7, r4
 8001630:	2210      	movs	r2, #16
 8001632:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	193b      	adds	r3, r7, r4
 8001636:	2202      	movs	r2, #2
 8001638:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	193b      	adds	r3, r7, r4
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	193b      	adds	r3, r7, r4
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART6;
 8001646:	193b      	adds	r3, r7, r4
 8001648:	2203      	movs	r2, #3
 800164a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	193a      	adds	r2, r7, r4
 800164e:	23a0      	movs	r3, #160	@ 0xa0
 8001650:	05db      	lsls	r3, r3, #23
 8001652:	0011      	movs	r1, r2
 8001654:	0018      	movs	r0, r3
 8001656:	f000 fd9d 	bl	8002194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800165a:	0021      	movs	r1, r4
 800165c:	187b      	adds	r3, r7, r1
 800165e:	2280      	movs	r2, #128	@ 0x80
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2202      	movs	r2, #2
 8001668:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	187b      	adds	r3, r7, r1
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2208      	movs	r2, #8
 800167a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	187b      	adds	r3, r7, r1
 800167e:	4a34      	ldr	r2, [pc, #208]	@ (8001750 <HAL_UART_MspInit+0x8a0>)
 8001680:	0019      	movs	r1, r3
 8001682:	0010      	movs	r0, r2
 8001684:	f000 fd86 	bl	8002194 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Channel4;
 8001688:	4b38      	ldr	r3, [pc, #224]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 800168a:	4a39      	ldr	r2, [pc, #228]	@ (8001770 <HAL_UART_MspInit+0x8c0>)
 800168c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 800168e:	4b37      	ldr	r3, [pc, #220]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 8001690:	224c      	movs	r2, #76	@ 0x4c
 8001692:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001694:	4b35      	ldr	r3, [pc, #212]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800169a:	4b34      	ldr	r3, [pc, #208]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016a0:	4b32      	ldr	r3, [pc, #200]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 80016a2:	2280      	movs	r2, #128	@ 0x80
 80016a4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a6:	4b31      	ldr	r3, [pc, #196]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ac:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80016b2:	4b2e      	ldr	r3, [pc, #184]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 80016b4:	2220      	movs	r2, #32
 80016b6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016b8:	4b2c      	ldr	r3, [pc, #176]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 80016c0:	0018      	movs	r0, r3
 80016c2:	f000 f9ff 	bl	8001ac4 <HAL_DMA_Init>
 80016c6:	1e03      	subs	r3, r0, #0
 80016c8:	d001      	beq.n	80016ce <HAL_UART_MspInit+0x81e>
      Error_Handler();
 80016ca:	f7ff f961 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2180      	movs	r1, #128	@ 0x80
 80016d2:	4a26      	ldr	r2, [pc, #152]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 80016d4:	505a      	str	r2, [r3, r1]
 80016d6:	4b25      	ldr	r3, [pc, #148]	@ (800176c <HAL_UART_MspInit+0x8bc>)
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart6_tx.Instance = DMA2_Channel5;
 80016dc:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 80016de:	4a26      	ldr	r2, [pc, #152]	@ (8001778 <HAL_UART_MspInit+0x8c8>)
 80016e0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 80016e4:	224d      	movs	r2, #77	@ 0x4d
 80016e6:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e8:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 80016ea:	2210      	movs	r2, #16
 80016ec:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ee:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 80016f6:	2280      	movs	r2, #128	@ 0x80
 80016f8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001700:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8001706:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 8001708:	2220      	movs	r2, #32
 800170a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 8001714:	0018      	movs	r0, r3
 8001716:	f000 f9d5 	bl	8001ac4 <HAL_DMA_Init>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <HAL_UART_MspInit+0x872>
      Error_Handler();
 800171e:	f7ff f937 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a13      	ldr	r2, [pc, #76]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 8001726:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_UART_MspInit+0x8c4>)
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	201d      	movs	r0, #29
 8001734:	f000 f994 	bl	8001a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8001738:	201d      	movs	r0, #29
 800173a:	f000 f9a6 	bl	8001a8a <HAL_NVIC_EnableIRQ>
}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b02b      	add	sp, #172	@ 0xac
 8001744:	bd90      	pop	{r4, r7, pc}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	40005000 	.word	0x40005000
 800174c:	40021000 	.word	0x40021000
 8001750:	50000400 	.word	0x50000400
 8001754:	50000c00 	.word	0x50000c00
 8001758:	20000784 	.word	0x20000784
 800175c:	4002041c 	.word	0x4002041c
 8001760:	200007e4 	.word	0x200007e4
 8001764:	40020430 	.word	0x40020430
 8001768:	40013c00 	.word	0x40013c00
 800176c:	20000844 	.word	0x20000844
 8001770:	40020444 	.word	0x40020444
 8001774:	200008a4 	.word	0x200008a4
 8001778:	40020458 	.word	0x40020458

0800177c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800177c:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800177e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001780:	f7ff f9fe 	bl	8000b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001786:	490d      	ldr	r1, [pc, #52]	@ (80017bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001788:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <LoopForever+0xe>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800179c:	4c0a      	ldr	r4, [pc, #40]	@ (80017c8 <LoopForever+0x16>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017aa:	f003 fbbd 	bl	8004f28 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017ae:	f7ff f87d 	bl	80008ac <main>

080017b2 <LoopForever>:

LoopForever:
  b LoopForever
 80017b2:	e7fe      	b.n	80017b2 <LoopForever>
  ldr   r0, =_estack
 80017b4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80017c0:	08005038 	.word	0x08005038
  ldr r2, =_sbss
 80017c4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80017c8:	20000908 	.word	0x20000908

080017cc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC1_COMP_IRQHandler>
	...

080017d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d6:	1dfb      	adds	r3, r7, #7
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_Init+0x3c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_Init+0x3c>)
 80017e2:	2180      	movs	r1, #128	@ 0x80
 80017e4:	0049      	lsls	r1, r1, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ea:	2003      	movs	r0, #3
 80017ec:	f000 f810 	bl	8001810 <HAL_InitTick>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d003      	beq.n	80017fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017f4:	1dfb      	adds	r3, r7, #7
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	e001      	b.n	8001800 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff f8ce 	bl	800099c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001800:	1dfb      	adds	r3, r7, #7
 8001802:	781b      	ldrb	r3, [r3, #0]
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40022000 	.word	0x40022000

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001818:	230f      	movs	r3, #15
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <HAL_InitTick+0x88>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d02b      	beq.n	8001880 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001828:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <HAL_InitTick+0x8c>)
 800182a:	681c      	ldr	r4, [r3, #0]
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_InitTick+0x88>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	0019      	movs	r1, r3
 8001832:	23fa      	movs	r3, #250	@ 0xfa
 8001834:	0098      	lsls	r0, r3, #2
 8001836:	f7fe fc65 	bl	8000104 <__udivsi3>
 800183a:	0003      	movs	r3, r0
 800183c:	0019      	movs	r1, r3
 800183e:	0020      	movs	r0, r4
 8001840:	f7fe fc60 	bl	8000104 <__udivsi3>
 8001844:	0003      	movs	r3, r0
 8001846:	0018      	movs	r0, r3
 8001848:	f000 f92f 	bl	8001aaa <HAL_SYSTICK_Config>
 800184c:	1e03      	subs	r3, r0, #0
 800184e:	d112      	bne.n	8001876 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b03      	cmp	r3, #3
 8001854:	d80a      	bhi.n	800186c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	2301      	movs	r3, #1
 800185a:	425b      	negs	r3, r3
 800185c:	2200      	movs	r2, #0
 800185e:	0018      	movs	r0, r3
 8001860:	f000 f8fe 	bl	8001a60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001864:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <HAL_InitTick+0x90>)
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e00d      	b.n	8001888 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800186c:	230f      	movs	r3, #15
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	e008      	b.n	8001888 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001876:	230f      	movs	r3, #15
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	e003      	b.n	8001888 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001880:	230f      	movs	r3, #15
 8001882:	18fb      	adds	r3, r7, r3
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001888:	230f      	movs	r3, #15
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	781b      	ldrb	r3, [r3, #0]
}
 800188e:	0018      	movs	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	b005      	add	sp, #20
 8001894:	bd90      	pop	{r4, r7, pc}
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	20000080 	.word	0x20000080
 800189c:	20000078 	.word	0x20000078
 80018a0:	2000007c 	.word	0x2000007c

080018a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <HAL_IncTick+0x1c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	001a      	movs	r2, r3
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <HAL_IncTick+0x20>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	18d2      	adds	r2, r2, r3
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_IncTick+0x20>)
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	46c0      	nop			@ (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	20000080 	.word	0x20000080
 80018c4:	20000904 	.word	0x20000904

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b02      	ldr	r3, [pc, #8]	@ (80018d8 <HAL_GetTick+0x10>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	0018      	movs	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	20000904 	.word	0x20000904

080018dc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a06      	ldr	r2, [pc, #24]	@ (8001904 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	40010000 	.word	0x40010000
 8001904:	fffff9ff 	.word	0xfffff9ff

08001908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	0002      	movs	r2, r0
 8001910:	1dfb      	adds	r3, r7, #7
 8001912:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001914:	1dfb      	adds	r3, r7, #7
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b7f      	cmp	r3, #127	@ 0x7f
 800191a:	d809      	bhi.n	8001930 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191c:	1dfb      	adds	r3, r7, #7
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	001a      	movs	r2, r3
 8001922:	231f      	movs	r3, #31
 8001924:	401a      	ands	r2, r3
 8001926:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <__NVIC_EnableIRQ+0x30>)
 8001928:	2101      	movs	r1, #1
 800192a:	4091      	lsls	r1, r2
 800192c:	000a      	movs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001930:	46c0      	nop			@ (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	0002      	movs	r2, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001950:	d828      	bhi.n	80019a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001952:	4a2f      	ldr	r2, [pc, #188]	@ (8001a10 <__NVIC_SetPriority+0xd4>)
 8001954:	1dfb      	adds	r3, r7, #7
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b25b      	sxtb	r3, r3
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	33c0      	adds	r3, #192	@ 0xc0
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	589b      	ldr	r3, [r3, r2]
 8001962:	1dfa      	adds	r2, r7, #7
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	0011      	movs	r1, r2
 8001968:	2203      	movs	r2, #3
 800196a:	400a      	ands	r2, r1
 800196c:	00d2      	lsls	r2, r2, #3
 800196e:	21ff      	movs	r1, #255	@ 0xff
 8001970:	4091      	lsls	r1, r2
 8001972:	000a      	movs	r2, r1
 8001974:	43d2      	mvns	r2, r2
 8001976:	401a      	ands	r2, r3
 8001978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	019b      	lsls	r3, r3, #6
 800197e:	22ff      	movs	r2, #255	@ 0xff
 8001980:	401a      	ands	r2, r3
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	0018      	movs	r0, r3
 8001988:	2303      	movs	r3, #3
 800198a:	4003      	ands	r3, r0
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001990:	481f      	ldr	r0, [pc, #124]	@ (8001a10 <__NVIC_SetPriority+0xd4>)
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b25b      	sxtb	r3, r3
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	430a      	orrs	r2, r1
 800199c:	33c0      	adds	r3, #192	@ 0xc0
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019a2:	e031      	b.n	8001a08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <__NVIC_SetPriority+0xd8>)
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	0019      	movs	r1, r3
 80019ac:	230f      	movs	r3, #15
 80019ae:	400b      	ands	r3, r1
 80019b0:	3b08      	subs	r3, #8
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3306      	adds	r3, #6
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	18d3      	adds	r3, r2, r3
 80019ba:	3304      	adds	r3, #4
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1dfa      	adds	r2, r7, #7
 80019c0:	7812      	ldrb	r2, [r2, #0]
 80019c2:	0011      	movs	r1, r2
 80019c4:	2203      	movs	r2, #3
 80019c6:	400a      	ands	r2, r1
 80019c8:	00d2      	lsls	r2, r2, #3
 80019ca:	21ff      	movs	r1, #255	@ 0xff
 80019cc:	4091      	lsls	r1, r2
 80019ce:	000a      	movs	r2, r1
 80019d0:	43d2      	mvns	r2, r2
 80019d2:	401a      	ands	r2, r3
 80019d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	22ff      	movs	r2, #255	@ 0xff
 80019dc:	401a      	ands	r2, r3
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	0018      	movs	r0, r3
 80019e4:	2303      	movs	r3, #3
 80019e6:	4003      	ands	r3, r0
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ec:	4809      	ldr	r0, [pc, #36]	@ (8001a14 <__NVIC_SetPriority+0xd8>)
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	001c      	movs	r4, r3
 80019f4:	230f      	movs	r3, #15
 80019f6:	4023      	ands	r3, r4
 80019f8:	3b08      	subs	r3, #8
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	430a      	orrs	r2, r1
 80019fe:	3306      	adds	r3, #6
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	18c3      	adds	r3, r0, r3
 8001a04:	3304      	adds	r3, #4
 8001a06:	601a      	str	r2, [r3, #0]
}
 8001a08:	46c0      	nop			@ (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b003      	add	sp, #12
 8001a0e:	bd90      	pop	{r4, r7, pc}
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	1e5a      	subs	r2, r3, #1
 8001a24:	2380      	movs	r3, #128	@ 0x80
 8001a26:	045b      	lsls	r3, r3, #17
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d301      	bcc.n	8001a30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e010      	b.n	8001a52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <SysTick_Config+0x44>)
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	3a01      	subs	r2, #1
 8001a36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a38:	2301      	movs	r3, #1
 8001a3a:	425b      	negs	r3, r3
 8001a3c:	2103      	movs	r1, #3
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f7ff ff7c 	bl	800193c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <SysTick_Config+0x44>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <SysTick_Config+0x44>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b002      	add	sp, #8
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	1c02      	adds	r2, r0, #0
 8001a70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	0011      	movs	r1, r2
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff ff5d 	bl	800193c <__NVIC_SetPriority>
}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b004      	add	sp, #16
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	0002      	movs	r2, r0
 8001a92:	1dfb      	adds	r3, r7, #7
 8001a94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff ff33 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff ffaf 	bl	8001a18 <SysTick_Config>
 8001aba:	0003      	movs	r3, r0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b002      	add	sp, #8
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e091      	b.n	8001bfa <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	001a      	movs	r2, r3
 8001adc:	4b49      	ldr	r3, [pc, #292]	@ (8001c04 <HAL_DMA_Init+0x140>)
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d810      	bhi.n	8001b04 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a48      	ldr	r2, [pc, #288]	@ (8001c08 <HAL_DMA_Init+0x144>)
 8001ae8:	4694      	mov	ip, r2
 8001aea:	4463      	add	r3, ip
 8001aec:	2114      	movs	r1, #20
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe fb08 	bl	8000104 <__udivsi3>
 8001af4:	0003      	movs	r3, r0
 8001af6:	009a      	lsls	r2, r3, #2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a43      	ldr	r2, [pc, #268]	@ (8001c0c <HAL_DMA_Init+0x148>)
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b02:	e00f      	b.n	8001b24 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a41      	ldr	r2, [pc, #260]	@ (8001c10 <HAL_DMA_Init+0x14c>)
 8001b0a:	4694      	mov	ip, r2
 8001b0c:	4463      	add	r3, ip
 8001b0e:	2114      	movs	r1, #20
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7fe faf7 	bl	8000104 <__udivsi3>
 8001b16:	0003      	movs	r3, r0
 8001b18:	009a      	lsls	r2, r3, #2
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a3c      	ldr	r2, [pc, #240]	@ (8001c14 <HAL_DMA_Init+0x150>)
 8001b22:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2225      	movs	r2, #37	@ 0x25
 8001b28:	2102      	movs	r1, #2
 8001b2a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4938      	ldr	r1, [pc, #224]	@ (8001c18 <HAL_DMA_Init+0x154>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 fa9f 	bl	80020b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	01db      	lsls	r3, r3, #7
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d102      	bne.n	8001b8c <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b94:	217f      	movs	r1, #127	@ 0x7f
 8001b96:	400a      	ands	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ba2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d011      	beq.n	8001bd0 <HAL_DMA_Init+0x10c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d80d      	bhi.n	8001bd0 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 fac8 	bl	800214c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	e008      	b.n	8001be2 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2225      	movs	r2, #37	@ 0x25
 8001bec:	2101      	movs	r1, #1
 8001bee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2224      	movs	r2, #36	@ 0x24
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	40020407 	.word	0x40020407
 8001c08:	bffdfff8 	.word	0xbffdfff8
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	bffdfbf8 	.word	0xbffdfbf8
 8001c14:	40020400 	.word	0x40020400
 8001c18:	ffff800f 	.word	0xffff800f

08001c1c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2a:	2317      	movs	r3, #23
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2224      	movs	r2, #36	@ 0x24
 8001c36:	5c9b      	ldrb	r3, [r3, r2]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_DMA_Start_IT+0x24>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e06f      	b.n	8001d20 <HAL_DMA_Start_IT+0x104>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2224      	movs	r2, #36	@ 0x24
 8001c44:	2101      	movs	r1, #1
 8001c46:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2225      	movs	r2, #37	@ 0x25
 8001c4c:	5c9b      	ldrb	r3, [r3, r2]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d157      	bne.n	8001d04 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2225      	movs	r2, #37	@ 0x25
 8001c58:	2102      	movs	r1, #2
 8001c5a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	438a      	bics	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	68b9      	ldr	r1, [r7, #8]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f9e1 	bl	8002040 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d008      	beq.n	8001c98 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	210e      	movs	r1, #14
 8001c92:	430a      	orrs	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e00f      	b.n	8001cb8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	210a      	movs	r1, #10
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	@ 0x80
 8001cc0:	025b      	lsls	r3, r3, #9
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d008      	beq.n	8001cd8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd0:	2180      	movs	r1, #128	@ 0x80
 8001cd2:	0049      	lsls	r1, r1, #1
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cea:	2180      	movs	r1, #128	@ 0x80
 8001cec:	0049      	lsls	r1, r1, #1
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e00a      	b.n	8001d1a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2224      	movs	r2, #36	@ 0x24
 8001d0e:	2100      	movs	r1, #0
 8001d10:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001d12:	2317      	movs	r3, #23
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001d1a:	2317      	movs	r3, #23
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	781b      	ldrb	r3, [r3, #0]
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b006      	add	sp, #24
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e04f      	b.n	8001dda <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2225      	movs	r2, #37	@ 0x25
 8001d3e:	5c9b      	ldrb	r3, [r3, r2]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d008      	beq.n	8001d58 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2224      	movs	r2, #36	@ 0x24
 8001d50:	2100      	movs	r1, #0
 8001d52:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e040      	b.n	8001dda <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	210e      	movs	r1, #14
 8001d64:	438a      	bics	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d72:	491c      	ldr	r1, [pc, #112]	@ (8001de4 <HAL_DMA_Abort+0xbc>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2101      	movs	r1, #1
 8001d84:	438a      	bics	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8c:	221c      	movs	r2, #28
 8001d8e:	401a      	ands	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	2101      	movs	r1, #1
 8001d96:	4091      	lsls	r1, r2
 8001d98:	000a      	movs	r2, r1
 8001d9a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001da4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00c      	beq.n	8001dc8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db8:	490a      	ldr	r1, [pc, #40]	@ (8001de4 <HAL_DMA_Abort+0xbc>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001dc6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2225      	movs	r2, #37	@ 0x25
 8001dcc:	2101      	movs	r1, #1
 8001dce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	@ 0x24
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	fffffeff 	.word	0xfffffeff

08001de8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df0:	210f      	movs	r1, #15
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2225      	movs	r2, #37	@ 0x25
 8001dfc:	5c9b      	ldrb	r3, [r3, r2]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d006      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2204      	movs	r2, #4
 8001e08:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e048      	b.n	8001ea4 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	210e      	movs	r1, #14
 8001e1e:	438a      	bics	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	438a      	bics	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e3c:	491d      	ldr	r1, [pc, #116]	@ (8001eb4 <HAL_DMA_Abort_IT+0xcc>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	221c      	movs	r2, #28
 8001e48:	401a      	ands	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4091      	lsls	r1, r2
 8001e52:	000a      	movs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e5e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00c      	beq.n	8001e82 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e72:	4910      	ldr	r1, [pc, #64]	@ (8001eb4 <HAL_DMA_Abort_IT+0xcc>)
 8001e74:	400a      	ands	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e80:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2225      	movs	r2, #37	@ 0x25
 8001e86:	2101      	movs	r1, #1
 8001e88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2224      	movs	r2, #36	@ 0x24
 8001e8e:	2100      	movs	r1, #0
 8001e90:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d004      	beq.n	8001ea4 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	0010      	movs	r0, r2
 8001ea2:	4798      	blx	r3
    }
  }
  return status;
 8001ea4:	230f      	movs	r3, #15
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	fffffeff 	.word	0xfffffeff

08001eb8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	221c      	movs	r2, #28
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2204      	movs	r2, #4
 8001eda:	409a      	lsls	r2, r3
 8001edc:	0013      	movs	r3, r2
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d026      	beq.n	8001f32 <HAL_DMA_IRQHandler+0x7a>
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d022      	beq.n	8001f32 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d107      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2104      	movs	r1, #4
 8001f04:	438a      	bics	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0c:	221c      	movs	r2, #28
 8001f0e:	401a      	ands	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	2104      	movs	r1, #4
 8001f16:	4091      	lsls	r1, r2
 8001f18:	000a      	movs	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d100      	bne.n	8001f26 <HAL_DMA_IRQHandler+0x6e>
 8001f24:	e080      	b.n	8002028 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	0010      	movs	r0, r2
 8001f2e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001f30:	e07a      	b.n	8002028 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	221c      	movs	r2, #28
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	0013      	movs	r3, r2
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4013      	ands	r3, r2
 8001f44:	d03c      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x108>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d038      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2220      	movs	r2, #32
 8001f56:	4013      	ands	r3, r2
 8001f58:	d10b      	bne.n	8001f72 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	210a      	movs	r1, #10
 8001f66:	438a      	bics	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2225      	movs	r2, #37	@ 0x25
 8001f6e:	2101      	movs	r1, #1
 8001f70:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	001a      	movs	r2, r3
 8001f78:	4b2e      	ldr	r3, [pc, #184]	@ (8002034 <HAL_DMA_IRQHandler+0x17c>)
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d909      	bls.n	8001f92 <HAL_DMA_IRQHandler+0xda>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	221c      	movs	r2, #28
 8001f84:	401a      	ands	r2, r3
 8001f86:	4b2c      	ldr	r3, [pc, #176]	@ (8002038 <HAL_DMA_IRQHandler+0x180>)
 8001f88:	2102      	movs	r1, #2
 8001f8a:	4091      	lsls	r1, r2
 8001f8c:	000a      	movs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	e008      	b.n	8001fa4 <HAL_DMA_IRQHandler+0xec>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	221c      	movs	r2, #28
 8001f98:	401a      	ands	r2, r3
 8001f9a:	4b28      	ldr	r3, [pc, #160]	@ (800203c <HAL_DMA_IRQHandler+0x184>)
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4091      	lsls	r1, r2
 8001fa0:	000a      	movs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2224      	movs	r2, #36	@ 0x24
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d039      	beq.n	8002028 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	0010      	movs	r0, r2
 8001fbc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001fbe:	e033      	b.n	8002028 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc4:	221c      	movs	r2, #28
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2208      	movs	r2, #8
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	0013      	movs	r3, r2
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d02a      	beq.n	800202a <HAL_DMA_IRQHandler+0x172>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d026      	beq.n	800202a <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	210e      	movs	r1, #14
 8001fe8:	438a      	bics	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff0:	221c      	movs	r2, #28
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	4091      	lsls	r1, r2
 8001ffc:	000a      	movs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2225      	movs	r2, #37	@ 0x25
 800200a:	2101      	movs	r1, #1
 800200c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2224      	movs	r2, #36	@ 0x24
 8002012:	2100      	movs	r1, #0
 8002014:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	0010      	movs	r0, r2
 8002026:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002028:	46c0      	nop			@ (mov r8, r8)
 800202a:	46c0      	nop			@ (mov r8, r8)
}
 800202c:	46bd      	mov	sp, r7
 800202e:	b004      	add	sp, #16
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	40020080 	.word	0x40020080
 8002038:	40020400 	.word	0x40020400
 800203c:	40020000 	.word	0x40020000

08002040 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002056:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002068:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	221c      	movs	r2, #28
 8002070:	401a      	ands	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	2101      	movs	r1, #1
 8002078:	4091      	lsls	r1, r2
 800207a:	000a      	movs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b10      	cmp	r3, #16
 800208c:	d108      	bne.n	80020a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800209e:	e007      	b.n	80020b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]
}
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b004      	add	sp, #16
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	001a      	movs	r2, r3
 80020c6:	4b1d      	ldr	r3, [pc, #116]	@ (800213c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d814      	bhi.n	80020f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002140 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80020d6:	189a      	adds	r2, r3, r2
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	001a      	movs	r2, r3
 80020e2:	23ff      	movs	r3, #255	@ 0xff
 80020e4:	4013      	ands	r3, r2
 80020e6:	3b08      	subs	r3, #8
 80020e8:	2114      	movs	r1, #20
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7fe f80a 	bl	8000104 <__udivsi3>
 80020f0:	0003      	movs	r3, r0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e014      	b.n	8002120 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4a11      	ldr	r2, [pc, #68]	@ (8002144 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002100:	189a      	adds	r2, r3, r2
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	001a      	movs	r2, r3
 800210c:	23ff      	movs	r3, #255	@ 0xff
 800210e:	4013      	ands	r3, r2
 8002110:	3b08      	subs	r3, #8
 8002112:	2114      	movs	r1, #20
 8002114:	0018      	movs	r0, r3
 8002116:	f7fd fff5 	bl	8000104 <__udivsi3>
 800211a:	0003      	movs	r3, r0
 800211c:	3307      	adds	r3, #7
 800211e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002124:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	221f      	movs	r2, #31
 800212a:	4013      	ands	r3, r2
 800212c:	2201      	movs	r2, #1
 800212e:	409a      	lsls	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002134:	46c0      	nop			@ (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b004      	add	sp, #16
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40020407 	.word	0x40020407
 8002140:	40020800 	.word	0x40020800
 8002144:	4002081c 	.word	0x4002081c
 8002148:	40020880 	.word	0x40020880

0800214c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	227f      	movs	r2, #127	@ 0x7f
 800215a:	4013      	ands	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002162:	4694      	mov	ip, r2
 8002164:	4463      	add	r3, ip
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	001a      	movs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a07      	ldr	r2, [pc, #28]	@ (8002190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002172:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3b01      	subs	r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	4013      	ands	r3, r2
 800217c:	2201      	movs	r2, #1
 800217e:	409a      	lsls	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002184:	46c0      	nop			@ (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b004      	add	sp, #16
 800218a:	bd80      	pop	{r7, pc}
 800218c:	1000823f 	.word	0x1000823f
 8002190:	40020940 	.word	0x40020940

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a2:	e14d      	b.n	8002440 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4091      	lsls	r1, r2
 80021ae:	000a      	movs	r2, r1
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d100      	bne.n	80021bc <HAL_GPIO_Init+0x28>
 80021ba:	e13e      	b.n	800243a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2203      	movs	r2, #3
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d005      	beq.n	80021d4 <HAL_GPIO_Init+0x40>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2203      	movs	r2, #3
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d130      	bne.n	8002236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	409a      	lsls	r2, r3
 80021e2:	0013      	movs	r3, r2
 80021e4:	43da      	mvns	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	409a      	lsls	r2, r3
 80021f6:	0013      	movs	r3, r2
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800220a:	2201      	movs	r2, #1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
 8002210:	0013      	movs	r3, r2
 8002212:	43da      	mvns	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	2201      	movs	r2, #1
 8002222:	401a      	ands	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	409a      	lsls	r2, r3
 8002228:	0013      	movs	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2203      	movs	r2, #3
 800223c:	4013      	ands	r3, r2
 800223e:	2b03      	cmp	r3, #3
 8002240:	d017      	beq.n	8002272 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	409a      	lsls	r2, r3
 8002250:	0013      	movs	r3, r2
 8002252:	43da      	mvns	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	409a      	lsls	r2, r3
 8002264:	0013      	movs	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2203      	movs	r2, #3
 8002278:	4013      	ands	r3, r2
 800227a:	2b02      	cmp	r3, #2
 800227c:	d123      	bne.n	80022c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	0092      	lsls	r2, r2, #2
 8002288:	58d3      	ldr	r3, [r2, r3]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2207      	movs	r2, #7
 8002290:	4013      	ands	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	220f      	movs	r2, #15
 8002296:	409a      	lsls	r2, r3
 8002298:	0013      	movs	r3, r2
 800229a:	43da      	mvns	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2107      	movs	r1, #7
 80022aa:	400b      	ands	r3, r1
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	409a      	lsls	r2, r3
 80022b0:	0013      	movs	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	08da      	lsrs	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3208      	adds	r2, #8
 80022c0:	0092      	lsls	r2, r2, #2
 80022c2:	6939      	ldr	r1, [r7, #16]
 80022c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	409a      	lsls	r2, r3
 80022d4:	0013      	movs	r3, r2
 80022d6:	43da      	mvns	r2, r3
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2203      	movs	r2, #3
 80022e4:	401a      	ands	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	409a      	lsls	r2, r3
 80022ec:	0013      	movs	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	23c0      	movs	r3, #192	@ 0xc0
 8002300:	029b      	lsls	r3, r3, #10
 8002302:	4013      	ands	r3, r2
 8002304:	d100      	bne.n	8002308 <HAL_GPIO_Init+0x174>
 8002306:	e098      	b.n	800243a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002308:	4a53      	ldr	r2, [pc, #332]	@ (8002458 <HAL_GPIO_Init+0x2c4>)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3318      	adds	r3, #24
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	589b      	ldr	r3, [r3, r2]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2203      	movs	r2, #3
 800231a:	4013      	ands	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	220f      	movs	r2, #15
 8002320:	409a      	lsls	r2, r3
 8002322:	0013      	movs	r3, r2
 8002324:	43da      	mvns	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	23a0      	movs	r3, #160	@ 0xa0
 8002330:	05db      	lsls	r3, r3, #23
 8002332:	429a      	cmp	r2, r3
 8002334:	d019      	beq.n	800236a <HAL_GPIO_Init+0x1d6>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a48      	ldr	r2, [pc, #288]	@ (800245c <HAL_GPIO_Init+0x2c8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0x1d2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a47      	ldr	r2, [pc, #284]	@ (8002460 <HAL_GPIO_Init+0x2cc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_GPIO_Init+0x1ce>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a46      	ldr	r2, [pc, #280]	@ (8002464 <HAL_GPIO_Init+0x2d0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <HAL_GPIO_Init+0x1ca>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a45      	ldr	r2, [pc, #276]	@ (8002468 <HAL_GPIO_Init+0x2d4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_GPIO_Init+0x1c6>
 8002356:	2304      	movs	r3, #4
 8002358:	e008      	b.n	800236c <HAL_GPIO_Init+0x1d8>
 800235a:	2305      	movs	r3, #5
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x1d8>
 800235e:	2303      	movs	r3, #3
 8002360:	e004      	b.n	800236c <HAL_GPIO_Init+0x1d8>
 8002362:	2302      	movs	r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x1d8>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x1d8>
 800236a:	2300      	movs	r3, #0
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	2103      	movs	r1, #3
 8002370:	400a      	ands	r2, r1
 8002372:	00d2      	lsls	r2, r2, #3
 8002374:	4093      	lsls	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800237c:	4936      	ldr	r1, [pc, #216]	@ (8002458 <HAL_GPIO_Init+0x2c4>)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	089b      	lsrs	r3, r3, #2
 8002382:	3318      	adds	r3, #24
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800238a:	4b33      	ldr	r3, [pc, #204]	@ (8002458 <HAL_GPIO_Init+0x2c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43da      	mvns	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	035b      	lsls	r3, r3, #13
 80023a2:	4013      	ands	r3, r2
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002458 <HAL_GPIO_Init+0x2c4>)
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80023b4:	4b28      	ldr	r3, [pc, #160]	@ (8002458 <HAL_GPIO_Init+0x2c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43da      	mvns	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	039b      	lsls	r3, r3, #14
 80023cc:	4013      	ands	r3, r2
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <HAL_GPIO_Init+0x2c4>)
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023de:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <HAL_GPIO_Init+0x2c4>)
 80023e0:	2384      	movs	r3, #132	@ 0x84
 80023e2:	58d3      	ldr	r3, [r2, r3]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	029b      	lsls	r3, r3, #10
 80023f8:	4013      	ands	r3, r2
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002404:	4914      	ldr	r1, [pc, #80]	@ (8002458 <HAL_GPIO_Init+0x2c4>)
 8002406:	2284      	movs	r2, #132	@ 0x84
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800240c:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <HAL_GPIO_Init+0x2c4>)
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	58d3      	ldr	r3, [r2, r3]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43da      	mvns	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	2380      	movs	r3, #128	@ 0x80
 8002424:	025b      	lsls	r3, r3, #9
 8002426:	4013      	ands	r3, r2
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002432:	4909      	ldr	r1, [pc, #36]	@ (8002458 <HAL_GPIO_Init+0x2c4>)
 8002434:	2280      	movs	r2, #128	@ 0x80
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	40da      	lsrs	r2, r3
 8002448:	1e13      	subs	r3, r2, #0
 800244a:	d000      	beq.n	800244e <HAL_GPIO_Init+0x2ba>
 800244c:	e6aa      	b.n	80021a4 <HAL_GPIO_Init+0x10>
  }
}
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	46c0      	nop			@ (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b006      	add	sp, #24
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021800 	.word	0x40021800
 800245c:	50000400 	.word	0x50000400
 8002460:	50000800 	.word	0x50000800
 8002464:	50000c00 	.word	0x50000c00
 8002468:	50001000 	.word	0x50001000

0800246c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a19      	ldr	r2, [pc, #100]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	2380      	movs	r3, #128	@ 0x80
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d11f      	bne.n	80024d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002490:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	0013      	movs	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	189b      	adds	r3, r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4912      	ldr	r1, [pc, #72]	@ (80024e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800249e:	0018      	movs	r0, r3
 80024a0:	f7fd fe30 	bl	8000104 <__udivsi3>
 80024a4:	0003      	movs	r3, r0
 80024a6:	3301      	adds	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024aa:	e008      	b.n	80024be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e001      	b.n	80024be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e009      	b.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024be:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	401a      	ands	r2, r3
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d0ed      	beq.n	80024ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b004      	add	sp, #16
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	40007000 	.word	0x40007000
 80024e0:	fffff9ff 	.word	0xfffff9ff
 80024e4:	20000078 	.word	0x20000078
 80024e8:	000f4240 	.word	0x000f4240

080024ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80024f0:	4b03      	ldr	r3, [pc, #12]	@ (8002500 <LL_RCC_GetAPB1Prescaler+0x14>)
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	23e0      	movs	r3, #224	@ 0xe0
 80024f6:	01db      	lsls	r3, r3, #7
 80024f8:	4013      	ands	r3, r2
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000

08002504 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	f000 fb50 	bl	8002bb8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2201      	movs	r2, #1
 800251e:	4013      	ands	r3, r2
 8002520:	d100      	bne.n	8002524 <HAL_RCC_OscConfig+0x20>
 8002522:	e07c      	b.n	800261e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002524:	4bc3      	ldr	r3, [pc, #780]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2238      	movs	r2, #56	@ 0x38
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800252e:	4bc1      	ldr	r3, [pc, #772]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2203      	movs	r2, #3
 8002534:	4013      	ands	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b10      	cmp	r3, #16
 800253c:	d102      	bne.n	8002544 <HAL_RCC_OscConfig+0x40>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d002      	beq.n	800254a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b08      	cmp	r3, #8
 8002548:	d10b      	bne.n	8002562 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254a:	4bba      	ldr	r3, [pc, #744]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	029b      	lsls	r3, r3, #10
 8002552:	4013      	ands	r3, r2
 8002554:	d062      	beq.n	800261c <HAL_RCC_OscConfig+0x118>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d15e      	bne.n	800261c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e32a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	429a      	cmp	r2, r3
 800256c:	d107      	bne.n	800257e <HAL_RCC_OscConfig+0x7a>
 800256e:	4bb1      	ldr	r3, [pc, #708]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4bb0      	ldr	r3, [pc, #704]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002574:	2180      	movs	r1, #128	@ 0x80
 8002576:	0249      	lsls	r1, r1, #9
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e020      	b.n	80025c0 <HAL_RCC_OscConfig+0xbc>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	23a0      	movs	r3, #160	@ 0xa0
 8002584:	02db      	lsls	r3, r3, #11
 8002586:	429a      	cmp	r2, r3
 8002588:	d10e      	bne.n	80025a8 <HAL_RCC_OscConfig+0xa4>
 800258a:	4baa      	ldr	r3, [pc, #680]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4ba9      	ldr	r3, [pc, #676]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002590:	2180      	movs	r1, #128	@ 0x80
 8002592:	02c9      	lsls	r1, r1, #11
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	4ba6      	ldr	r3, [pc, #664]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4ba5      	ldr	r3, [pc, #660]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800259e:	2180      	movs	r1, #128	@ 0x80
 80025a0:	0249      	lsls	r1, r1, #9
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xbc>
 80025a8:	4ba2      	ldr	r3, [pc, #648]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4ba1      	ldr	r3, [pc, #644]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80025ae:	49a2      	ldr	r1, [pc, #648]	@ (8002838 <HAL_RCC_OscConfig+0x334>)
 80025b0:	400a      	ands	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	4b9f      	ldr	r3, [pc, #636]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b9e      	ldr	r3, [pc, #632]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80025ba:	49a0      	ldr	r1, [pc, #640]	@ (800283c <HAL_RCC_OscConfig+0x338>)
 80025bc:	400a      	ands	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d014      	beq.n	80025f2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7ff f97e 	bl	80018c8 <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d2:	f7ff f979 	bl	80018c8 <HAL_GetTick>
 80025d6:	0002      	movs	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b64      	cmp	r3, #100	@ 0x64
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e2e9      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e4:	4b93      	ldr	r3, [pc, #588]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	029b      	lsls	r3, r3, #10
 80025ec:	4013      	ands	r3, r2
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0xce>
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7ff f969 	bl	80018c8 <HAL_GetTick>
 80025f6:	0003      	movs	r3, r0
 80025f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7ff f964 	bl	80018c8 <HAL_GetTick>
 8002600:	0002      	movs	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	@ 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e2d4      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800260e:	4b89      	ldr	r3, [pc, #548]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	029b      	lsls	r3, r3, #10
 8002616:	4013      	ands	r3, r2
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0xf8>
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2202      	movs	r2, #2
 8002624:	4013      	ands	r3, r2
 8002626:	d100      	bne.n	800262a <HAL_RCC_OscConfig+0x126>
 8002628:	e099      	b.n	800275e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262a:	4b82      	ldr	r3, [pc, #520]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2238      	movs	r2, #56	@ 0x38
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002634:	4b7f      	ldr	r3, [pc, #508]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2203      	movs	r2, #3
 800263a:	4013      	ands	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b10      	cmp	r3, #16
 8002642:	d102      	bne.n	800264a <HAL_RCC_OscConfig+0x146>
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d002      	beq.n	8002650 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d135      	bne.n	80026bc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002650:	4b78      	ldr	r3, [pc, #480]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4013      	ands	r3, r2
 800265a:	d005      	beq.n	8002668 <HAL_RCC_OscConfig+0x164>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e2a7      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b72      	ldr	r3, [pc, #456]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a74      	ldr	r2, [pc, #464]	@ (8002840 <HAL_RCC_OscConfig+0x33c>)
 800266e:	4013      	ands	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	021a      	lsls	r2, r3, #8
 8002678:	4b6e      	ldr	r3, [pc, #440]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d112      	bne.n	80026aa <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002684:	4b6b      	ldr	r3, [pc, #428]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a6e      	ldr	r2, [pc, #440]	@ (8002844 <HAL_RCC_OscConfig+0x340>)
 800268a:	4013      	ands	r3, r2
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	4b68      	ldr	r3, [pc, #416]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002698:	4b66      	ldr	r3, [pc, #408]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0adb      	lsrs	r3, r3, #11
 800269e:	2207      	movs	r2, #7
 80026a0:	4013      	ands	r3, r2
 80026a2:	4a69      	ldr	r2, [pc, #420]	@ (8002848 <HAL_RCC_OscConfig+0x344>)
 80026a4:	40da      	lsrs	r2, r3
 80026a6:	4b69      	ldr	r3, [pc, #420]	@ (800284c <HAL_RCC_OscConfig+0x348>)
 80026a8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026aa:	4b69      	ldr	r3, [pc, #420]	@ (8002850 <HAL_RCC_OscConfig+0x34c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7ff f8ae 	bl	8001810 <HAL_InitTick>
 80026b4:	1e03      	subs	r3, r0, #0
 80026b6:	d051      	beq.n	800275c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e27d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d030      	beq.n	8002726 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a5e      	ldr	r2, [pc, #376]	@ (8002844 <HAL_RCC_OscConfig+0x340>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	4b58      	ldr	r3, [pc, #352]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	4b56      	ldr	r3, [pc, #344]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b55      	ldr	r3, [pc, #340]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80026de:	2180      	movs	r1, #128	@ 0x80
 80026e0:	0049      	lsls	r1, r1, #1
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7ff f8ef 	bl	80018c8 <HAL_GetTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f0:	f7ff f8ea 	bl	80018c8 <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e25a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002702:	4b4c      	ldr	r3, [pc, #304]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4013      	ands	r3, r2
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270e:	4b49      	ldr	r3, [pc, #292]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a4b      	ldr	r2, [pc, #300]	@ (8002840 <HAL_RCC_OscConfig+0x33c>)
 8002714:	4013      	ands	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	021a      	lsls	r2, r3, #8
 800271e:	4b45      	ldr	r3, [pc, #276]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002720:	430a      	orrs	r2, r1
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	e01b      	b.n	800275e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002726:	4b43      	ldr	r3, [pc, #268]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4b42      	ldr	r3, [pc, #264]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800272c:	4949      	ldr	r1, [pc, #292]	@ (8002854 <HAL_RCC_OscConfig+0x350>)
 800272e:	400a      	ands	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7ff f8c9 	bl	80018c8 <HAL_GetTick>
 8002736:	0003      	movs	r3, r0
 8002738:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273c:	f7ff f8c4 	bl	80018c8 <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e234      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800274e:	4b39      	ldr	r3, [pc, #228]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	2380      	movs	r3, #128	@ 0x80
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4013      	ands	r3, r2
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x238>
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800275c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2208      	movs	r2, #8
 8002764:	4013      	ands	r3, r2
 8002766:	d047      	beq.n	80027f8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002768:	4b32      	ldr	r3, [pc, #200]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2238      	movs	r2, #56	@ 0x38
 800276e:	4013      	ands	r3, r2
 8002770:	2b18      	cmp	r3, #24
 8002772:	d10a      	bne.n	800278a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002774:	4b2f      	ldr	r3, [pc, #188]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002778:	2202      	movs	r2, #2
 800277a:	4013      	ands	r3, r2
 800277c:	d03c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x2f4>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d138      	bne.n	80027f8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e216      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d019      	beq.n	80027c6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002792:	4b28      	ldr	r3, [pc, #160]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002794:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002796:	4b27      	ldr	r3, [pc, #156]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002798:	2101      	movs	r1, #1
 800279a:	430a      	orrs	r2, r1
 800279c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7ff f893 	bl	80018c8 <HAL_GetTick>
 80027a2:	0003      	movs	r3, r0
 80027a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a8:	f7ff f88e 	bl	80018c8 <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e1fe      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80027bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027be:	2202      	movs	r2, #2
 80027c0:	4013      	ands	r3, r2
 80027c2:	d0f1      	beq.n	80027a8 <HAL_RCC_OscConfig+0x2a4>
 80027c4:	e018      	b.n	80027f8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80027c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80027c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80027cc:	2101      	movs	r1, #1
 80027ce:	438a      	bics	r2, r1
 80027d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7ff f879 	bl	80018c8 <HAL_GetTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027dc:	f7ff f874 	bl	80018c8 <HAL_GetTick>
 80027e0:	0002      	movs	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e1e4      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027ee:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	d1f1      	bne.n	80027dc <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2204      	movs	r2, #4
 80027fe:	4013      	ands	r3, r2
 8002800:	d100      	bne.n	8002804 <HAL_RCC_OscConfig+0x300>
 8002802:	e0c7      	b.n	8002994 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002804:	231f      	movs	r3, #31
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800280c:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2238      	movs	r2, #56	@ 0x38
 8002812:	4013      	ands	r3, r2
 8002814:	2b20      	cmp	r3, #32
 8002816:	d11f      	bne.n	8002858 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002818:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800281a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281c:	2202      	movs	r2, #2
 800281e:	4013      	ands	r3, r2
 8002820:	d100      	bne.n	8002824 <HAL_RCC_OscConfig+0x320>
 8002822:	e0b7      	b.n	8002994 <HAL_RCC_OscConfig+0x490>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d000      	beq.n	800282e <HAL_RCC_OscConfig+0x32a>
 800282c:	e0b2      	b.n	8002994 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e1c2      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	40021000 	.word	0x40021000
 8002838:	fffeffff 	.word	0xfffeffff
 800283c:	fffbffff 	.word	0xfffbffff
 8002840:	ffff80ff 	.word	0xffff80ff
 8002844:	ffffc7ff 	.word	0xffffc7ff
 8002848:	00f42400 	.word	0x00f42400
 800284c:	20000078 	.word	0x20000078
 8002850:	2000007c 	.word	0x2000007c
 8002854:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002858:	4bb5      	ldr	r3, [pc, #724]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 800285a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	055b      	lsls	r3, r3, #21
 8002860:	4013      	ands	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_RCC_OscConfig+0x364>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x366>
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d011      	beq.n	8002892 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4bb0      	ldr	r3, [pc, #704]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002872:	4baf      	ldr	r3, [pc, #700]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002874:	2180      	movs	r1, #128	@ 0x80
 8002876:	0549      	lsls	r1, r1, #21
 8002878:	430a      	orrs	r2, r1
 800287a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800287c:	4bac      	ldr	r3, [pc, #688]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 800287e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002880:	2380      	movs	r3, #128	@ 0x80
 8002882:	055b      	lsls	r3, r3, #21
 8002884:	4013      	ands	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800288a:	231f      	movs	r3, #31
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002892:	4ba8      	ldr	r3, [pc, #672]	@ (8002b34 <HAL_RCC_OscConfig+0x630>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4013      	ands	r3, r2
 800289c:	d11a      	bne.n	80028d4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800289e:	4ba5      	ldr	r3, [pc, #660]	@ (8002b34 <HAL_RCC_OscConfig+0x630>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4ba4      	ldr	r3, [pc, #656]	@ (8002b34 <HAL_RCC_OscConfig+0x630>)
 80028a4:	2180      	movs	r1, #128	@ 0x80
 80028a6:	0049      	lsls	r1, r1, #1
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80028ac:	f7ff f80c 	bl	80018c8 <HAL_GetTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b6:	f7ff f807 	bl	80018c8 <HAL_GetTick>
 80028ba:	0002      	movs	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e177      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c8:	4b9a      	ldr	r3, [pc, #616]	@ (8002b34 <HAL_RCC_OscConfig+0x630>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4013      	ands	r3, r2
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x3e6>
 80028dc:	4b94      	ldr	r3, [pc, #592]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 80028de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028e0:	4b93      	ldr	r3, [pc, #588]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 80028e2:	2101      	movs	r1, #1
 80028e4:	430a      	orrs	r2, r1
 80028e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028e8:	e01c      	b.n	8002924 <HAL_RCC_OscConfig+0x420>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x408>
 80028f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 80028f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028f6:	4b8e      	ldr	r3, [pc, #568]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 80028f8:	2104      	movs	r1, #4
 80028fa:	430a      	orrs	r2, r1
 80028fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028fe:	4b8c      	ldr	r3, [pc, #560]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002900:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002902:	4b8b      	ldr	r3, [pc, #556]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002904:	2101      	movs	r1, #1
 8002906:	430a      	orrs	r2, r1
 8002908:	65da      	str	r2, [r3, #92]	@ 0x5c
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0x420>
 800290c:	4b88      	ldr	r3, [pc, #544]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 800290e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002910:	4b87      	ldr	r3, [pc, #540]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002912:	2101      	movs	r1, #1
 8002914:	438a      	bics	r2, r1
 8002916:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002918:	4b85      	ldr	r3, [pc, #532]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 800291a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800291c:	4b84      	ldr	r3, [pc, #528]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 800291e:	2104      	movs	r1, #4
 8002920:	438a      	bics	r2, r1
 8002922:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d014      	beq.n	8002956 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe ffcc 	bl	80018c8 <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002934:	e009      	b.n	800294a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe ffc7 	bl	80018c8 <HAL_GetTick>
 800293a:	0002      	movs	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	4a7d      	ldr	r2, [pc, #500]	@ (8002b38 <HAL_RCC_OscConfig+0x634>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e136      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294a:	4b79      	ldr	r3, [pc, #484]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 800294c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294e:	2202      	movs	r2, #2
 8002950:	4013      	ands	r3, r2
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x432>
 8002954:	e013      	b.n	800297e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7fe ffb7 	bl	80018c8 <HAL_GetTick>
 800295a:	0003      	movs	r3, r0
 800295c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800295e:	e009      	b.n	8002974 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7fe ffb2 	bl	80018c8 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	4a73      	ldr	r2, [pc, #460]	@ (8002b38 <HAL_RCC_OscConfig+0x634>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e121      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002974:	4b6e      	ldr	r3, [pc, #440]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002978:	2202      	movs	r2, #2
 800297a:	4013      	ands	r3, r2
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800297e:	231f      	movs	r3, #31
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002988:	4b69      	ldr	r3, [pc, #420]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 800298a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800298c:	4b68      	ldr	r3, [pc, #416]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 800298e:	496b      	ldr	r1, [pc, #428]	@ (8002b3c <HAL_RCC_OscConfig+0x638>)
 8002990:	400a      	ands	r2, r1
 8002992:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2220      	movs	r2, #32
 800299a:	4013      	ands	r3, r2
 800299c:	d039      	beq.n	8002a12 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01b      	beq.n	80029de <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029a6:	4b62      	ldr	r3, [pc, #392]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b61      	ldr	r3, [pc, #388]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 80029ac:	2180      	movs	r1, #128	@ 0x80
 80029ae:	03c9      	lsls	r1, r1, #15
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe ff88 	bl	80018c8 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029be:	f7fe ff83 	bl	80018c8 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0f3      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029d0:	4b57      	ldr	r3, [pc, #348]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	4013      	ands	r3, r2
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x4ba>
 80029dc:	e019      	b.n	8002a12 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029de:	4b54      	ldr	r3, [pc, #336]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 80029e4:	4956      	ldr	r1, [pc, #344]	@ (8002b40 <HAL_RCC_OscConfig+0x63c>)
 80029e6:	400a      	ands	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7fe ff6d 	bl	80018c8 <HAL_GetTick>
 80029ee:	0003      	movs	r3, r0
 80029f0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029f4:	f7fe ff68 	bl	80018c8 <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0d8      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a06:	4b4a      	ldr	r3, [pc, #296]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d100      	bne.n	8002a1c <HAL_RCC_OscConfig+0x518>
 8002a1a:	e0cc      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a1c:	4b44      	ldr	r3, [pc, #272]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2238      	movs	r2, #56	@ 0x38
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d100      	bne.n	8002a2a <HAL_RCC_OscConfig+0x526>
 8002a28:	e07b      	b.n	8002b22 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d156      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b3f      	ldr	r3, [pc, #252]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b3e      	ldr	r3, [pc, #248]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002a38:	4942      	ldr	r1, [pc, #264]	@ (8002b44 <HAL_RCC_OscConfig+0x640>)
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe ff43 	bl	80018c8 <HAL_GetTick>
 8002a42:	0003      	movs	r3, r0
 8002a44:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe ff3e 	bl	80018c8 <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0ae      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5a:	4b35      	ldr	r3, [pc, #212]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	049b      	lsls	r3, r3, #18
 8002a62:	4013      	ands	r3, r2
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a66:	4b32      	ldr	r3, [pc, #200]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4a37      	ldr	r2, [pc, #220]	@ (8002b48 <HAL_RCC_OscConfig+0x644>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a92:	431a      	orrs	r2, r3
 8002a94:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a9a:	4b25      	ldr	r3, [pc, #148]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b24      	ldr	r3, [pc, #144]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002aa0:	2180      	movs	r1, #128	@ 0x80
 8002aa2:	0449      	lsls	r1, r1, #17
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002aa8:	4b21      	ldr	r3, [pc, #132]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002aae:	2180      	movs	r1, #128	@ 0x80
 8002ab0:	0549      	lsls	r1, r1, #21
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7fe ff07 	bl	80018c8 <HAL_GetTick>
 8002aba:	0003      	movs	r3, r0
 8002abc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe ff02 	bl	80018c8 <HAL_GetTick>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e072      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad2:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	@ 0x80
 8002ad8:	049b      	lsls	r3, r3, #18
 8002ada:	4013      	ands	r3, r2
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x5bc>
 8002ade:	e06a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002ae6:	4917      	ldr	r1, [pc, #92]	@ (8002b44 <HAL_RCC_OscConfig+0x640>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe feec 	bl	80018c8 <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fe fee7 	bl	80018c8 <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e057      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b08:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	049b      	lsls	r3, r3, #18
 8002b10:	4013      	ands	r3, r2
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002b1a:	490c      	ldr	r1, [pc, #48]	@ (8002b4c <HAL_RCC_OscConfig+0x648>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	e049      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d112      	bne.n	8002b50 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e044      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40007000 	.word	0x40007000
 8002b38:	00001388 	.word	0x00001388
 8002b3c:	efffffff 	.word	0xefffffff
 8002b40:	ffbfffff 	.word	0xffbfffff
 8002b44:	feffffff 	.word	0xfeffffff
 8002b48:	11c1808c 	.word	0x11c1808c
 8002b4c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <HAL_RCC_OscConfig+0x6bc>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d126      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2270      	movs	r2, #112	@ 0x70
 8002b68:	401a      	ands	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d11f      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	23fe      	movs	r3, #254	@ 0xfe
 8002b76:	01db      	lsls	r3, r3, #7
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d116      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	23f8      	movs	r3, #248	@ 0xf8
 8002b88:	039b      	lsls	r3, r3, #14
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d10e      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	23e0      	movs	r3, #224	@ 0xe0
 8002b98:	051b      	lsls	r3, r3, #20
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	0f5b      	lsrs	r3, r3, #29
 8002ba8:	075a      	lsls	r2, r3, #29
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b008      	add	sp, #32
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0e9      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b76      	ldr	r3, [pc, #472]	@ (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2207      	movs	r2, #7
 8002bde:	4013      	ands	r3, r2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d91e      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b73      	ldr	r3, [pc, #460]	@ (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2207      	movs	r2, #7
 8002bec:	4393      	bics	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	4b70      	ldr	r3, [pc, #448]	@ (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fe66 	bl	80018c8 <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c00:	e009      	b.n	8002c16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c02:	f7fe fe61 	bl	80018c8 <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	4a6a      	ldr	r2, [pc, #424]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e0ca      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c16:	4b67      	ldr	r3, [pc, #412]	@ (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2207      	movs	r2, #7
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1ee      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d015      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2204      	movs	r2, #4
 8002c34:	4013      	ands	r3, r2
 8002c36:	d006      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c38:	4b60      	ldr	r3, [pc, #384]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	4b5f      	ldr	r3, [pc, #380]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c3e:	21e0      	movs	r1, #224	@ 0xe0
 8002c40:	01c9      	lsls	r1, r1, #7
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c46:	4b5d      	ldr	r3, [pc, #372]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4a5d      	ldr	r2, [pc, #372]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	4b59      	ldr	r3, [pc, #356]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	d057      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6c:	4b53      	ldr	r3, [pc, #332]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	@ 0x80
 8002c72:	029b      	lsls	r3, r3, #10
 8002c74:	4013      	ands	r3, r2
 8002c76:	d12b      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e097      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c84:	4b4d      	ldr	r3, [pc, #308]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	@ 0x80
 8002c8a:	049b      	lsls	r3, r3, #18
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d11f      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e08b      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c9c:	4b47      	ldr	r3, [pc, #284]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	@ 0x80
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d113      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e07f      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb4:	4b41      	ldr	r3, [pc, #260]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb8:	2202      	movs	r2, #2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d108      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e074      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e06d      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	4b37      	ldr	r3, [pc, #220]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce4:	f7fe fdf0 	bl	80018c8 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cec:	e009      	b.n	8002d02 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cee:	f7fe fdeb 	bl	80018c8 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e054      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b2e      	ldr	r3, [pc, #184]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2238      	movs	r2, #56	@ 0x38
 8002d08:	401a      	ands	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1ec      	bne.n	8002cee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d14:	4b27      	ldr	r3, [pc, #156]	@ (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2207      	movs	r2, #7
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d21e      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b24      	ldr	r3, [pc, #144]	@ (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2207      	movs	r2, #7
 8002d28:	4393      	bics	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fdc8 	bl	80018c8 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d3c:	e009      	b.n	8002d52 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3e:	f7fe fdc3 	bl	80018c8 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	4a1b      	ldr	r2, [pc, #108]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e02c      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d52:	4b18      	ldr	r3, [pc, #96]	@ (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2207      	movs	r2, #7
 8002d58:	4013      	ands	r3, r2
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1ee      	bne.n	8002d3e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2204      	movs	r2, #4
 8002d66:	4013      	ands	r3, r2
 8002d68:	d009      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6a:	4b14      	ldr	r3, [pc, #80]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4a15      	ldr	r2, [pc, #84]	@ (8002dc4 <HAL_RCC_ClockConfig+0x200>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	0019      	movs	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	4b10      	ldr	r3, [pc, #64]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d7e:	f000 f829 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d82:	0001      	movs	r1, r0
 8002d84:	4b0d      	ldr	r3, [pc, #52]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_RCC_ClockConfig+0x204>)
 8002d90:	0092      	lsls	r2, r2, #2
 8002d92:	58d3      	ldr	r3, [r2, r3]
 8002d94:	221f      	movs	r2, #31
 8002d96:	4013      	ands	r3, r2
 8002d98:	000a      	movs	r2, r1
 8002d9a:	40da      	lsrs	r2, r3
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <HAL_RCC_ClockConfig+0x208>)
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002da0:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <HAL_RCC_ClockConfig+0x20c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f7fe fd33 	bl	8001810 <HAL_InitTick>
 8002daa:	0003      	movs	r3, r0
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b004      	add	sp, #16
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40022000 	.word	0x40022000
 8002db8:	00001388 	.word	0x00001388
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	fffff0ff 	.word	0xfffff0ff
 8002dc4:	ffff8fff 	.word	0xffff8fff
 8002dc8:	08004fa0 	.word	0x08004fa0
 8002dcc:	20000078 	.word	0x20000078
 8002dd0:	2000007c 	.word	0x2000007c

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dda:	4b3c      	ldr	r3, [pc, #240]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2238      	movs	r2, #56	@ 0x38
 8002de0:	4013      	ands	r3, r2
 8002de2:	d10f      	bne.n	8002e04 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002de4:	4b39      	ldr	r3, [pc, #228]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0adb      	lsrs	r3, r3, #11
 8002dea:	2207      	movs	r2, #7
 8002dec:	4013      	ands	r3, r2
 8002dee:	2201      	movs	r2, #1
 8002df0:	409a      	lsls	r2, r3
 8002df2:	0013      	movs	r3, r2
 8002df4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002df6:	6839      	ldr	r1, [r7, #0]
 8002df8:	4835      	ldr	r0, [pc, #212]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002dfa:	f7fd f983 	bl	8000104 <__udivsi3>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e05d      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e04:	4b31      	ldr	r3, [pc, #196]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2238      	movs	r2, #56	@ 0x38
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d102      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e10:	4b30      	ldr	r3, [pc, #192]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	e054      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e16:	4b2d      	ldr	r3, [pc, #180]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2238      	movs	r2, #56	@ 0x38
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d138      	bne.n	8002e94 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e22:	4b2a      	ldr	r3, [pc, #168]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2203      	movs	r2, #3
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e2c:	4b27      	ldr	r3, [pc, #156]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	2207      	movs	r2, #7
 8002e34:	4013      	ands	r3, r2
 8002e36:	3301      	adds	r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d10d      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	4824      	ldr	r0, [pc, #144]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e44:	f7fd f95e 	bl	8000104 <__udivsi3>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	227f      	movs	r2, #127	@ 0x7f
 8002e54:	4013      	ands	r3, r2
 8002e56:	434b      	muls	r3, r1
 8002e58:	617b      	str	r3, [r7, #20]
        break;
 8002e5a:	e00d      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	481c      	ldr	r0, [pc, #112]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e60:	f7fd f950 	bl	8000104 <__udivsi3>
 8002e64:	0003      	movs	r3, r0
 8002e66:	0019      	movs	r1, r3
 8002e68:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	227f      	movs	r2, #127	@ 0x7f
 8002e70:	4013      	ands	r3, r2
 8002e72:	434b      	muls	r3, r1
 8002e74:	617b      	str	r3, [r7, #20]
        break;
 8002e76:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e78:	4b14      	ldr	r3, [pc, #80]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0f5b      	lsrs	r3, r3, #29
 8002e7e:	2207      	movs	r2, #7
 8002e80:	4013      	ands	r3, r2
 8002e82:	3301      	adds	r3, #1
 8002e84:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	6978      	ldr	r0, [r7, #20]
 8002e8a:	f7fd f93b 	bl	8000104 <__udivsi3>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	e015      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e94:	4b0d      	ldr	r3, [pc, #52]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2238      	movs	r2, #56	@ 0x38
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d103      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ea0:	2380      	movs	r3, #128	@ 0x80
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ea8:	4b08      	ldr	r3, [pc, #32]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2238      	movs	r2, #56	@ 0x38
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b18      	cmp	r3, #24
 8002eb2:	d103      	bne.n	8002ebc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002eb4:	23fa      	movs	r3, #250	@ 0xfa
 8002eb6:	01db      	lsls	r3, r3, #7
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	e001      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ec0:	693b      	ldr	r3, [r7, #16]
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b006      	add	sp, #24
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	00f42400 	.word	0x00f42400
 8002ed4:	007a1200 	.word	0x007a1200

08002ed8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002edc:	4b02      	ldr	r3, [pc, #8]	@ (8002ee8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	20000078 	.word	0x20000078

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b5b0      	push	{r4, r5, r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ef0:	f7ff fff2 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002ef4:	0004      	movs	r4, r0
 8002ef6:	f7ff faf9 	bl	80024ec <LL_RCC_GetAPB1Prescaler>
 8002efa:	0003      	movs	r3, r0
 8002efc:	0b1a      	lsrs	r2, r3, #12
 8002efe:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f00:	0092      	lsls	r2, r2, #2
 8002f02:	58d3      	ldr	r3, [r2, r3]
 8002f04:	221f      	movs	r2, #31
 8002f06:	4013      	ands	r3, r2
 8002f08:	40dc      	lsrs	r4, r3
 8002f0a:	0023      	movs	r3, r4
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bdb0      	pop	{r4, r5, r7, pc}
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	08004fe0 	.word	0x08004fe0

08002f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f20:	2313      	movs	r3, #19
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f28:	2312      	movs	r3, #18
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	2380      	movs	r3, #128	@ 0x80
 8002f36:	029b      	lsls	r3, r3, #10
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f3c:	e0ad      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3e:	2011      	movs	r0, #17
 8002f40:	183b      	adds	r3, r7, r0
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f46:	4b47      	ldr	r3, [pc, #284]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	055b      	lsls	r3, r3, #21
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d110      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	4b44      	ldr	r3, [pc, #272]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f56:	4b43      	ldr	r3, [pc, #268]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f58:	2180      	movs	r1, #128	@ 0x80
 8002f5a:	0549      	lsls	r1, r1, #21
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f60:	4b40      	ldr	r3, [pc, #256]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f64:	2380      	movs	r3, #128	@ 0x80
 8002f66:	055b      	lsls	r3, r3, #21
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6e:	183b      	adds	r3, r7, r0
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f74:	4b3c      	ldr	r3, [pc, #240]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b3b      	ldr	r3, [pc, #236]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f7a:	2180      	movs	r1, #128	@ 0x80
 8002f7c:	0049      	lsls	r1, r1, #1
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f82:	f7fe fca1 	bl	80018c8 <HAL_GetTick>
 8002f86:	0003      	movs	r3, r0
 8002f88:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8c:	f7fe fc9c 	bl	80018c8 <HAL_GetTick>
 8002f90:	0002      	movs	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d904      	bls.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002f9a:	2313      	movs	r3, #19
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	701a      	strb	r2, [r3, #0]
        break;
 8002fa2:	e005      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fa4:	4b30      	ldr	r3, [pc, #192]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2380      	movs	r3, #128	@ 0x80
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4013      	ands	r3, r2
 8002fae:	d0ed      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002fb0:	2313      	movs	r3, #19
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d15e      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fba:	4b2a      	ldr	r3, [pc, #168]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fbe:	23c0      	movs	r3, #192	@ 0xc0
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d019      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d014      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fd6:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	4a24      	ldr	r2, [pc, #144]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fe0:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fe2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fe6:	2180      	movs	r1, #128	@ 0x80
 8002fe8:	0249      	lsls	r1, r1, #9
 8002fea:	430a      	orrs	r2, r1
 8002fec:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fee:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ff0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ff4:	491e      	ldr	r1, [pc, #120]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2201      	movs	r2, #1
 8003004:	4013      	ands	r3, r2
 8003006:	d016      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fc5e 	bl	80018c8 <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003010:	e00c      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7fe fc59 	bl	80018c8 <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	4a15      	ldr	r2, [pc, #84]	@ (8003074 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d904      	bls.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003022:	2313      	movs	r3, #19
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	2203      	movs	r2, #3
 8003028:	701a      	strb	r2, [r3, #0]
            break;
 800302a:	e004      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302c:	4b0d      	ldr	r3, [pc, #52]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800302e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003030:	2202      	movs	r2, #2
 8003032:	4013      	ands	r3, r2
 8003034:	d0ed      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003036:	2313      	movs	r3, #19
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003040:	4b08      	ldr	r3, [pc, #32]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003044:	4a09      	ldr	r2, [pc, #36]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003046:	4013      	ands	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800304e:	4b05      	ldr	r3, [pc, #20]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003050:	430a      	orrs	r2, r1
 8003052:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003054:	e016      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003056:	2312      	movs	r3, #18
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	2213      	movs	r2, #19
 800305c:	18ba      	adds	r2, r7, r2
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e00f      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003064:	40021000 	.word	0x40021000
 8003068:	40007000 	.word	0x40007000
 800306c:	fffffcff 	.word	0xfffffcff
 8003070:	fffeffff 	.word	0xfffeffff
 8003074:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	2312      	movs	r3, #18
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2213      	movs	r2, #19
 800307e:	18ba      	adds	r2, r7, r2
 8003080:	7812      	ldrb	r2, [r2, #0]
 8003082:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003084:	2311      	movs	r3, #17
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4bb6      	ldr	r3, [pc, #728]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003092:	4bb5      	ldr	r3, [pc, #724]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003094:	49b5      	ldr	r1, [pc, #724]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003096:	400a      	ands	r2, r1
 8003098:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2201      	movs	r2, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	d009      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030a4:	4bb0      	ldr	r3, [pc, #704]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a8:	2203      	movs	r2, #3
 80030aa:	4393      	bics	r3, r2
 80030ac:	0019      	movs	r1, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	4bad      	ldr	r3, [pc, #692]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030b4:	430a      	orrs	r2, r1
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2202      	movs	r2, #2
 80030be:	4013      	ands	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030c2:	4ba9      	ldr	r3, [pc, #676]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	220c      	movs	r2, #12
 80030c8:	4393      	bics	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	4ba5      	ldr	r3, [pc, #660]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030d2:	430a      	orrs	r2, r1
 80030d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2204      	movs	r2, #4
 80030dc:	4013      	ands	r3, r2
 80030de:	d009      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030e0:	4ba1      	ldr	r3, [pc, #644]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e4:	2230      	movs	r2, #48	@ 0x30
 80030e6:	4393      	bics	r3, r2
 80030e8:	0019      	movs	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	4b9e      	ldr	r3, [pc, #632]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030f0:	430a      	orrs	r2, r1
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2210      	movs	r2, #16
 80030fa:	4013      	ands	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030fe:	4b9a      	ldr	r3, [pc, #616]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003102:	4a9b      	ldr	r2, [pc, #620]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003104:	4013      	ands	r3, r2
 8003106:	0019      	movs	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	4b96      	ldr	r3, [pc, #600]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800310e:	430a      	orrs	r2, r1
 8003110:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	015b      	lsls	r3, r3, #5
 800311a:	4013      	ands	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800311e:	4b92      	ldr	r3, [pc, #584]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003122:	4a94      	ldr	r2, [pc, #592]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003124:	4013      	ands	r3, r2
 8003126:	0019      	movs	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	4b8e      	ldr	r3, [pc, #568]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800312e:	430a      	orrs	r2, r1
 8003130:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4013      	ands	r3, r2
 800313c:	d009      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800313e:	4b8a      	ldr	r3, [pc, #552]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003142:	4a8d      	ldr	r2, [pc, #564]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003144:	4013      	ands	r3, r2
 8003146:	0019      	movs	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800314c:	4b86      	ldr	r3, [pc, #536]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800314e:	430a      	orrs	r2, r1
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	2380      	movs	r3, #128	@ 0x80
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4013      	ands	r3, r2
 800315c:	d009      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800315e:	4b82      	ldr	r3, [pc, #520]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003162:	4a86      	ldr	r2, [pc, #536]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003164:	4013      	ands	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800316c:	4b7e      	ldr	r3, [pc, #504]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800316e:	430a      	orrs	r2, r1
 8003170:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2220      	movs	r2, #32
 8003178:	4013      	ands	r3, r2
 800317a:	d009      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800317c:	4b7a      	ldr	r3, [pc, #488]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800317e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003180:	4a7f      	ldr	r2, [pc, #508]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003182:	4013      	ands	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	4b77      	ldr	r3, [pc, #476]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800318c:	430a      	orrs	r2, r1
 800318e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2240      	movs	r2, #64	@ 0x40
 8003196:	4013      	ands	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800319a:	4b73      	ldr	r3, [pc, #460]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800319c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319e:	4a79      	ldr	r2, [pc, #484]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031aa:	430a      	orrs	r2, r1
 80031ac:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	2380      	movs	r3, #128	@ 0x80
 80031b4:	01db      	lsls	r3, r3, #7
 80031b6:	4013      	ands	r3, r2
 80031b8:	d015      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ba:	4b6b      	ldr	r3, [pc, #428]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	0899      	lsrs	r1, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031c6:	4b68      	ldr	r3, [pc, #416]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031c8:	430a      	orrs	r2, r1
 80031ca:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031d0:	2380      	movs	r3, #128	@ 0x80
 80031d2:	05db      	lsls	r3, r3, #23
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d106      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031d8:	4b63      	ldr	r3, [pc, #396]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	4b62      	ldr	r3, [pc, #392]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031de:	2180      	movs	r1, #128	@ 0x80
 80031e0:	0249      	lsls	r1, r1, #9
 80031e2:	430a      	orrs	r2, r1
 80031e4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	2380      	movs	r3, #128	@ 0x80
 80031ec:	031b      	lsls	r3, r3, #12
 80031ee:	4013      	ands	r3, r2
 80031f0:	d009      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	2240      	movs	r2, #64	@ 0x40
 80031f8:	4393      	bics	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003200:	4b59      	ldr	r3, [pc, #356]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003202:	430a      	orrs	r2, r1
 8003204:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	2380      	movs	r3, #128	@ 0x80
 800320c:	039b      	lsls	r3, r3, #14
 800320e:	4013      	ands	r3, r2
 8003210:	d016      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003212:	4b55      	ldr	r3, [pc, #340]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003216:	4a5c      	ldr	r2, [pc, #368]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003218:	4013      	ands	r3, r2
 800321a:	0019      	movs	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003220:	4b51      	ldr	r3, [pc, #324]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003222:	430a      	orrs	r2, r1
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	03db      	lsls	r3, r3, #15
 800322e:	429a      	cmp	r2, r3
 8003230:	d106      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003232:	4b4d      	ldr	r3, [pc, #308]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	4b4c      	ldr	r3, [pc, #304]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003238:	2180      	movs	r1, #128	@ 0x80
 800323a:	0449      	lsls	r1, r1, #17
 800323c:	430a      	orrs	r2, r1
 800323e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	2380      	movs	r3, #128	@ 0x80
 8003246:	03db      	lsls	r3, r3, #15
 8003248:	4013      	ands	r3, r2
 800324a:	d016      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800324c:	4b46      	ldr	r3, [pc, #280]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800324e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003250:	4a4e      	ldr	r2, [pc, #312]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003252:	4013      	ands	r3, r2
 8003254:	0019      	movs	r1, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800325a:	4b43      	ldr	r3, [pc, #268]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800325c:	430a      	orrs	r2, r1
 800325e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003264:	2380      	movs	r3, #128	@ 0x80
 8003266:	045b      	lsls	r3, r3, #17
 8003268:	429a      	cmp	r2, r3
 800326a:	d106      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800326c:	4b3e      	ldr	r3, [pc, #248]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	4b3d      	ldr	r3, [pc, #244]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003272:	2180      	movs	r1, #128	@ 0x80
 8003274:	0449      	lsls	r1, r1, #17
 8003276:	430a      	orrs	r2, r1
 8003278:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	2380      	movs	r3, #128	@ 0x80
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4013      	ands	r3, r2
 8003284:	d014      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003286:	4b38      	ldr	r3, [pc, #224]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	2203      	movs	r2, #3
 800328c:	4393      	bics	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	4b34      	ldr	r3, [pc, #208]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003296:	430a      	orrs	r2, r1
 8003298:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d106      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032a2:	4b31      	ldr	r3, [pc, #196]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	4b30      	ldr	r3, [pc, #192]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032a8:	2180      	movs	r1, #128	@ 0x80
 80032aa:	0249      	lsls	r1, r1, #9
 80032ac:	430a      	orrs	r2, r1
 80032ae:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	2380      	movs	r3, #128	@ 0x80
 80032b6:	019b      	lsls	r3, r3, #6
 80032b8:	4013      	ands	r3, r2
 80032ba:	d014      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80032bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c0:	220c      	movs	r2, #12
 80032c2:	4393      	bics	r3, r2
 80032c4:	0019      	movs	r1, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ca:	4b27      	ldr	r3, [pc, #156]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032cc:	430a      	orrs	r2, r1
 80032ce:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d106      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032d8:	4b23      	ldr	r3, [pc, #140]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032de:	2180      	movs	r1, #128	@ 0x80
 80032e0:	0249      	lsls	r1, r1, #9
 80032e2:	430a      	orrs	r2, r1
 80032e4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	045b      	lsls	r3, r3, #17
 80032ee:	4013      	ands	r3, r2
 80032f0:	d016      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f6:	4a22      	ldr	r2, [pc, #136]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003302:	430a      	orrs	r2, r1
 8003304:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800330a:	2380      	movs	r3, #128	@ 0x80
 800330c:	019b      	lsls	r3, r3, #6
 800330e:	429a      	cmp	r2, r3
 8003310:	d106      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003312:	4b15      	ldr	r3, [pc, #84]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	4b14      	ldr	r3, [pc, #80]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003318:	2180      	movs	r1, #128	@ 0x80
 800331a:	0449      	lsls	r1, r1, #17
 800331c:	430a      	orrs	r2, r1
 800331e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	2380      	movs	r3, #128	@ 0x80
 8003326:	049b      	lsls	r3, r3, #18
 8003328:	4013      	ands	r3, r2
 800332a:	d016      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800332c:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003330:	4a10      	ldr	r2, [pc, #64]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003332:	4013      	ands	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800333a:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800333c:	430a      	orrs	r2, r1
 800333e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003344:	2380      	movs	r3, #128	@ 0x80
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	429a      	cmp	r2, r3
 800334a:	d106      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800334c:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003352:	2180      	movs	r1, #128	@ 0x80
 8003354:	0449      	lsls	r1, r1, #17
 8003356:	430a      	orrs	r2, r1
 8003358:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800335a:	2312      	movs	r3, #18
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	781b      	ldrb	r3, [r3, #0]
}
 8003360:	0018      	movs	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	b006      	add	sp, #24
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	efffffff 	.word	0xefffffff
 8003370:	fffff3ff 	.word	0xfffff3ff
 8003374:	fffffcff 	.word	0xfffffcff
 8003378:	fff3ffff 	.word	0xfff3ffff
 800337c:	ffcfffff 	.word	0xffcfffff
 8003380:	ffffcfff 	.word	0xffffcfff
 8003384:	ffff3fff 	.word	0xffff3fff
 8003388:	ffbfffff 	.word	0xffbfffff
 800338c:	feffffff 	.word	0xfeffffff

08003390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e046      	b.n	8003430 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2288      	movs	r2, #136	@ 0x88
 80033a6:	589b      	ldr	r3, [r3, r2]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2284      	movs	r2, #132	@ 0x84
 80033b0:	2100      	movs	r1, #0
 80033b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7fd fd7a 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2288      	movs	r2, #136	@ 0x88
 80033c0:	2124      	movs	r1, #36	@ 0x24
 80033c2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	438a      	bics	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	0018      	movs	r0, r3
 80033e0:	f000 ff4a 	bl	8004278 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 fbf0 	bl	8003bcc <UART_SetConfig>
 80033ec:	0003      	movs	r3, r0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e01c      	b.n	8003430 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	490d      	ldr	r1, [pc, #52]	@ (8003438 <HAL_UART_Init+0xa8>)
 8003402:	400a      	ands	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	212a      	movs	r1, #42	@ 0x2a
 8003412:	438a      	bics	r2, r1
 8003414:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 ffd9 	bl	80043e0 <UART_CheckIdleState>
 800342e:	0003      	movs	r3, r0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	ffffb7ff 	.word	0xffffb7ff

0800343c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	1dbb      	adds	r3, r7, #6
 8003448:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2288      	movs	r2, #136	@ 0x88
 800344e:	589b      	ldr	r3, [r3, r2]
 8003450:	2b20      	cmp	r3, #32
 8003452:	d000      	beq.n	8003456 <HAL_UART_Transmit_DMA+0x1a>
 8003454:	e079      	b.n	800354a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_UART_Transmit_DMA+0x28>
 800345c:	1dbb      	adds	r3, r7, #6
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e071      	b.n	800354c <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	2380      	movs	r3, #128	@ 0x80
 800346e:	015b      	lsls	r3, r3, #5
 8003470:	429a      	cmp	r2, r3
 8003472:	d109      	bne.n	8003488 <HAL_UART_Transmit_DMA+0x4c>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2201      	movs	r2, #1
 8003480:	4013      	ands	r3, r2
 8003482:	d001      	beq.n	8003488 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e061      	b.n	800354c <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1dba      	adds	r2, r7, #6
 8003492:	2154      	movs	r1, #84	@ 0x54
 8003494:	8812      	ldrh	r2, [r2, #0]
 8003496:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1dba      	adds	r2, r7, #6
 800349c:	2156      	movs	r1, #86	@ 0x56
 800349e:	8812      	ldrh	r2, [r2, #0]
 80034a0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2290      	movs	r2, #144	@ 0x90
 80034a6:	2100      	movs	r1, #0
 80034a8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2288      	movs	r2, #136	@ 0x88
 80034ae:	2121      	movs	r1, #33	@ 0x21
 80034b0:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d028      	beq.n	800350c <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034be:	4a25      	ldr	r2, [pc, #148]	@ (8003554 <HAL_UART_Transmit_DMA+0x118>)
 80034c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034c6:	4a24      	ldr	r2, [pc, #144]	@ (8003558 <HAL_UART_Transmit_DMA+0x11c>)
 80034c8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ce:	4a23      	ldr	r2, [pc, #140]	@ (800355c <HAL_UART_Transmit_DMA+0x120>)
 80034d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034d6:	2200      	movs	r2, #0
 80034d8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e2:	0019      	movs	r1, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3328      	adds	r3, #40	@ 0x28
 80034ea:	001a      	movs	r2, r3
 80034ec:	1dbb      	adds	r3, r7, #6
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	f7fe fb94 	bl	8001c1c <HAL_DMA_Start_IT>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d009      	beq.n	800350c <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2290      	movs	r2, #144	@ 0x90
 80034fc:	2110      	movs	r1, #16
 80034fe:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2288      	movs	r2, #136	@ 0x88
 8003504:	2120      	movs	r1, #32
 8003506:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e01f      	b.n	800354c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2240      	movs	r2, #64	@ 0x40
 8003512:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003514:	f3ef 8310 	mrs	r3, PRIMASK
 8003518:	613b      	str	r3, [r7, #16]
  return(result);
 800351a:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	2301      	movs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f383 8810 	msr	PRIMASK, r3
}
 8003528:	46c0      	nop			@ (mov r8, r8)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2180      	movs	r1, #128	@ 0x80
 8003536:	430a      	orrs	r2, r1
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e000      	b.n	800354c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800354a:	2302      	movs	r3, #2
  }
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b008      	add	sp, #32
 8003552:	bd80      	pop	{r7, pc}
 8003554:	080048ad 	.word	0x080048ad
 8003558:	08004945 	.word	0x08004945
 800355c:	08004ad7 	.word	0x08004ad7

08003560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	b0aa      	sub	sp, #168	@ 0xa8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	22a4      	movs	r2, #164	@ 0xa4
 8003570:	18b9      	adds	r1, r7, r2
 8003572:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	20a0      	movs	r0, #160	@ 0xa0
 800357c:	1839      	adds	r1, r7, r0
 800357e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	249c      	movs	r4, #156	@ 0x9c
 8003588:	1939      	adds	r1, r7, r4
 800358a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800358c:	0011      	movs	r1, r2
 800358e:	18bb      	adds	r3, r7, r2
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4aa2      	ldr	r2, [pc, #648]	@ (800381c <HAL_UART_IRQHandler+0x2bc>)
 8003594:	4013      	ands	r3, r2
 8003596:	2298      	movs	r2, #152	@ 0x98
 8003598:	18bd      	adds	r5, r7, r2
 800359a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800359c:	18bb      	adds	r3, r7, r2
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d11a      	bne.n	80035da <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2220      	movs	r2, #32
 80035aa:	4013      	ands	r3, r2
 80035ac:	d015      	beq.n	80035da <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2220      	movs	r2, #32
 80035b4:	4013      	ands	r3, r2
 80035b6:	d105      	bne.n	80035c4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	2380      	movs	r3, #128	@ 0x80
 80035be:	055b      	lsls	r3, r3, #21
 80035c0:	4013      	ands	r3, r2
 80035c2:	d00a      	beq.n	80035da <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d100      	bne.n	80035ce <HAL_UART_IRQHandler+0x6e>
 80035cc:	e2dc      	b.n	8003b88 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	0010      	movs	r0, r2
 80035d6:	4798      	blx	r3
      }
      return;
 80035d8:	e2d6      	b.n	8003b88 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035da:	2398      	movs	r3, #152	@ 0x98
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d100      	bne.n	80035e6 <HAL_UART_IRQHandler+0x86>
 80035e4:	e122      	b.n	800382c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80035e6:	239c      	movs	r3, #156	@ 0x9c
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a8c      	ldr	r2, [pc, #560]	@ (8003820 <HAL_UART_IRQHandler+0x2c0>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	d106      	bne.n	8003600 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80035f2:	23a0      	movs	r3, #160	@ 0xa0
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a8a      	ldr	r2, [pc, #552]	@ (8003824 <HAL_UART_IRQHandler+0x2c4>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	d100      	bne.n	8003600 <HAL_UART_IRQHandler+0xa0>
 80035fe:	e115      	b.n	800382c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003600:	23a4      	movs	r3, #164	@ 0xa4
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2201      	movs	r2, #1
 8003608:	4013      	ands	r3, r2
 800360a:	d012      	beq.n	8003632 <HAL_UART_IRQHandler+0xd2>
 800360c:	23a0      	movs	r3, #160	@ 0xa0
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4013      	ands	r3, r2
 8003618:	d00b      	beq.n	8003632 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2290      	movs	r2, #144	@ 0x90
 8003626:	589b      	ldr	r3, [r3, r2]
 8003628:	2201      	movs	r2, #1
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2190      	movs	r1, #144	@ 0x90
 8003630:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003632:	23a4      	movs	r3, #164	@ 0xa4
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2202      	movs	r2, #2
 800363a:	4013      	ands	r3, r2
 800363c:	d011      	beq.n	8003662 <HAL_UART_IRQHandler+0x102>
 800363e:	239c      	movs	r3, #156	@ 0x9c
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2201      	movs	r2, #1
 8003646:	4013      	ands	r3, r2
 8003648:	d00b      	beq.n	8003662 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2202      	movs	r2, #2
 8003650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2290      	movs	r2, #144	@ 0x90
 8003656:	589b      	ldr	r3, [r3, r2]
 8003658:	2204      	movs	r2, #4
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2190      	movs	r1, #144	@ 0x90
 8003660:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003662:	23a4      	movs	r3, #164	@ 0xa4
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2204      	movs	r2, #4
 800366a:	4013      	ands	r3, r2
 800366c:	d011      	beq.n	8003692 <HAL_UART_IRQHandler+0x132>
 800366e:	239c      	movs	r3, #156	@ 0x9c
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2201      	movs	r2, #1
 8003676:	4013      	ands	r3, r2
 8003678:	d00b      	beq.n	8003692 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2204      	movs	r2, #4
 8003680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2290      	movs	r2, #144	@ 0x90
 8003686:	589b      	ldr	r3, [r3, r2]
 8003688:	2202      	movs	r2, #2
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2190      	movs	r1, #144	@ 0x90
 8003690:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003692:	23a4      	movs	r3, #164	@ 0xa4
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2208      	movs	r2, #8
 800369a:	4013      	ands	r3, r2
 800369c:	d017      	beq.n	80036ce <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800369e:	23a0      	movs	r3, #160	@ 0xa0
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2220      	movs	r2, #32
 80036a6:	4013      	ands	r3, r2
 80036a8:	d105      	bne.n	80036b6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80036aa:	239c      	movs	r3, #156	@ 0x9c
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a5b      	ldr	r2, [pc, #364]	@ (8003820 <HAL_UART_IRQHandler+0x2c0>)
 80036b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036b4:	d00b      	beq.n	80036ce <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2208      	movs	r2, #8
 80036bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2290      	movs	r2, #144	@ 0x90
 80036c2:	589b      	ldr	r3, [r3, r2]
 80036c4:	2208      	movs	r2, #8
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2190      	movs	r1, #144	@ 0x90
 80036cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036ce:	23a4      	movs	r3, #164	@ 0xa4
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2380      	movs	r3, #128	@ 0x80
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	4013      	ands	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_UART_IRQHandler+0x1a4>
 80036dc:	23a0      	movs	r3, #160	@ 0xa0
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	2380      	movs	r3, #128	@ 0x80
 80036e4:	04db      	lsls	r3, r3, #19
 80036e6:	4013      	ands	r3, r2
 80036e8:	d00c      	beq.n	8003704 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2280      	movs	r2, #128	@ 0x80
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2290      	movs	r2, #144	@ 0x90
 80036f8:	589b      	ldr	r3, [r3, r2]
 80036fa:	2220      	movs	r2, #32
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2190      	movs	r1, #144	@ 0x90
 8003702:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2290      	movs	r2, #144	@ 0x90
 8003708:	589b      	ldr	r3, [r3, r2]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d100      	bne.n	8003710 <HAL_UART_IRQHandler+0x1b0>
 800370e:	e23d      	b.n	8003b8c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003710:	23a4      	movs	r3, #164	@ 0xa4
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2220      	movs	r2, #32
 8003718:	4013      	ands	r3, r2
 800371a:	d015      	beq.n	8003748 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800371c:	23a0      	movs	r3, #160	@ 0xa0
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2220      	movs	r2, #32
 8003724:	4013      	ands	r3, r2
 8003726:	d106      	bne.n	8003736 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003728:	239c      	movs	r3, #156	@ 0x9c
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	055b      	lsls	r3, r3, #21
 8003732:	4013      	ands	r3, r2
 8003734:	d008      	beq.n	8003748 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	0010      	movs	r0, r2
 8003746:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2290      	movs	r2, #144	@ 0x90
 800374c:	589b      	ldr	r3, [r3, r2]
 800374e:	2194      	movs	r1, #148	@ 0x94
 8003750:	187a      	adds	r2, r7, r1
 8003752:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2240      	movs	r2, #64	@ 0x40
 800375c:	4013      	ands	r3, r2
 800375e:	2b40      	cmp	r3, #64	@ 0x40
 8003760:	d004      	beq.n	800376c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003762:	187b      	adds	r3, r7, r1
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2228      	movs	r2, #40	@ 0x28
 8003768:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800376a:	d04c      	beq.n	8003806 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	0018      	movs	r0, r3
 8003770:	f001 f836 	bl	80047e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2240      	movs	r2, #64	@ 0x40
 800377c:	4013      	ands	r3, r2
 800377e:	2b40      	cmp	r3, #64	@ 0x40
 8003780:	d13c      	bne.n	80037fc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003782:	f3ef 8310 	mrs	r3, PRIMASK
 8003786:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003788:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800378a:	2090      	movs	r0, #144	@ 0x90
 800378c:	183a      	adds	r2, r7, r0
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	2301      	movs	r3, #1
 8003792:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003796:	f383 8810 	msr	PRIMASK, r3
}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2140      	movs	r1, #64	@ 0x40
 80037a8:	438a      	bics	r2, r1
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	183b      	adds	r3, r7, r0
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037b4:	f383 8810 	msr	PRIMASK, r3
}
 80037b8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2280      	movs	r2, #128	@ 0x80
 80037be:	589b      	ldr	r3, [r3, r2]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d016      	beq.n	80037f2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2280      	movs	r2, #128	@ 0x80
 80037c8:	589b      	ldr	r3, [r3, r2]
 80037ca:	4a17      	ldr	r2, [pc, #92]	@ (8003828 <HAL_UART_IRQHandler+0x2c8>)
 80037cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2280      	movs	r2, #128	@ 0x80
 80037d2:	589b      	ldr	r3, [r3, r2]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7fe fb07 	bl	8001de8 <HAL_DMA_Abort_IT>
 80037da:	1e03      	subs	r3, r0, #0
 80037dc:	d01c      	beq.n	8003818 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2280      	movs	r2, #128	@ 0x80
 80037e2:	589b      	ldr	r3, [r3, r2]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	2180      	movs	r1, #128	@ 0x80
 80037ea:	5852      	ldr	r2, [r2, r1]
 80037ec:	0010      	movs	r0, r2
 80037ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	e012      	b.n	8003818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 f9e1 	bl	8003bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fa:	e00d      	b.n	8003818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 f9dc 	bl	8003bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e008      	b.n	8003818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f000 f9d7 	bl	8003bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2290      	movs	r2, #144	@ 0x90
 8003812:	2100      	movs	r1, #0
 8003814:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003816:	e1b9      	b.n	8003b8c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	46c0      	nop			@ (mov r8, r8)
    return;
 800381a:	e1b7      	b.n	8003b8c <HAL_UART_IRQHandler+0x62c>
 800381c:	0000080f 	.word	0x0000080f
 8003820:	10000001 	.word	0x10000001
 8003824:	04000120 	.word	0x04000120
 8003828:	08004b5d 	.word	0x08004b5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d000      	beq.n	8003836 <HAL_UART_IRQHandler+0x2d6>
 8003834:	e13e      	b.n	8003ab4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003836:	23a4      	movs	r3, #164	@ 0xa4
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2210      	movs	r2, #16
 800383e:	4013      	ands	r3, r2
 8003840:	d100      	bne.n	8003844 <HAL_UART_IRQHandler+0x2e4>
 8003842:	e137      	b.n	8003ab4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003844:	23a0      	movs	r3, #160	@ 0xa0
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2210      	movs	r2, #16
 800384c:	4013      	ands	r3, r2
 800384e:	d100      	bne.n	8003852 <HAL_UART_IRQHandler+0x2f2>
 8003850:	e130      	b.n	8003ab4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2210      	movs	r2, #16
 8003858:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2240      	movs	r2, #64	@ 0x40
 8003862:	4013      	ands	r3, r2
 8003864:	2b40      	cmp	r3, #64	@ 0x40
 8003866:	d000      	beq.n	800386a <HAL_UART_IRQHandler+0x30a>
 8003868:	e0a4      	b.n	80039b4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2280      	movs	r2, #128	@ 0x80
 800386e:	589b      	ldr	r3, [r3, r2]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	217e      	movs	r1, #126	@ 0x7e
 8003876:	187b      	adds	r3, r7, r1
 8003878:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800387a:	187b      	adds	r3, r7, r1
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d100      	bne.n	8003884 <HAL_UART_IRQHandler+0x324>
 8003882:	e185      	b.n	8003b90 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	225c      	movs	r2, #92	@ 0x5c
 8003888:	5a9b      	ldrh	r3, [r3, r2]
 800388a:	187a      	adds	r2, r7, r1
 800388c:	8812      	ldrh	r2, [r2, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d300      	bcc.n	8003894 <HAL_UART_IRQHandler+0x334>
 8003892:	e17d      	b.n	8003b90 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	187a      	adds	r2, r7, r1
 8003898:	215e      	movs	r1, #94	@ 0x5e
 800389a:	8812      	ldrh	r2, [r2, #0]
 800389c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2280      	movs	r2, #128	@ 0x80
 80038a2:	589b      	ldr	r3, [r3, r2]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2220      	movs	r2, #32
 80038aa:	4013      	ands	r3, r2
 80038ac:	d170      	bne.n	8003990 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ae:	f3ef 8310 	mrs	r3, PRIMASK
 80038b2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038b8:	2301      	movs	r3, #1
 80038ba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038be:	f383 8810 	msr	PRIMASK, r3
}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	49b4      	ldr	r1, [pc, #720]	@ (8003ba0 <HAL_UART_IRQHandler+0x640>)
 80038d0:	400a      	ands	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038da:	f383 8810 	msr	PRIMASK, r3
}
 80038de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e0:	f3ef 8310 	mrs	r3, PRIMASK
 80038e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80038e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80038ea:	2301      	movs	r3, #1
 80038ec:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f0:	f383 8810 	msr	PRIMASK, r3
}
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2101      	movs	r1, #1
 8003902:	438a      	bics	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003908:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800390c:	f383 8810 	msr	PRIMASK, r3
}
 8003910:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003912:	f3ef 8310 	mrs	r3, PRIMASK
 8003916:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391a:	673b      	str	r3, [r7, #112]	@ 0x70
 800391c:	2301      	movs	r3, #1
 800391e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003922:	f383 8810 	msr	PRIMASK, r3
}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2140      	movs	r1, #64	@ 0x40
 8003934:	438a      	bics	r2, r1
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800393a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	228c      	movs	r2, #140	@ 0x8c
 8003948:	2120      	movs	r1, #32
 800394a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003952:	f3ef 8310 	mrs	r3, PRIMASK
 8003956:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800395c:	2301      	movs	r3, #1
 800395e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003960:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003962:	f383 8810 	msr	PRIMASK, r3
}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2110      	movs	r1, #16
 8003974:	438a      	bics	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800397a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800397e:	f383 8810 	msr	PRIMASK, r3
}
 8003982:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2280      	movs	r2, #128	@ 0x80
 8003988:	589b      	ldr	r3, [r3, r2]
 800398a:	0018      	movs	r0, r3
 800398c:	f7fe f9cc 	bl	8001d28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	225c      	movs	r2, #92	@ 0x5c
 800399a:	5a9a      	ldrh	r2, [r3, r2]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	215e      	movs	r1, #94	@ 0x5e
 80039a0:	5a5b      	ldrh	r3, [r3, r1]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	0011      	movs	r1, r2
 80039ac:	0018      	movs	r0, r3
 80039ae:	f7fc fea7 	bl	8000700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039b2:	e0ed      	b.n	8003b90 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	225c      	movs	r2, #92	@ 0x5c
 80039b8:	5a99      	ldrh	r1, [r3, r2]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	225e      	movs	r2, #94	@ 0x5e
 80039be:	5a9b      	ldrh	r3, [r3, r2]
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	208e      	movs	r0, #142	@ 0x8e
 80039c4:	183b      	adds	r3, r7, r0
 80039c6:	1a8a      	subs	r2, r1, r2
 80039c8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	225e      	movs	r2, #94	@ 0x5e
 80039ce:	5a9b      	ldrh	r3, [r3, r2]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d100      	bne.n	80039d8 <HAL_UART_IRQHandler+0x478>
 80039d6:	e0dd      	b.n	8003b94 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80039d8:	183b      	adds	r3, r7, r0
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d100      	bne.n	80039e2 <HAL_UART_IRQHandler+0x482>
 80039e0:	e0d8      	b.n	8003b94 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e2:	f3ef 8310 	mrs	r3, PRIMASK
 80039e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80039e8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039ea:	2488      	movs	r4, #136	@ 0x88
 80039ec:	193a      	adds	r2, r7, r4
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	2301      	movs	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f383 8810 	msr	PRIMASK, r3
}
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4967      	ldr	r1, [pc, #412]	@ (8003ba4 <HAL_UART_IRQHandler+0x644>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	193b      	adds	r3, r7, r4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f383 8810 	msr	PRIMASK, r3
}
 8003a18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a20:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a22:	2484      	movs	r4, #132	@ 0x84
 8003a24:	193a      	adds	r2, r7, r4
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	2301      	movs	r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f383 8810 	msr	PRIMASK, r3
}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	495a      	ldr	r1, [pc, #360]	@ (8003ba8 <HAL_UART_IRQHandler+0x648>)
 8003a40:	400a      	ands	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	193b      	adds	r3, r7, r4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f383 8810 	msr	PRIMASK, r3
}
 8003a50:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	228c      	movs	r2, #140	@ 0x8c
 8003a56:	2120      	movs	r1, #32
 8003a58:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a66:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6e:	2480      	movs	r4, #128	@ 0x80
 8003a70:	193a      	adds	r2, r7, r4
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	2301      	movs	r3, #1
 8003a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7a:	f383 8810 	msr	PRIMASK, r3
}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2110      	movs	r1, #16
 8003a8c:	438a      	bics	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	193b      	adds	r3, r7, r4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a98:	f383 8810 	msr	PRIMASK, r3
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aa4:	183b      	adds	r3, r7, r0
 8003aa6:	881a      	ldrh	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	0011      	movs	r1, r2
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7fc fe27 	bl	8000700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ab2:	e06f      	b.n	8003b94 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ab4:	23a4      	movs	r3, #164	@ 0xa4
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	2380      	movs	r3, #128	@ 0x80
 8003abc:	035b      	lsls	r3, r3, #13
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d010      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x584>
 8003ac2:	239c      	movs	r3, #156	@ 0x9c
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	03db      	lsls	r3, r3, #15
 8003acc:	4013      	ands	r3, r2
 8003ace:	d009      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2280      	movs	r2, #128	@ 0x80
 8003ad6:	0352      	lsls	r2, r2, #13
 8003ad8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f001 f880 	bl	8004be2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ae2:	e05a      	b.n	8003b9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003ae4:	23a4      	movs	r3, #164	@ 0xa4
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2280      	movs	r2, #128	@ 0x80
 8003aec:	4013      	ands	r3, r2
 8003aee:	d016      	beq.n	8003b1e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003af0:	23a0      	movs	r3, #160	@ 0xa0
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2280      	movs	r2, #128	@ 0x80
 8003af8:	4013      	ands	r3, r2
 8003afa:	d106      	bne.n	8003b0a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003afc:	239c      	movs	r3, #156	@ 0x9c
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	4013      	ands	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d042      	beq.n	8003b98 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	0010      	movs	r0, r2
 8003b1a:	4798      	blx	r3
    }
    return;
 8003b1c:	e03c      	b.n	8003b98 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b1e:	23a4      	movs	r3, #164	@ 0xa4
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2240      	movs	r2, #64	@ 0x40
 8003b26:	4013      	ands	r3, r2
 8003b28:	d00a      	beq.n	8003b40 <HAL_UART_IRQHandler+0x5e0>
 8003b2a:	23a0      	movs	r3, #160	@ 0xa0
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2240      	movs	r2, #64	@ 0x40
 8003b32:	4013      	ands	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f001 f826 	bl	8004b8a <UART_EndTransmit_IT>
    return;
 8003b3e:	e02c      	b.n	8003b9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b40:	23a4      	movs	r3, #164	@ 0xa4
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d00b      	beq.n	8003b66 <HAL_UART_IRQHandler+0x606>
 8003b4e:	23a0      	movs	r3, #160	@ 0xa0
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	2380      	movs	r3, #128	@ 0x80
 8003b56:	05db      	lsls	r3, r3, #23
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f001 f84f 	bl	8004c02 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b64:	e019      	b.n	8003b9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b66:	23a4      	movs	r3, #164	@ 0xa4
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	2380      	movs	r3, #128	@ 0x80
 8003b6e:	045b      	lsls	r3, r3, #17
 8003b70:	4013      	ands	r3, r2
 8003b72:	d012      	beq.n	8003b9a <HAL_UART_IRQHandler+0x63a>
 8003b74:	23a0      	movs	r3, #160	@ 0xa0
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	da0d      	bge.n	8003b9a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f001 f836 	bl	8004bf2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b86:	e008      	b.n	8003b9a <HAL_UART_IRQHandler+0x63a>
      return;
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	e006      	b.n	8003b9a <HAL_UART_IRQHandler+0x63a>
    return;
 8003b8c:	46c0      	nop			@ (mov r8, r8)
 8003b8e:	e004      	b.n	8003b9a <HAL_UART_IRQHandler+0x63a>
      return;
 8003b90:	46c0      	nop			@ (mov r8, r8)
 8003b92:	e002      	b.n	8003b9a <HAL_UART_IRQHandler+0x63a>
      return;
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	e000      	b.n	8003b9a <HAL_UART_IRQHandler+0x63a>
    return;
 8003b98:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b02a      	add	sp, #168	@ 0xa8
 8003b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba0:	fffffeff 	.word	0xfffffeff
 8003ba4:	fffffedf 	.word	0xfffffedf
 8003ba8:	effffffe 	.word	0xeffffffe

08003bac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003bb4:	46c0      	nop			@ (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b002      	add	sp, #8
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bc4:	46c0      	nop			@ (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	b5b0      	push	{r4, r5, r7, lr}
 8003bce:	b090      	sub	sp, #64	@ 0x40
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bd4:	231a      	movs	r3, #26
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	189b      	adds	r3, r3, r2
 8003bda:	19db      	adds	r3, r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4ac1      	ldr	r2, [pc, #772]	@ (8003f04 <UART_SetConfig+0x338>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	0019      	movs	r1, r3
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4abc      	ldr	r2, [pc, #752]	@ (8003f08 <UART_SetConfig+0x33c>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0018      	movs	r0, r3
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	68d9      	ldr	r1, [r3, #12]
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	0003      	movs	r3, r0
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4ab6      	ldr	r2, [pc, #728]	@ (8003f0c <UART_SetConfig+0x340>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <UART_SetConfig+0x80>
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4ab4      	ldr	r2, [pc, #720]	@ (8003f10 <UART_SetConfig+0x344>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	4ab0      	ldr	r2, [pc, #704]	@ (8003f14 <UART_SetConfig+0x348>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	220f      	movs	r2, #15
 8003c6a:	4393      	bics	r3, r2
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	0003      	movs	r3, r0
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4aa5      	ldr	r2, [pc, #660]	@ (8003f18 <UART_SetConfig+0x34c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d131      	bne.n	8003cea <UART_SetConfig+0x11e>
 8003c86:	4ba5      	ldr	r3, [pc, #660]	@ (8003f1c <UART_SetConfig+0x350>)
 8003c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d01d      	beq.n	8003cce <UART_SetConfig+0x102>
 8003c92:	d823      	bhi.n	8003cdc <UART_SetConfig+0x110>
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d00c      	beq.n	8003cb2 <UART_SetConfig+0xe6>
 8003c98:	d820      	bhi.n	8003cdc <UART_SetConfig+0x110>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <UART_SetConfig+0xd8>
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d00e      	beq.n	8003cc0 <UART_SetConfig+0xf4>
 8003ca2:	e01b      	b.n	8003cdc <UART_SetConfig+0x110>
 8003ca4:	231b      	movs	r3, #27
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	19db      	adds	r3, r3, r7
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e154      	b.n	8003f5c <UART_SetConfig+0x390>
 8003cb2:	231b      	movs	r3, #27
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	19db      	adds	r3, r3, r7
 8003cba:	2202      	movs	r2, #2
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e14d      	b.n	8003f5c <UART_SetConfig+0x390>
 8003cc0:	231b      	movs	r3, #27
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	189b      	adds	r3, r3, r2
 8003cc6:	19db      	adds	r3, r3, r7
 8003cc8:	2204      	movs	r2, #4
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e146      	b.n	8003f5c <UART_SetConfig+0x390>
 8003cce:	231b      	movs	r3, #27
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	19db      	adds	r3, r3, r7
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	e13f      	b.n	8003f5c <UART_SetConfig+0x390>
 8003cdc:	231b      	movs	r3, #27
 8003cde:	2220      	movs	r2, #32
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	19db      	adds	r3, r3, r7
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	e138      	b.n	8003f5c <UART_SetConfig+0x390>
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a8c      	ldr	r2, [pc, #560]	@ (8003f20 <UART_SetConfig+0x354>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d131      	bne.n	8003d58 <UART_SetConfig+0x18c>
 8003cf4:	4b89      	ldr	r3, [pc, #548]	@ (8003f1c <UART_SetConfig+0x350>)
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf8:	220c      	movs	r2, #12
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	d01d      	beq.n	8003d3c <UART_SetConfig+0x170>
 8003d00:	d823      	bhi.n	8003d4a <UART_SetConfig+0x17e>
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d00c      	beq.n	8003d20 <UART_SetConfig+0x154>
 8003d06:	d820      	bhi.n	8003d4a <UART_SetConfig+0x17e>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <UART_SetConfig+0x146>
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d00e      	beq.n	8003d2e <UART_SetConfig+0x162>
 8003d10:	e01b      	b.n	8003d4a <UART_SetConfig+0x17e>
 8003d12:	231b      	movs	r3, #27
 8003d14:	2220      	movs	r2, #32
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	19db      	adds	r3, r3, r7
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	e11d      	b.n	8003f5c <UART_SetConfig+0x390>
 8003d20:	231b      	movs	r3, #27
 8003d22:	2220      	movs	r2, #32
 8003d24:	189b      	adds	r3, r3, r2
 8003d26:	19db      	adds	r3, r3, r7
 8003d28:	2202      	movs	r2, #2
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	e116      	b.n	8003f5c <UART_SetConfig+0x390>
 8003d2e:	231b      	movs	r3, #27
 8003d30:	2220      	movs	r2, #32
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	19db      	adds	r3, r3, r7
 8003d36:	2204      	movs	r2, #4
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	e10f      	b.n	8003f5c <UART_SetConfig+0x390>
 8003d3c:	231b      	movs	r3, #27
 8003d3e:	2220      	movs	r2, #32
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	19db      	adds	r3, r3, r7
 8003d44:	2208      	movs	r2, #8
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	e108      	b.n	8003f5c <UART_SetConfig+0x390>
 8003d4a:	231b      	movs	r3, #27
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	19db      	adds	r3, r3, r7
 8003d52:	2210      	movs	r2, #16
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	e101      	b.n	8003f5c <UART_SetConfig+0x390>
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a71      	ldr	r2, [pc, #452]	@ (8003f24 <UART_SetConfig+0x358>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d131      	bne.n	8003dc6 <UART_SetConfig+0x1fa>
 8003d62:	4b6e      	ldr	r3, [pc, #440]	@ (8003f1c <UART_SetConfig+0x350>)
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	2230      	movs	r2, #48	@ 0x30
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b30      	cmp	r3, #48	@ 0x30
 8003d6c:	d01d      	beq.n	8003daa <UART_SetConfig+0x1de>
 8003d6e:	d823      	bhi.n	8003db8 <UART_SetConfig+0x1ec>
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d00c      	beq.n	8003d8e <UART_SetConfig+0x1c2>
 8003d74:	d820      	bhi.n	8003db8 <UART_SetConfig+0x1ec>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <UART_SetConfig+0x1b4>
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d00e      	beq.n	8003d9c <UART_SetConfig+0x1d0>
 8003d7e:	e01b      	b.n	8003db8 <UART_SetConfig+0x1ec>
 8003d80:	231b      	movs	r3, #27
 8003d82:	2220      	movs	r2, #32
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	19db      	adds	r3, r3, r7
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e0e6      	b.n	8003f5c <UART_SetConfig+0x390>
 8003d8e:	231b      	movs	r3, #27
 8003d90:	2220      	movs	r2, #32
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	19db      	adds	r3, r3, r7
 8003d96:	2202      	movs	r2, #2
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e0df      	b.n	8003f5c <UART_SetConfig+0x390>
 8003d9c:	231b      	movs	r3, #27
 8003d9e:	2220      	movs	r2, #32
 8003da0:	189b      	adds	r3, r3, r2
 8003da2:	19db      	adds	r3, r3, r7
 8003da4:	2204      	movs	r2, #4
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e0d8      	b.n	8003f5c <UART_SetConfig+0x390>
 8003daa:	231b      	movs	r3, #27
 8003dac:	2220      	movs	r2, #32
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	19db      	adds	r3, r3, r7
 8003db2:	2208      	movs	r2, #8
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e0d1      	b.n	8003f5c <UART_SetConfig+0x390>
 8003db8:	231b      	movs	r3, #27
 8003dba:	2220      	movs	r2, #32
 8003dbc:	189b      	adds	r3, r3, r2
 8003dbe:	19db      	adds	r3, r3, r7
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e0ca      	b.n	8003f5c <UART_SetConfig+0x390>
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a57      	ldr	r2, [pc, #348]	@ (8003f28 <UART_SetConfig+0x35c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d106      	bne.n	8003dde <UART_SetConfig+0x212>
 8003dd0:	231b      	movs	r3, #27
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	19db      	adds	r3, r3, r7
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e0be      	b.n	8003f5c <UART_SetConfig+0x390>
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a52      	ldr	r2, [pc, #328]	@ (8003f2c <UART_SetConfig+0x360>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d106      	bne.n	8003df6 <UART_SetConfig+0x22a>
 8003de8:	231b      	movs	r3, #27
 8003dea:	2220      	movs	r2, #32
 8003dec:	189b      	adds	r3, r3, r2
 8003dee:	19db      	adds	r3, r3, r7
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	e0b2      	b.n	8003f5c <UART_SetConfig+0x390>
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a4d      	ldr	r2, [pc, #308]	@ (8003f30 <UART_SetConfig+0x364>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d106      	bne.n	8003e0e <UART_SetConfig+0x242>
 8003e00:	231b      	movs	r3, #27
 8003e02:	2220      	movs	r2, #32
 8003e04:	189b      	adds	r3, r3, r2
 8003e06:	19db      	adds	r3, r3, r7
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	e0a6      	b.n	8003f5c <UART_SetConfig+0x390>
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a3e      	ldr	r2, [pc, #248]	@ (8003f0c <UART_SetConfig+0x340>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d13e      	bne.n	8003e96 <UART_SetConfig+0x2ca>
 8003e18:	4b40      	ldr	r3, [pc, #256]	@ (8003f1c <UART_SetConfig+0x350>)
 8003e1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e1c:	23c0      	movs	r3, #192	@ 0xc0
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	4013      	ands	r3, r2
 8003e22:	22c0      	movs	r2, #192	@ 0xc0
 8003e24:	0112      	lsls	r2, r2, #4
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d027      	beq.n	8003e7a <UART_SetConfig+0x2ae>
 8003e2a:	22c0      	movs	r2, #192	@ 0xc0
 8003e2c:	0112      	lsls	r2, r2, #4
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d82a      	bhi.n	8003e88 <UART_SetConfig+0x2bc>
 8003e32:	2280      	movs	r2, #128	@ 0x80
 8003e34:	0112      	lsls	r2, r2, #4
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d011      	beq.n	8003e5e <UART_SetConfig+0x292>
 8003e3a:	2280      	movs	r2, #128	@ 0x80
 8003e3c:	0112      	lsls	r2, r2, #4
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d822      	bhi.n	8003e88 <UART_SetConfig+0x2bc>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <UART_SetConfig+0x284>
 8003e46:	2280      	movs	r2, #128	@ 0x80
 8003e48:	00d2      	lsls	r2, r2, #3
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00e      	beq.n	8003e6c <UART_SetConfig+0x2a0>
 8003e4e:	e01b      	b.n	8003e88 <UART_SetConfig+0x2bc>
 8003e50:	231b      	movs	r3, #27
 8003e52:	2220      	movs	r2, #32
 8003e54:	189b      	adds	r3, r3, r2
 8003e56:	19db      	adds	r3, r3, r7
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	e07e      	b.n	8003f5c <UART_SetConfig+0x390>
 8003e5e:	231b      	movs	r3, #27
 8003e60:	2220      	movs	r2, #32
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	19db      	adds	r3, r3, r7
 8003e66:	2202      	movs	r2, #2
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	e077      	b.n	8003f5c <UART_SetConfig+0x390>
 8003e6c:	231b      	movs	r3, #27
 8003e6e:	2220      	movs	r2, #32
 8003e70:	189b      	adds	r3, r3, r2
 8003e72:	19db      	adds	r3, r3, r7
 8003e74:	2204      	movs	r2, #4
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	e070      	b.n	8003f5c <UART_SetConfig+0x390>
 8003e7a:	231b      	movs	r3, #27
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	19db      	adds	r3, r3, r7
 8003e82:	2208      	movs	r2, #8
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	e069      	b.n	8003f5c <UART_SetConfig+0x390>
 8003e88:	231b      	movs	r3, #27
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	2210      	movs	r2, #16
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e062      	b.n	8003f5c <UART_SetConfig+0x390>
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <UART_SetConfig+0x344>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d157      	bne.n	8003f50 <UART_SetConfig+0x384>
 8003ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f1c <UART_SetConfig+0x350>)
 8003ea2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ea4:	23c0      	movs	r3, #192	@ 0xc0
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	22c0      	movs	r2, #192	@ 0xc0
 8003eac:	0092      	lsls	r2, r2, #2
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d040      	beq.n	8003f34 <UART_SetConfig+0x368>
 8003eb2:	22c0      	movs	r2, #192	@ 0xc0
 8003eb4:	0092      	lsls	r2, r2, #2
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d843      	bhi.n	8003f42 <UART_SetConfig+0x376>
 8003eba:	2280      	movs	r2, #128	@ 0x80
 8003ebc:	0092      	lsls	r2, r2, #2
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d011      	beq.n	8003ee6 <UART_SetConfig+0x31a>
 8003ec2:	2280      	movs	r2, #128	@ 0x80
 8003ec4:	0092      	lsls	r2, r2, #2
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d83b      	bhi.n	8003f42 <UART_SetConfig+0x376>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d004      	beq.n	8003ed8 <UART_SetConfig+0x30c>
 8003ece:	2280      	movs	r2, #128	@ 0x80
 8003ed0:	0052      	lsls	r2, r2, #1
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <UART_SetConfig+0x328>
 8003ed6:	e034      	b.n	8003f42 <UART_SetConfig+0x376>
 8003ed8:	231b      	movs	r3, #27
 8003eda:	2220      	movs	r2, #32
 8003edc:	189b      	adds	r3, r3, r2
 8003ede:	19db      	adds	r3, r3, r7
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e03a      	b.n	8003f5c <UART_SetConfig+0x390>
 8003ee6:	231b      	movs	r3, #27
 8003ee8:	2220      	movs	r2, #32
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	2202      	movs	r2, #2
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e033      	b.n	8003f5c <UART_SetConfig+0x390>
 8003ef4:	231b      	movs	r3, #27
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	2204      	movs	r2, #4
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e02c      	b.n	8003f5c <UART_SetConfig+0x390>
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	cfff69f3 	.word	0xcfff69f3
 8003f08:	ffffcfff 	.word	0xffffcfff
 8003f0c:	40008000 	.word	0x40008000
 8003f10:	40008400 	.word	0x40008400
 8003f14:	11fff4ff 	.word	0x11fff4ff
 8003f18:	40013800 	.word	0x40013800
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40004400 	.word	0x40004400
 8003f24:	40004800 	.word	0x40004800
 8003f28:	40004c00 	.word	0x40004c00
 8003f2c:	40005000 	.word	0x40005000
 8003f30:	40013c00 	.word	0x40013c00
 8003f34:	231b      	movs	r3, #27
 8003f36:	2220      	movs	r2, #32
 8003f38:	189b      	adds	r3, r3, r2
 8003f3a:	19db      	adds	r3, r3, r7
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	e00c      	b.n	8003f5c <UART_SetConfig+0x390>
 8003f42:	231b      	movs	r3, #27
 8003f44:	2220      	movs	r2, #32
 8003f46:	189b      	adds	r3, r3, r2
 8003f48:	19db      	adds	r3, r3, r7
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	e005      	b.n	8003f5c <UART_SetConfig+0x390>
 8003f50:	231b      	movs	r3, #27
 8003f52:	2220      	movs	r2, #32
 8003f54:	189b      	adds	r3, r3, r2
 8003f56:	19db      	adds	r3, r3, r7
 8003f58:	2210      	movs	r2, #16
 8003f5a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4ac1      	ldr	r2, [pc, #772]	@ (8004268 <UART_SetConfig+0x69c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d005      	beq.n	8003f72 <UART_SetConfig+0x3a6>
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4ac0      	ldr	r2, [pc, #768]	@ (800426c <UART_SetConfig+0x6a0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d000      	beq.n	8003f72 <UART_SetConfig+0x3a6>
 8003f70:	e093      	b.n	800409a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f72:	231b      	movs	r3, #27
 8003f74:	2220      	movs	r2, #32
 8003f76:	189b      	adds	r3, r3, r2
 8003f78:	19db      	adds	r3, r3, r7
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d015      	beq.n	8003fac <UART_SetConfig+0x3e0>
 8003f80:	dc18      	bgt.n	8003fb4 <UART_SetConfig+0x3e8>
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d00d      	beq.n	8003fa2 <UART_SetConfig+0x3d6>
 8003f86:	dc15      	bgt.n	8003fb4 <UART_SetConfig+0x3e8>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <UART_SetConfig+0x3c6>
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d005      	beq.n	8003f9c <UART_SetConfig+0x3d0>
 8003f90:	e010      	b.n	8003fb4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f92:	f7fe ffab 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8003f96:	0003      	movs	r3, r0
 8003f98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f9a:	e014      	b.n	8003fc6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f9c:	4bb4      	ldr	r3, [pc, #720]	@ (8004270 <UART_SetConfig+0x6a4>)
 8003f9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fa0:	e011      	b.n	8003fc6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa2:	f7fe ff17 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003faa:	e00c      	b.n	8003fc6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fac:	2380      	movs	r3, #128	@ 0x80
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fb2:	e008      	b.n	8003fc6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003fb8:	231a      	movs	r3, #26
 8003fba:	2220      	movs	r2, #32
 8003fbc:	189b      	adds	r3, r3, r2
 8003fbe:	19db      	adds	r3, r3, r7
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
        break;
 8003fc4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d100      	bne.n	8003fce <UART_SetConfig+0x402>
 8003fcc:	e135      	b.n	800423a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fd2:	4ba8      	ldr	r3, [pc, #672]	@ (8004274 <UART_SetConfig+0x6a8>)
 8003fd4:	0052      	lsls	r2, r2, #1
 8003fd6:	5ad3      	ldrh	r3, [r2, r3]
 8003fd8:	0019      	movs	r1, r3
 8003fda:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003fdc:	f7fc f892 	bl	8000104 <__udivsi3>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	0013      	movs	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	189b      	adds	r3, r3, r2
 8003fee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d305      	bcc.n	8004000 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d906      	bls.n	800400e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004000:	231a      	movs	r3, #26
 8004002:	2220      	movs	r2, #32
 8004004:	189b      	adds	r3, r3, r2
 8004006:	19db      	adds	r3, r3, r7
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e044      	b.n	8004098 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800400e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800401a:	4b96      	ldr	r3, [pc, #600]	@ (8004274 <UART_SetConfig+0x6a8>)
 800401c:	0052      	lsls	r2, r2, #1
 800401e:	5ad3      	ldrh	r3, [r2, r3]
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	69b8      	ldr	r0, [r7, #24]
 800402c:	69f9      	ldr	r1, [r7, #28]
 800402e:	f7fc f9df 	bl	80003f0 <__aeabi_uldivmod>
 8004032:	0002      	movs	r2, r0
 8004034:	000b      	movs	r3, r1
 8004036:	0e11      	lsrs	r1, r2, #24
 8004038:	021d      	lsls	r5, r3, #8
 800403a:	430d      	orrs	r5, r1
 800403c:	0214      	lsls	r4, r2, #8
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	68b8      	ldr	r0, [r7, #8]
 800404c:	68f9      	ldr	r1, [r7, #12]
 800404e:	1900      	adds	r0, r0, r4
 8004050:	4169      	adcs	r1, r5
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	2300      	movs	r3, #0
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f7fc f9c6 	bl	80003f0 <__aeabi_uldivmod>
 8004064:	0002      	movs	r2, r0
 8004066:	000b      	movs	r3, r1
 8004068:	0013      	movs	r3, r2
 800406a:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800406c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406e:	23c0      	movs	r3, #192	@ 0xc0
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	429a      	cmp	r2, r3
 8004074:	d309      	bcc.n	800408a <UART_SetConfig+0x4be>
 8004076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004078:	2380      	movs	r3, #128	@ 0x80
 800407a:	035b      	lsls	r3, r3, #13
 800407c:	429a      	cmp	r2, r3
 800407e:	d204      	bcs.n	800408a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004086:	60da      	str	r2, [r3, #12]
 8004088:	e006      	b.n	8004098 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800408a:	231a      	movs	r3, #26
 800408c:	2220      	movs	r2, #32
 800408e:	189b      	adds	r3, r3, r2
 8004090:	19db      	adds	r3, r3, r7
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004096:	e0d0      	b.n	800423a <UART_SetConfig+0x66e>
 8004098:	e0cf      	b.n	800423a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	2380      	movs	r3, #128	@ 0x80
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d000      	beq.n	80040a8 <UART_SetConfig+0x4dc>
 80040a6:	e070      	b.n	800418a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80040a8:	231b      	movs	r3, #27
 80040aa:	2220      	movs	r2, #32
 80040ac:	189b      	adds	r3, r3, r2
 80040ae:	19db      	adds	r3, r3, r7
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d015      	beq.n	80040e2 <UART_SetConfig+0x516>
 80040b6:	dc18      	bgt.n	80040ea <UART_SetConfig+0x51e>
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d00d      	beq.n	80040d8 <UART_SetConfig+0x50c>
 80040bc:	dc15      	bgt.n	80040ea <UART_SetConfig+0x51e>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <UART_SetConfig+0x4fc>
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d005      	beq.n	80040d2 <UART_SetConfig+0x506>
 80040c6:	e010      	b.n	80040ea <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c8:	f7fe ff10 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 80040cc:	0003      	movs	r3, r0
 80040ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040d0:	e014      	b.n	80040fc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d2:	4b67      	ldr	r3, [pc, #412]	@ (8004270 <UART_SetConfig+0x6a4>)
 80040d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040d6:	e011      	b.n	80040fc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d8:	f7fe fe7c 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 80040dc:	0003      	movs	r3, r0
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040e0:	e00c      	b.n	80040fc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e2:	2380      	movs	r3, #128	@ 0x80
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040e8:	e008      	b.n	80040fc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80040ee:	231a      	movs	r3, #26
 80040f0:	2220      	movs	r2, #32
 80040f2:	189b      	adds	r3, r3, r2
 80040f4:	19db      	adds	r3, r3, r7
 80040f6:	2201      	movs	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]
        break;
 80040fa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d100      	bne.n	8004104 <UART_SetConfig+0x538>
 8004102:	e09a      	b.n	800423a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004108:	4b5a      	ldr	r3, [pc, #360]	@ (8004274 <UART_SetConfig+0x6a8>)
 800410a:	0052      	lsls	r2, r2, #1
 800410c:	5ad3      	ldrh	r3, [r2, r3]
 800410e:	0019      	movs	r1, r3
 8004110:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004112:	f7fb fff7 	bl	8000104 <__udivsi3>
 8004116:	0003      	movs	r3, r0
 8004118:	005a      	lsls	r2, r3, #1
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	18d2      	adds	r2, r2, r3
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	0019      	movs	r1, r3
 8004128:	0010      	movs	r0, r2
 800412a:	f7fb ffeb 	bl	8000104 <__udivsi3>
 800412e:	0003      	movs	r3, r0
 8004130:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	2b0f      	cmp	r3, #15
 8004136:	d921      	bls.n	800417c <UART_SetConfig+0x5b0>
 8004138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800413a:	2380      	movs	r3, #128	@ 0x80
 800413c:	025b      	lsls	r3, r3, #9
 800413e:	429a      	cmp	r2, r3
 8004140:	d21c      	bcs.n	800417c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004144:	b29a      	uxth	r2, r3
 8004146:	200e      	movs	r0, #14
 8004148:	2420      	movs	r4, #32
 800414a:	1903      	adds	r3, r0, r4
 800414c:	19db      	adds	r3, r3, r7
 800414e:	210f      	movs	r1, #15
 8004150:	438a      	bics	r2, r1
 8004152:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	085b      	lsrs	r3, r3, #1
 8004158:	b29b      	uxth	r3, r3
 800415a:	2207      	movs	r2, #7
 800415c:	4013      	ands	r3, r2
 800415e:	b299      	uxth	r1, r3
 8004160:	1903      	adds	r3, r0, r4
 8004162:	19db      	adds	r3, r3, r7
 8004164:	1902      	adds	r2, r0, r4
 8004166:	19d2      	adds	r2, r2, r7
 8004168:	8812      	ldrh	r2, [r2, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	1902      	adds	r2, r0, r4
 8004174:	19d2      	adds	r2, r2, r7
 8004176:	8812      	ldrh	r2, [r2, #0]
 8004178:	60da      	str	r2, [r3, #12]
 800417a:	e05e      	b.n	800423a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800417c:	231a      	movs	r3, #26
 800417e:	2220      	movs	r2, #32
 8004180:	189b      	adds	r3, r3, r2
 8004182:	19db      	adds	r3, r3, r7
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e057      	b.n	800423a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800418a:	231b      	movs	r3, #27
 800418c:	2220      	movs	r2, #32
 800418e:	189b      	adds	r3, r3, r2
 8004190:	19db      	adds	r3, r3, r7
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d015      	beq.n	80041c4 <UART_SetConfig+0x5f8>
 8004198:	dc18      	bgt.n	80041cc <UART_SetConfig+0x600>
 800419a:	2b04      	cmp	r3, #4
 800419c:	d00d      	beq.n	80041ba <UART_SetConfig+0x5ee>
 800419e:	dc15      	bgt.n	80041cc <UART_SetConfig+0x600>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <UART_SetConfig+0x5de>
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d005      	beq.n	80041b4 <UART_SetConfig+0x5e8>
 80041a8:	e010      	b.n	80041cc <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041aa:	f7fe fe9f 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 80041ae:	0003      	movs	r3, r0
 80041b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041b2:	e014      	b.n	80041de <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004270 <UART_SetConfig+0x6a4>)
 80041b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041b8:	e011      	b.n	80041de <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ba:	f7fe fe0b 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 80041be:	0003      	movs	r3, r0
 80041c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041c2:	e00c      	b.n	80041de <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041c4:	2380      	movs	r3, #128	@ 0x80
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041ca:	e008      	b.n	80041de <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80041d0:	231a      	movs	r3, #26
 80041d2:	2220      	movs	r2, #32
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
        break;
 80041dc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80041de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d02a      	beq.n	800423a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041e8:	4b22      	ldr	r3, [pc, #136]	@ (8004274 <UART_SetConfig+0x6a8>)
 80041ea:	0052      	lsls	r2, r2, #1
 80041ec:	5ad3      	ldrh	r3, [r2, r3]
 80041ee:	0019      	movs	r1, r3
 80041f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041f2:	f7fb ff87 	bl	8000104 <__udivsi3>
 80041f6:	0003      	movs	r3, r0
 80041f8:	001a      	movs	r2, r3
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	18d2      	adds	r2, r2, r3
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	0019      	movs	r1, r3
 8004208:	0010      	movs	r0, r2
 800420a:	f7fb ff7b 	bl	8000104 <__udivsi3>
 800420e:	0003      	movs	r3, r0
 8004210:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	2b0f      	cmp	r3, #15
 8004216:	d90a      	bls.n	800422e <UART_SetConfig+0x662>
 8004218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800421a:	2380      	movs	r3, #128	@ 0x80
 800421c:	025b      	lsls	r3, r3, #9
 800421e:	429a      	cmp	r2, r3
 8004220:	d205      	bcs.n	800422e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	b29a      	uxth	r2, r3
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60da      	str	r2, [r3, #12]
 800422c:	e005      	b.n	800423a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800422e:	231a      	movs	r3, #26
 8004230:	2220      	movs	r2, #32
 8004232:	189b      	adds	r3, r3, r2
 8004234:	19db      	adds	r3, r3, r7
 8004236:	2201      	movs	r2, #1
 8004238:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	226a      	movs	r2, #106	@ 0x6a
 800423e:	2101      	movs	r1, #1
 8004240:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	2268      	movs	r2, #104	@ 0x68
 8004246:	2101      	movs	r1, #1
 8004248:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	2200      	movs	r2, #0
 800424e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	2200      	movs	r2, #0
 8004254:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004256:	231a      	movs	r3, #26
 8004258:	2220      	movs	r2, #32
 800425a:	189b      	adds	r3, r3, r2
 800425c:	19db      	adds	r3, r3, r7
 800425e:	781b      	ldrb	r3, [r3, #0]
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b010      	add	sp, #64	@ 0x40
 8004266:	bdb0      	pop	{r4, r5, r7, pc}
 8004268:	40008000 	.word	0x40008000
 800426c:	40008400 	.word	0x40008400
 8004270:	00f42400 	.word	0x00f42400
 8004274:	08005000 	.word	0x08005000

08004278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	2208      	movs	r2, #8
 8004286:	4013      	ands	r3, r2
 8004288:	d00b      	beq.n	80042a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a4a      	ldr	r2, [pc, #296]	@ (80043bc <UART_AdvFeatureConfig+0x144>)
 8004292:	4013      	ands	r3, r2
 8004294:	0019      	movs	r1, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	2201      	movs	r2, #1
 80042a8:	4013      	ands	r3, r2
 80042aa:	d00b      	beq.n	80042c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4a43      	ldr	r2, [pc, #268]	@ (80043c0 <UART_AdvFeatureConfig+0x148>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	2202      	movs	r2, #2
 80042ca:	4013      	ands	r3, r2
 80042cc:	d00b      	beq.n	80042e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a3b      	ldr	r2, [pc, #236]	@ (80043c4 <UART_AdvFeatureConfig+0x14c>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	0019      	movs	r1, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	2204      	movs	r2, #4
 80042ec:	4013      	ands	r3, r2
 80042ee:	d00b      	beq.n	8004308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4a34      	ldr	r2, [pc, #208]	@ (80043c8 <UART_AdvFeatureConfig+0x150>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	2210      	movs	r2, #16
 800430e:	4013      	ands	r3, r2
 8004310:	d00b      	beq.n	800432a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4a2c      	ldr	r2, [pc, #176]	@ (80043cc <UART_AdvFeatureConfig+0x154>)
 800431a:	4013      	ands	r3, r2
 800431c:	0019      	movs	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	2220      	movs	r2, #32
 8004330:	4013      	ands	r3, r2
 8004332:	d00b      	beq.n	800434c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4a25      	ldr	r2, [pc, #148]	@ (80043d0 <UART_AdvFeatureConfig+0x158>)
 800433c:	4013      	ands	r3, r2
 800433e:	0019      	movs	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004350:	2240      	movs	r2, #64	@ 0x40
 8004352:	4013      	ands	r3, r2
 8004354:	d01d      	beq.n	8004392 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4a1d      	ldr	r2, [pc, #116]	@ (80043d4 <UART_AdvFeatureConfig+0x15c>)
 800435e:	4013      	ands	r3, r2
 8004360:	0019      	movs	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004372:	2380      	movs	r3, #128	@ 0x80
 8004374:	035b      	lsls	r3, r3, #13
 8004376:	429a      	cmp	r2, r3
 8004378:	d10b      	bne.n	8004392 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a15      	ldr	r2, [pc, #84]	@ (80043d8 <UART_AdvFeatureConfig+0x160>)
 8004382:	4013      	ands	r3, r2
 8004384:	0019      	movs	r1, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	2280      	movs	r2, #128	@ 0x80
 8004398:	4013      	ands	r3, r2
 800439a:	d00b      	beq.n	80043b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4a0e      	ldr	r2, [pc, #56]	@ (80043dc <UART_AdvFeatureConfig+0x164>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	0019      	movs	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]
  }
}
 80043b4:	46c0      	nop			@ (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b002      	add	sp, #8
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	ffff7fff 	.word	0xffff7fff
 80043c0:	fffdffff 	.word	0xfffdffff
 80043c4:	fffeffff 	.word	0xfffeffff
 80043c8:	fffbffff 	.word	0xfffbffff
 80043cc:	ffffefff 	.word	0xffffefff
 80043d0:	ffffdfff 	.word	0xffffdfff
 80043d4:	ffefffff 	.word	0xffefffff
 80043d8:	ff9fffff 	.word	0xff9fffff
 80043dc:	fff7ffff 	.word	0xfff7ffff

080043e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b092      	sub	sp, #72	@ 0x48
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2290      	movs	r2, #144	@ 0x90
 80043ec:	2100      	movs	r1, #0
 80043ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043f0:	f7fd fa6a 	bl	80018c8 <HAL_GetTick>
 80043f4:	0003      	movs	r3, r0
 80043f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2208      	movs	r2, #8
 8004400:	4013      	ands	r3, r2
 8004402:	2b08      	cmp	r3, #8
 8004404:	d12d      	bne.n	8004462 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004408:	2280      	movs	r2, #128	@ 0x80
 800440a:	0391      	lsls	r1, r2, #14
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4a47      	ldr	r2, [pc, #284]	@ (800452c <UART_CheckIdleState+0x14c>)
 8004410:	9200      	str	r2, [sp, #0]
 8004412:	2200      	movs	r2, #0
 8004414:	f000 f88e 	bl	8004534 <UART_WaitOnFlagUntilTimeout>
 8004418:	1e03      	subs	r3, r0, #0
 800441a:	d022      	beq.n	8004462 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800441c:	f3ef 8310 	mrs	r3, PRIMASK
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004424:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004426:	2301      	movs	r3, #1
 8004428:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442c:	f383 8810 	msr	PRIMASK, r3
}
 8004430:	46c0      	nop			@ (mov r8, r8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2180      	movs	r1, #128	@ 0x80
 800443e:	438a      	bics	r2, r1
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004448:	f383 8810 	msr	PRIMASK, r3
}
 800444c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2288      	movs	r2, #136	@ 0x88
 8004452:	2120      	movs	r1, #32
 8004454:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2284      	movs	r2, #132	@ 0x84
 800445a:	2100      	movs	r1, #0
 800445c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e060      	b.n	8004524 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2204      	movs	r2, #4
 800446a:	4013      	ands	r3, r2
 800446c:	2b04      	cmp	r3, #4
 800446e:	d146      	bne.n	80044fe <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004472:	2280      	movs	r2, #128	@ 0x80
 8004474:	03d1      	lsls	r1, r2, #15
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	4a2c      	ldr	r2, [pc, #176]	@ (800452c <UART_CheckIdleState+0x14c>)
 800447a:	9200      	str	r2, [sp, #0]
 800447c:	2200      	movs	r2, #0
 800447e:	f000 f859 	bl	8004534 <UART_WaitOnFlagUntilTimeout>
 8004482:	1e03      	subs	r3, r0, #0
 8004484:	d03b      	beq.n	80044fe <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004486:	f3ef 8310 	mrs	r3, PRIMASK
 800448a:	60fb      	str	r3, [r7, #12]
  return(result);
 800448c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800448e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004490:	2301      	movs	r3, #1
 8004492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f383 8810 	msr	PRIMASK, r3
}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4922      	ldr	r1, [pc, #136]	@ (8004530 <UART_CheckIdleState+0x150>)
 80044a8:	400a      	ands	r2, r1
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f383 8810 	msr	PRIMASK, r3
}
 80044b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b8:	f3ef 8310 	mrs	r3, PRIMASK
 80044bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80044be:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044c2:	2301      	movs	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f383 8810 	msr	PRIMASK, r3
}
 80044cc:	46c0      	nop			@ (mov r8, r8)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2101      	movs	r1, #1
 80044da:	438a      	bics	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
 80044de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f383 8810 	msr	PRIMASK, r3
}
 80044e8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	228c      	movs	r2, #140	@ 0x8c
 80044ee:	2120      	movs	r1, #32
 80044f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2284      	movs	r2, #132	@ 0x84
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e012      	b.n	8004524 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2288      	movs	r2, #136	@ 0x88
 8004502:	2120      	movs	r1, #32
 8004504:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	228c      	movs	r2, #140	@ 0x8c
 800450a:	2120      	movs	r1, #32
 800450c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2284      	movs	r2, #132	@ 0x84
 800451e:	2100      	movs	r1, #0
 8004520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	0018      	movs	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	b010      	add	sp, #64	@ 0x40
 800452a:	bd80      	pop	{r7, pc}
 800452c:	01ffffff 	.word	0x01ffffff
 8004530:	fffffedf 	.word	0xfffffedf

08004534 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	1dfb      	adds	r3, r7, #7
 8004542:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004544:	e051      	b.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	3301      	adds	r3, #1
 800454a:	d04e      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454c:	f7fd f9bc 	bl	80018c8 <HAL_GetTick>
 8004550:	0002      	movs	r2, r0
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	429a      	cmp	r2, r3
 800455a:	d302      	bcc.n	8004562 <UART_WaitOnFlagUntilTimeout+0x2e>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e051      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2204      	movs	r2, #4
 800456e:	4013      	ands	r3, r2
 8004570:	d03b      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb6>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b80      	cmp	r3, #128	@ 0x80
 8004576:	d038      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb6>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b40      	cmp	r3, #64	@ 0x40
 800457c:	d035      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	2208      	movs	r2, #8
 8004586:	4013      	ands	r3, r2
 8004588:	2b08      	cmp	r3, #8
 800458a:	d111      	bne.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2208      	movs	r2, #8
 8004592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	0018      	movs	r0, r3
 8004598:	f000 f922 	bl	80047e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2290      	movs	r2, #144	@ 0x90
 80045a0:	2108      	movs	r1, #8
 80045a2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2284      	movs	r2, #132	@ 0x84
 80045a8:	2100      	movs	r1, #0
 80045aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e02c      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	2380      	movs	r3, #128	@ 0x80
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	401a      	ands	r2, r3
 80045bc:	2380      	movs	r3, #128	@ 0x80
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d112      	bne.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2280      	movs	r2, #128	@ 0x80
 80045ca:	0112      	lsls	r2, r2, #4
 80045cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 f905 	bl	80047e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2290      	movs	r2, #144	@ 0x90
 80045da:	2120      	movs	r1, #32
 80045dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2284      	movs	r2, #132	@ 0x84
 80045e2:	2100      	movs	r1, #0
 80045e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e00f      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	4013      	ands	r3, r2
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	425a      	negs	r2, r3
 80045fa:	4153      	adcs	r3, r2
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	001a      	movs	r2, r3
 8004600:	1dfb      	adds	r3, r7, #7
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d09e      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b004      	add	sp, #16
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b090      	sub	sp, #64	@ 0x40
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	1dbb      	adds	r3, r7, #6
 8004620:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1dba      	adds	r2, r7, #6
 800462c:	215c      	movs	r1, #92	@ 0x5c
 800462e:	8812      	ldrh	r2, [r2, #0]
 8004630:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2290      	movs	r2, #144	@ 0x90
 8004636:	2100      	movs	r1, #0
 8004638:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	228c      	movs	r2, #140	@ 0x8c
 800463e:	2122      	movs	r1, #34	@ 0x22
 8004640:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2280      	movs	r2, #128	@ 0x80
 8004646:	589b      	ldr	r3, [r3, r2]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02d      	beq.n	80046a8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2280      	movs	r2, #128	@ 0x80
 8004650:	589b      	ldr	r3, [r3, r2]
 8004652:	4a40      	ldr	r2, [pc, #256]	@ (8004754 <UART_Start_Receive_DMA+0x140>)
 8004654:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2280      	movs	r2, #128	@ 0x80
 800465a:	589b      	ldr	r3, [r3, r2]
 800465c:	4a3e      	ldr	r2, [pc, #248]	@ (8004758 <UART_Start_Receive_DMA+0x144>)
 800465e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2280      	movs	r2, #128	@ 0x80
 8004664:	589b      	ldr	r3, [r3, r2]
 8004666:	4a3d      	ldr	r2, [pc, #244]	@ (800475c <UART_Start_Receive_DMA+0x148>)
 8004668:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2280      	movs	r2, #128	@ 0x80
 800466e:	589b      	ldr	r3, [r3, r2]
 8004670:	2200      	movs	r2, #0
 8004672:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2280      	movs	r2, #128	@ 0x80
 8004678:	5898      	ldr	r0, [r3, r2]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3324      	adds	r3, #36	@ 0x24
 8004680:	0019      	movs	r1, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004686:	001a      	movs	r2, r3
 8004688:	1dbb      	adds	r3, r7, #6
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	f7fd fac6 	bl	8001c1c <HAL_DMA_Start_IT>
 8004690:	1e03      	subs	r3, r0, #0
 8004692:	d009      	beq.n	80046a8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2290      	movs	r2, #144	@ 0x90
 8004698:	2110      	movs	r1, #16
 800469a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	228c      	movs	r2, #140	@ 0x8c
 80046a0:	2120      	movs	r1, #32
 80046a2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e050      	b.n	800474a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d019      	beq.n	80046e4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b0:	f3ef 8310 	mrs	r3, PRIMASK
 80046b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046ba:	2301      	movs	r3, #1
 80046bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c0:	f383 8810 	msr	PRIMASK, r3
}
 80046c4:	46c0      	nop			@ (mov r8, r8)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2180      	movs	r1, #128	@ 0x80
 80046d2:	0049      	lsls	r1, r1, #1
 80046d4:	430a      	orrs	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046da:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	f383 8810 	msr	PRIMASK, r3
}
 80046e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e4:	f3ef 8310 	mrs	r3, PRIMASK
 80046e8:	613b      	str	r3, [r7, #16]
  return(result);
 80046ea:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046ee:	2301      	movs	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f383 8810 	msr	PRIMASK, r3
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2101      	movs	r1, #1
 8004706:	430a      	orrs	r2, r1
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f383 8810 	msr	PRIMASK, r3
}
 8004714:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004716:	f3ef 8310 	mrs	r3, PRIMASK
 800471a:	61fb      	str	r3, [r7, #28]
  return(result);
 800471c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004720:	2301      	movs	r3, #1
 8004722:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f383 8810 	msr	PRIMASK, r3
}
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2140      	movs	r1, #64	@ 0x40
 8004738:	430a      	orrs	r2, r1
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	f383 8810 	msr	PRIMASK, r3
}
 8004746:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	0018      	movs	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	b010      	add	sp, #64	@ 0x40
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	08004965 	.word	0x08004965
 8004758:	08004a95 	.word	0x08004a95
 800475c:	08004ad7 	.word	0x08004ad7

08004760 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	@ 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004768:	f3ef 8310 	mrs	r3, PRIMASK
 800476c:	60bb      	str	r3, [r7, #8]
  return(result);
 800476e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
 8004772:	2301      	movs	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f383 8810 	msr	PRIMASK, r3
}
 800477c:	46c0      	nop			@ (mov r8, r8)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	21c0      	movs	r1, #192	@ 0xc0
 800478a:	438a      	bics	r2, r1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f383 8810 	msr	PRIMASK, r3
}
 8004798:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800479a:	f3ef 8310 	mrs	r3, PRIMASK
 800479e:	617b      	str	r3, [r7, #20]
  return(result);
 80047a0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	2301      	movs	r3, #1
 80047a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	f383 8810 	msr	PRIMASK, r3
}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4908      	ldr	r1, [pc, #32]	@ (80047dc <UART_EndTxTransfer+0x7c>)
 80047bc:	400a      	ands	r2, r1
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f383 8810 	msr	PRIMASK, r3
}
 80047ca:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2288      	movs	r2, #136	@ 0x88
 80047d0:	2120      	movs	r1, #32
 80047d2:	5099      	str	r1, [r3, r2]
}
 80047d4:	46c0      	nop			@ (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b00a      	add	sp, #40	@ 0x28
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	ff7fffff 	.word	0xff7fffff

080047e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08e      	sub	sp, #56	@ 0x38
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e8:	f3ef 8310 	mrs	r3, PRIMASK
 80047ec:	617b      	str	r3, [r7, #20]
  return(result);
 80047ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047f2:	2301      	movs	r3, #1
 80047f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f383 8810 	msr	PRIMASK, r3
}
 80047fc:	46c0      	nop			@ (mov r8, r8)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4926      	ldr	r1, [pc, #152]	@ (80048a4 <UART_EndRxTransfer+0xc4>)
 800480a:	400a      	ands	r2, r1
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	f383 8810 	msr	PRIMASK, r3
}
 8004818:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800481a:	f3ef 8310 	mrs	r3, PRIMASK
 800481e:	623b      	str	r3, [r7, #32]
  return(result);
 8004820:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004822:	633b      	str	r3, [r7, #48]	@ 0x30
 8004824:	2301      	movs	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	f383 8810 	msr	PRIMASK, r3
}
 800482e:	46c0      	nop			@ (mov r8, r8)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	491b      	ldr	r1, [pc, #108]	@ (80048a8 <UART_EndRxTransfer+0xc8>)
 800483c:	400a      	ands	r2, r1
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004842:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004846:	f383 8810 	msr	PRIMASK, r3
}
 800484a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d118      	bne.n	8004886 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004854:	f3ef 8310 	mrs	r3, PRIMASK
 8004858:	60bb      	str	r3, [r7, #8]
  return(result);
 800485a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800485e:	2301      	movs	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f383 8810 	msr	PRIMASK, r3
}
 8004868:	46c0      	nop			@ (mov r8, r8)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2110      	movs	r1, #16
 8004876:	438a      	bics	r2, r1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f383 8810 	msr	PRIMASK, r3
}
 8004884:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	228c      	movs	r2, #140	@ 0x8c
 800488a:	2120      	movs	r1, #32
 800488c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	b00e      	add	sp, #56	@ 0x38
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	fffffedf 	.word	0xfffffedf
 80048a8:	effffffe 	.word	0xeffffffe

080048ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08c      	sub	sp, #48	@ 0x30
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2220      	movs	r2, #32
 80048c2:	4013      	ands	r3, r2
 80048c4:	d135      	bne.n	8004932 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80048c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c8:	2256      	movs	r2, #86	@ 0x56
 80048ca:	2100      	movs	r1, #0
 80048cc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ce:	f3ef 8310 	mrs	r3, PRIMASK
 80048d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80048d4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d8:	2301      	movs	r3, #1
 80048da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f383 8810 	msr	PRIMASK, r3
}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2180      	movs	r1, #128	@ 0x80
 80048f0:	438a      	bics	r2, r1
 80048f2:	609a      	str	r2, [r3, #8]
 80048f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f383 8810 	msr	PRIMASK, r3
}
 80048fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004900:	f3ef 8310 	mrs	r3, PRIMASK
 8004904:	61bb      	str	r3, [r7, #24]
  return(result);
 8004906:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004908:	627b      	str	r3, [r7, #36]	@ 0x24
 800490a:	2301      	movs	r3, #1
 800490c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f383 8810 	msr	PRIMASK, r3
}
 8004914:	46c0      	nop			@ (mov r8, r8)
 8004916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2140      	movs	r1, #64	@ 0x40
 8004922:	430a      	orrs	r2, r1
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f383 8810 	msr	PRIMASK, r3
}
 8004930:	e004      	b.n	800493c <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8004932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004934:	0018      	movs	r0, r3
 8004936:	f7fb ff1f 	bl	8000778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	46c0      	nop			@ (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b00c      	add	sp, #48	@ 0x30
 8004942:	bd80      	pop	{r7, pc}

08004944 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	0018      	movs	r0, r3
 8004956:	f7ff f929 	bl	8003bac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	b004      	add	sp, #16
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b094      	sub	sp, #80	@ 0x50
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004970:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2220      	movs	r2, #32
 800497a:	4013      	ands	r3, r2
 800497c:	d16f      	bne.n	8004a5e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800497e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004980:	225e      	movs	r2, #94	@ 0x5e
 8004982:	2100      	movs	r1, #0
 8004984:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004986:	f3ef 8310 	mrs	r3, PRIMASK
 800498a:	61bb      	str	r3, [r7, #24]
  return(result);
 800498c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800498e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004990:	2301      	movs	r3, #1
 8004992:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f383 8810 	msr	PRIMASK, r3
}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	493a      	ldr	r1, [pc, #232]	@ (8004a90 <UART_DMAReceiveCplt+0x12c>)
 80049a8:	400a      	ands	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	f383 8810 	msr	PRIMASK, r3
}
 80049b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b8:	f3ef 8310 	mrs	r3, PRIMASK
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049c2:	2301      	movs	r3, #1
 80049c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c8:	f383 8810 	msr	PRIMASK, r3
}
 80049cc:	46c0      	nop			@ (mov r8, r8)
 80049ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2101      	movs	r1, #1
 80049da:	438a      	bics	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
 80049de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e4:	f383 8810 	msr	PRIMASK, r3
}
 80049e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ea:	f3ef 8310 	mrs	r3, PRIMASK
 80049ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80049f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80049f4:	2301      	movs	r3, #1
 80049f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fa:	f383 8810 	msr	PRIMASK, r3
}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2140      	movs	r1, #64	@ 0x40
 8004a0c:	438a      	bics	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a1e:	228c      	movs	r2, #140	@ 0x8c
 8004a20:	2120      	movs	r1, #32
 8004a22:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d118      	bne.n	8004a5e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a30:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a32:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a36:	2301      	movs	r3, #1
 8004a38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			@ (mov r8, r8)
 8004a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2110      	movs	r1, #16
 8004a4e:	438a      	bics	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f383 8810 	msr	PRIMASK, r3
}
 8004a5c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a60:	2200      	movs	r2, #0
 8004a62:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d108      	bne.n	8004a7e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a6e:	225c      	movs	r2, #92	@ 0x5c
 8004a70:	5a9a      	ldrh	r2, [r3, r2]
 8004a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a74:	0011      	movs	r1, r2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f7fb fe42 	bl	8000700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a7c:	e003      	b.n	8004a86 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7fc f85d 	bl	8000b40 <HAL_UART_RxCpltCallback>
}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	b014      	add	sp, #80	@ 0x50
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	46c0      	nop			@ (mov r8, r8)
 8004a90:	fffffeff 	.word	0xfffffeff

08004a94 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d10a      	bne.n	8004ac6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	225c      	movs	r2, #92	@ 0x5c
 8004ab4:	5a9b      	ldrh	r3, [r3, r2]
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	0011      	movs	r1, r2
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f7fb fe1e 	bl	8000700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ac4:	e003      	b.n	8004ace <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fc f849 	bl	8000b60 <HAL_UART_RxHalfCpltCallback>
}
 8004ace:	46c0      	nop			@ (mov r8, r8)
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b004      	add	sp, #16
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b086      	sub	sp, #24
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2288      	movs	r2, #136	@ 0x88
 8004ae8:	589b      	ldr	r3, [r3, r2]
 8004aea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	228c      	movs	r2, #140	@ 0x8c
 8004af0:	589b      	ldr	r3, [r3, r2]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2280      	movs	r2, #128	@ 0x80
 8004afc:	4013      	ands	r3, r2
 8004afe:	2b80      	cmp	r3, #128	@ 0x80
 8004b00:	d10a      	bne.n	8004b18 <UART_DMAError+0x42>
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b21      	cmp	r3, #33	@ 0x21
 8004b06:	d107      	bne.n	8004b18 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2256      	movs	r2, #86	@ 0x56
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f7ff fe24 	bl	8004760 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2240      	movs	r2, #64	@ 0x40
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b40      	cmp	r3, #64	@ 0x40
 8004b24:	d10a      	bne.n	8004b3c <UART_DMAError+0x66>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b22      	cmp	r3, #34	@ 0x22
 8004b2a:	d107      	bne.n	8004b3c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	225e      	movs	r2, #94	@ 0x5e
 8004b30:	2100      	movs	r1, #0
 8004b32:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f7ff fe52 	bl	80047e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2290      	movs	r2, #144	@ 0x90
 8004b40:	589b      	ldr	r3, [r3, r2]
 8004b42:	2210      	movs	r2, #16
 8004b44:	431a      	orrs	r2, r3
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2190      	movs	r1, #144	@ 0x90
 8004b4a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7ff f834 	bl	8003bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b54:	46c0      	nop			@ (mov r8, r8)
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b006      	add	sp, #24
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	225e      	movs	r2, #94	@ 0x5e
 8004b6e:	2100      	movs	r1, #0
 8004b70:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2256      	movs	r2, #86	@ 0x56
 8004b76:	2100      	movs	r1, #0
 8004b78:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7ff f81d 	bl	8003bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b004      	add	sp, #16
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b086      	sub	sp, #24
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b92:	f3ef 8310 	mrs	r3, PRIMASK
 8004b96:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b98:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2140      	movs	r1, #64	@ 0x40
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f383 8810 	msr	PRIMASK, r3
}
 8004bc2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2288      	movs	r2, #136	@ 0x88
 8004bc8:	2120      	movs	r1, #32
 8004bca:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7fb fdcf 	bl	8000778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bda:	46c0      	nop			@ (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b006      	add	sp, #24
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b002      	add	sp, #8
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004bfa:	46c0      	nop			@ (mov r8, r8)
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b002      	add	sp, #8
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b002      	add	sp, #8
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2284      	movs	r2, #132	@ 0x84
 8004c20:	5c9b      	ldrb	r3, [r3, r2]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_UARTEx_DisableFifoMode+0x16>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e027      	b.n	8004c7a <HAL_UARTEx_DisableFifoMode+0x66>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2284      	movs	r2, #132	@ 0x84
 8004c2e:	2101      	movs	r1, #1
 8004c30:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2288      	movs	r2, #136	@ 0x88
 8004c36:	2124      	movs	r1, #36	@ 0x24
 8004c38:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	438a      	bics	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4a0b      	ldr	r2, [pc, #44]	@ (8004c84 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2288      	movs	r2, #136	@ 0x88
 8004c6c:	2120      	movs	r1, #32
 8004c6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2284      	movs	r2, #132	@ 0x84
 8004c74:	2100      	movs	r1, #0
 8004c76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b004      	add	sp, #16
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			@ (mov r8, r8)
 8004c84:	dfffffff 	.word	0xdfffffff

08004c88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2284      	movs	r2, #132	@ 0x84
 8004c96:	5c9b      	ldrb	r3, [r3, r2]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e02e      	b.n	8004cfe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2284      	movs	r2, #132	@ 0x84
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2288      	movs	r2, #136	@ 0x88
 8004cac:	2124      	movs	r1, #36	@ 0x24
 8004cae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	438a      	bics	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	08d9      	lsrs	r1, r3, #3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f000 f8bc 	bl	8004e5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2288      	movs	r2, #136	@ 0x88
 8004cf0:	2120      	movs	r1, #32
 8004cf2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2284      	movs	r2, #132	@ 0x84
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	0018      	movs	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b004      	add	sp, #16
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2284      	movs	r2, #132	@ 0x84
 8004d16:	5c9b      	ldrb	r3, [r3, r2]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e02f      	b.n	8004d80 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2284      	movs	r2, #132	@ 0x84
 8004d24:	2101      	movs	r1, #1
 8004d26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2288      	movs	r2, #136	@ 0x88
 8004d2c:	2124      	movs	r1, #36	@ 0x24
 8004d2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2101      	movs	r1, #1
 8004d44:	438a      	bics	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d88 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	0019      	movs	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 f87b 	bl	8004e5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2288      	movs	r2, #136	@ 0x88
 8004d72:	2120      	movs	r1, #32
 8004d74:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2284      	movs	r2, #132	@ 0x84
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	0018      	movs	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b004      	add	sp, #16
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	f1ffffff 	.word	0xf1ffffff

08004d8c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d8c:	b5b0      	push	{r4, r5, r7, lr}
 8004d8e:	b08a      	sub	sp, #40	@ 0x28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	1dbb      	adds	r3, r7, #6
 8004d98:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	228c      	movs	r2, #140	@ 0x8c
 8004d9e:	589b      	ldr	r3, [r3, r2]
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d156      	bne.n	8004e52 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004daa:	1dbb      	adds	r3, r7, #6
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e04e      	b.n	8004e54 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	2380      	movs	r3, #128	@ 0x80
 8004dbc:	015b      	lsls	r3, r3, #5
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d109      	bne.n	8004dd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d001      	beq.n	8004dd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e03e      	b.n	8004e54 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004de2:	2527      	movs	r5, #39	@ 0x27
 8004de4:	197c      	adds	r4, r7, r5
 8004de6:	1dbb      	adds	r3, r7, #6
 8004de8:	881a      	ldrh	r2, [r3, #0]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7ff fc10 	bl	8004614 <UART_Start_Receive_DMA>
 8004df4:	0003      	movs	r3, r0
 8004df6:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004df8:	197b      	adds	r3, r7, r5
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d124      	bne.n	8004e4a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d11c      	bne.n	8004e42 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e10:	f3ef 8310 	mrs	r3, PRIMASK
 8004e14:	617b      	str	r3, [r7, #20]
  return(result);
 8004e16:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e18:	623b      	str	r3, [r7, #32]
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f383 8810 	msr	PRIMASK, r3
}
 8004e24:	46c0      	nop			@ (mov r8, r8)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2110      	movs	r1, #16
 8004e32:	430a      	orrs	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f383 8810 	msr	PRIMASK, r3
}
 8004e40:	e003      	b.n	8004e4a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004e42:	2327      	movs	r3, #39	@ 0x27
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	2201      	movs	r2, #1
 8004e48:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004e4a:	2327      	movs	r3, #39	@ 0x27
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	e000      	b.n	8004e54 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004e52:	2302      	movs	r3, #2
  }
}
 8004e54:	0018      	movs	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b00a      	add	sp, #40	@ 0x28
 8004e5a:	bdb0      	pop	{r4, r5, r7, pc}

08004e5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d108      	bne.n	8004e7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	226a      	movs	r2, #106	@ 0x6a
 8004e70:	2101      	movs	r1, #1
 8004e72:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2268      	movs	r2, #104	@ 0x68
 8004e78:	2101      	movs	r1, #1
 8004e7a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e7c:	e043      	b.n	8004f06 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e7e:	260f      	movs	r6, #15
 8004e80:	19bb      	adds	r3, r7, r6
 8004e82:	2208      	movs	r2, #8
 8004e84:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e86:	200e      	movs	r0, #14
 8004e88:	183b      	adds	r3, r7, r0
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	0e5b      	lsrs	r3, r3, #25
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	240d      	movs	r4, #13
 8004e9a:	193b      	adds	r3, r7, r4
 8004e9c:	2107      	movs	r1, #7
 8004e9e:	400a      	ands	r2, r1
 8004ea0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	0f5b      	lsrs	r3, r3, #29
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	250c      	movs	r5, #12
 8004eae:	197b      	adds	r3, r7, r5
 8004eb0:	2107      	movs	r1, #7
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004eb6:	183b      	adds	r3, r7, r0
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	197a      	adds	r2, r7, r5
 8004ebc:	7812      	ldrb	r2, [r2, #0]
 8004ebe:	4914      	ldr	r1, [pc, #80]	@ (8004f10 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ec0:	5c8a      	ldrb	r2, [r1, r2]
 8004ec2:	435a      	muls	r2, r3
 8004ec4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ec6:	197b      	adds	r3, r7, r5
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	4a12      	ldr	r2, [pc, #72]	@ (8004f14 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ecc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ece:	0019      	movs	r1, r3
 8004ed0:	f7fb f9a2 	bl	8000218 <__divsi3>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	b299      	uxth	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	226a      	movs	r2, #106	@ 0x6a
 8004edc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ede:	19bb      	adds	r3, r7, r6
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	193a      	adds	r2, r7, r4
 8004ee4:	7812      	ldrb	r2, [r2, #0]
 8004ee6:	490a      	ldr	r1, [pc, #40]	@ (8004f10 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ee8:	5c8a      	ldrb	r2, [r1, r2]
 8004eea:	435a      	muls	r2, r3
 8004eec:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004eee:	193b      	adds	r3, r7, r4
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	4a08      	ldr	r2, [pc, #32]	@ (8004f14 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ef4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ef6:	0019      	movs	r1, r3
 8004ef8:	f7fb f98e 	bl	8000218 <__divsi3>
 8004efc:	0003      	movs	r3, r0
 8004efe:	b299      	uxth	r1, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2268      	movs	r2, #104	@ 0x68
 8004f04:	5299      	strh	r1, [r3, r2]
}
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b005      	add	sp, #20
 8004f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	08005018 	.word	0x08005018
 8004f14:	08005020 	.word	0x08005020

08004f18 <memset>:
 8004f18:	0003      	movs	r3, r0
 8004f1a:	1882      	adds	r2, r0, r2
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d100      	bne.n	8004f22 <memset+0xa>
 8004f20:	4770      	bx	lr
 8004f22:	7019      	strb	r1, [r3, #0]
 8004f24:	3301      	adds	r3, #1
 8004f26:	e7f9      	b.n	8004f1c <memset+0x4>

08004f28 <__libc_init_array>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	4c0c      	ldr	r4, [pc, #48]	@ (8004f60 <__libc_init_array+0x38>)
 8004f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004f64 <__libc_init_array+0x3c>)
 8004f30:	1b64      	subs	r4, r4, r5
 8004f32:	10a4      	asrs	r4, r4, #2
 8004f34:	42a6      	cmp	r6, r4
 8004f36:	d109      	bne.n	8004f4c <__libc_init_array+0x24>
 8004f38:	2600      	movs	r6, #0
 8004f3a:	f000 f819 	bl	8004f70 <_init>
 8004f3e:	4c0a      	ldr	r4, [pc, #40]	@ (8004f68 <__libc_init_array+0x40>)
 8004f40:	4d0a      	ldr	r5, [pc, #40]	@ (8004f6c <__libc_init_array+0x44>)
 8004f42:	1b64      	subs	r4, r4, r5
 8004f44:	10a4      	asrs	r4, r4, #2
 8004f46:	42a6      	cmp	r6, r4
 8004f48:	d105      	bne.n	8004f56 <__libc_init_array+0x2e>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	00b3      	lsls	r3, r6, #2
 8004f4e:	58eb      	ldr	r3, [r5, r3]
 8004f50:	4798      	blx	r3
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7ee      	b.n	8004f34 <__libc_init_array+0xc>
 8004f56:	00b3      	lsls	r3, r6, #2
 8004f58:	58eb      	ldr	r3, [r5, r3]
 8004f5a:	4798      	blx	r3
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	e7f2      	b.n	8004f46 <__libc_init_array+0x1e>
 8004f60:	08005030 	.word	0x08005030
 8004f64:	08005030 	.word	0x08005030
 8004f68:	08005034 	.word	0x08005034
 8004f6c:	08005030 	.word	0x08005030

08004f70 <_init>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr

08004f7c <_fini>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	46c0      	nop			@ (mov r8, r8)
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr
