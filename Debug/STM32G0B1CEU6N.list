
STM32G0B1CEU6N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b84  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004c40  08004c40  00005c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc8  08004cc8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004cc8  08004cc8  00005cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd0  08004cd0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd0  08004cd0  00005cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cd4  08004cd4  00005cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004cd8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  2000000c  08004ce4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c10  08004ce4  00006c10  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb1a  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002095  00000000  00000000  00012b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00014be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007af  00000000  00000000  000155f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e22  00000000  00000000  00015d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfcf  00000000  00000000  00017bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad524  00000000  00000000  00025b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d30b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002218  00000000  00000000  000d30f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d5310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004c28 	.word	0x08004c28

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004c28 	.word	0x08004c28

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <MX_DMA_Init+0x70>)
 8000624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000626:	4b19      	ldr	r3, [pc, #100]	@ (800068c <MX_DMA_Init+0x70>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	639a      	str	r2, [r3, #56]	@ 0x38
 800062e:	4b17      	ldr	r3, [pc, #92]	@ (800068c <MX_DMA_Init+0x70>)
 8000630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800063a:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_DMA_Init+0x70>)
 800063c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800063e:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_DMA_Init+0x70>)
 8000640:	2102      	movs	r1, #2
 8000642:	430a      	orrs	r2, r1
 8000644:	639a      	str	r2, [r3, #56]	@ 0x38
 8000646:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_DMA_Init+0x70>)
 8000648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800064a:	2202      	movs	r2, #2
 800064c:	4013      	ands	r3, r2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2009      	movs	r0, #9
 8000658:	f001 f94c 	bl	80018f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800065c:	2009      	movs	r0, #9
 800065e:	f001 f95e 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	200a      	movs	r0, #10
 8000668:	f001 f944 	bl	80018f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800066c:	200a      	movs	r0, #10
 800066e:	f001 f956 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	200b      	movs	r0, #11
 8000678:	f001 f93c 	bl	80018f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 800067c:	200b      	movs	r0, #11
 800067e:	f001 f94e 	bl	800191e <HAL_NVIC_EnableIRQ>

}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	40021000 	.word	0x40021000

08000690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_GPIO_Init+0x70>)
 8000698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <MX_GPIO_Init+0x70>)
 800069c:	2120      	movs	r1, #32
 800069e:	430a      	orrs	r2, r1
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_GPIO_Init+0x70>)
 80006a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a6:	2220      	movs	r2, #32
 80006a8:	4013      	ands	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_GPIO_Init+0x70>)
 80006b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <MX_GPIO_Init+0x70>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_GPIO_Init+0x70>)
 80006bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006be:	2201      	movs	r2, #1
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_GPIO_Init+0x70>)
 80006c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_GPIO_Init+0x70>)
 80006cc:	2102      	movs	r1, #2
 80006ce:	430a      	orrs	r2, r1
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <MX_GPIO_Init+0x70>)
 80006d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d6:	2202      	movs	r2, #2
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <MX_GPIO_Init+0x70>)
 80006e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006e2:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <MX_GPIO_Init+0x70>)
 80006e4:	2108      	movs	r1, #8
 80006e6:	430a      	orrs	r2, r1
 80006e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ea:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <MX_GPIO_Init+0x70>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ee:	2208      	movs	r2, #8
 80006f0:	4013      	ands	r3, r2
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b004      	add	sp, #16
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	40021000 	.word	0x40021000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 ffac 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f81e 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f7ff ffbe 	bl	8000690 <MX_GPIO_Init>
  MX_DMA_Init();
 8000714:	f7ff ff82 	bl	800061c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000718:	f000 f982 	bl	8000a20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800071c:	f000 f9d2 	bl	8000ac4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000720:	f000 fa22 	bl	8000b68 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8000724:	f000 fa72 	bl	8000c0c <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 8000728:	f000 faa4 	bl	8000c74 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800072c:	f000 fad6 	bl	8000cdc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuffer, 1000);
 8000730:	23fa      	movs	r3, #250	@ 0xfa
 8000732:	009a      	lsls	r2, r3, #2
 8000734:	4903      	ldr	r1, [pc, #12]	@ (8000744 <main+0x40>)
 8000736:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <main+0x44>)
 8000738:	0018      	movs	r0, r3
 800073a:	f004 f983 	bl	8004a44 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	e7fd      	b.n	800073e <main+0x3a>
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	20000028 	.word	0x20000028
 8000748:	200004a8 	.word	0x200004a8

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b095      	sub	sp, #84	@ 0x54
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	2414      	movs	r4, #20
 8000754:	193b      	adds	r3, r7, r4
 8000756:	0018      	movs	r0, r3
 8000758:	233c      	movs	r3, #60	@ 0x3c
 800075a:	001a      	movs	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	f004 fa37 	bl	8004bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	0018      	movs	r0, r3
 8000766:	2310      	movs	r3, #16
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f004 fa30 	bl	8004bd0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2380      	movs	r3, #128	@ 0x80
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fdc3 	bl	8002300 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2201      	movs	r2, #1
 800077e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	0252      	lsls	r2, r2, #9
 8000786:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	0021      	movs	r1, r4
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2202      	movs	r2, #2
 800078e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2203      	movs	r2, #3
 8000794:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2210      	movs	r2, #16
 80007a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2280      	movs	r2, #128	@ 0x80
 80007a6:	0292      	lsls	r2, r2, #10
 80007a8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	0492      	lsls	r2, r2, #18
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2280      	movs	r2, #128	@ 0x80
 80007b6:	0592      	lsls	r2, r2, #22
 80007b8:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fdeb 	bl	8002398 <HAL_RCC_OscConfig>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007c6:	f000 f819 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2207      	movs	r2, #7
 80007ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2202      	movs	r2, #2
 80007d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2102      	movs	r1, #2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 f936 	bl	8002a58 <HAL_RCC_ClockConfig>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80007f0:	f000 f804 	bl	80007fc <Error_Handler>
  }
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b015      	add	sp, #84	@ 0x54
 80007fa:	bd90      	pop	{r4, r7, pc}

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	e7fd      	b.n	8000804 <Error_Handler+0x8>

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_MspInit+0x4c>)
 8000810:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <HAL_MspInit+0x4c>)
 8000814:	2101      	movs	r1, #1
 8000816:	430a      	orrs	r2, r1
 8000818:	641a      	str	r2, [r3, #64]	@ 0x40
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	2201      	movs	r2, #1
 8000820:	4013      	ands	r3, r2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <HAL_MspInit+0x4c>)
 8000828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <HAL_MspInit+0x4c>)
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	0549      	lsls	r1, r1, #21
 8000830:	430a      	orrs	r2, r1
 8000832:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <HAL_MspInit+0x4c>)
 8000836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	055b      	lsls	r3, r3, #21
 800083c:	4013      	ands	r3, r2
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000842:	23c0      	movs	r3, #192	@ 0xc0
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	0018      	movs	r0, r3
 8000848:	f000 ff92 	bl	8001770 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	e7fd      	b.n	800085c <NMI_Handler+0x4>

08000860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	e7fd      	b.n	8000864 <HardFault_Handler+0x4>

08000868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 ff5a 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000890:	4b03      	ldr	r3, [pc, #12]	@ (80008a0 <DMA1_Channel1_IRQHandler+0x14>)
 8000892:	0018      	movs	r0, r3
 8000894:	f001 fa5a 	bl	8001d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	2000078c 	.word	0x2000078c

080008a4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 fa4e 	bl	8001d4c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008b0:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <DMA1_Channel2_3_IRQHandler+0x20>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fa4a 	bl	8001d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	200007ec 	.word	0x200007ec
 80008c4:	2000084c 	.word	0x2000084c

080008c8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008cc:	4b13      	ldr	r3, [pc, #76]	@ (800091c <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x54>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fa3c 	bl	8001d4c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x58>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 fa38 	bl	8001d4c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x5c>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 fa34 	bl	8001d4c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80008e4:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x60>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 fa30 	bl	8001d4c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x64>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f001 fa2c 	bl	8001d4c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x68>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 fa28 	bl	8001d4c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart5_tx);
 80008fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x6c>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fa24 	bl	8001d4c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x70>)
 8000906:	0018      	movs	r0, r3
 8000908:	f001 fa20 	bl	8001d4c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x74>)
 800090e:	0018      	movs	r0, r3
 8000910:	f001 fa1c 	bl	8001d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	200008ac 	.word	0x200008ac
 8000920:	2000090c 	.word	0x2000090c
 8000924:	2000096c 	.word	0x2000096c
 8000928:	200009cc 	.word	0x200009cc
 800092c:	20000a2c 	.word	0x20000a2c
 8000930:	20000a8c 	.word	0x20000a8c
 8000934:	20000aec 	.word	0x20000aec
 8000938:	20000b4c 	.word	0x20000b4c
 800093c:	20000bac 	.word	0x20000bac

08000940 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <USART1_IRQHandler+0x14>)
 8000946:	0018      	movs	r0, r3
 8000948:	f002 fcc2 	bl	80032d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	20000414 	.word	0x20000414

08000958 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800095c:	4b03      	ldr	r3, [pc, #12]	@ (800096c <USART2_LPUART2_IRQHandler+0x14>)
 800095e:	0018      	movs	r0, r3
 8000960:	f002 fcb6 	bl	80032d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	200004a8 	.word	0x200004a8

08000970 <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <USART3_4_5_6_LPUART1_IRQHandler+0x2c>)
 8000976:	0018      	movs	r0, r3
 8000978:	f002 fcaa 	bl	80032d0 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <USART3_4_5_6_LPUART1_IRQHandler+0x30>)
 800097e:	0018      	movs	r0, r3
 8000980:	f002 fca6 	bl	80032d0 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <USART3_4_5_6_LPUART1_IRQHandler+0x34>)
 8000986:	0018      	movs	r0, r3
 8000988:	f002 fca2 	bl	80032d0 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart6);
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <USART3_4_5_6_LPUART1_IRQHandler+0x38>)
 800098e:	0018      	movs	r0, r3
 8000990:	f002 fc9e 	bl	80032d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	2000053c 	.word	0x2000053c
 80009a0:	200005d0 	.word	0x200005d0
 80009a4:	20000664 	.word	0x20000664
 80009a8:	200006f8 	.word	0x200006f8

080009ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	FullInit++;
 80009b4:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <HAL_UART_RxCpltCallback+0x1c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b02      	ldr	r3, [pc, #8]	@ (80009c8 <HAL_UART_RxCpltCallback+0x1c>)
 80009be:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(huart, pData, 10, 10);

}
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000410 	.word	0x20000410

080009cc <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	HalfInit++;
 80009d4:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <HAL_UART_RxHalfCpltCallback+0x1c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b02      	ldr	r3, [pc, #8]	@ (80009e8 <HAL_UART_RxHalfCpltCallback+0x1c>)
 80009de:	701a      	strb	r2, [r3, #0]

}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b002      	add	sp, #8
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000411 	.word	0x20000411

080009ec <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	000a      	movs	r2, r1
 80009f6:	1cbb      	adds	r3, r7, #2
 80009f8:	801a      	strh	r2, [r3, #0]
	IdleInit++;
 80009fa:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_UARTEx_RxEventCallback+0x24>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	3301      	adds	r3, #1
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <HAL_UARTEx_RxEventCallback+0x24>)
 8000a04:	701a      	strb	r2, [r3, #0]



}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	20000412 	.word	0x20000412

08000a14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a24:	4b24      	ldr	r3, [pc, #144]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a26:	4a25      	ldr	r2, [pc, #148]	@ (8000abc <MX_USART1_UART_Init+0x9c>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8000a2a:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a2c:	4a24      	ldr	r2, [pc, #144]	@ (8000ac0 <MX_USART1_UART_Init+0xa0>)
 8000a2e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a30:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a36:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a44:	220c      	movs	r2, #12
 8000a46:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a54:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a60:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a66:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f002 fbdb 	bl	8003224 <HAL_UART_Init>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000a72:	f7ff fec3 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000a76:	2380      	movs	r3, #128	@ 0x80
 8000a78:	05da      	lsls	r2, r3, #23
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f003 ff5e 	bl	8004940 <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000a88:	f7ff feb8 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	04da      	lsls	r2, r3, #19
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f003 ff93 	bl	80049c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000a9e:	f7ff fead 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aa2:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <MX_USART1_UART_Init+0x98>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f003 ff11 	bl	80048cc <HAL_UARTEx_DisableFifoMode>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000aae:	f7ff fea5 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000414 	.word	0x20000414
 8000abc:	40013800 	.word	0x40013800
 8000ac0:	001e8480 	.word	0x001e8480

08000ac4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000aca:	4a25      	ldr	r2, [pc, #148]	@ (8000b60 <MX_USART2_UART_Init+0x9c>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8000ace:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000ad0:	4a24      	ldr	r2, [pc, #144]	@ (8000b64 <MX_USART2_UART_Init+0xa0>)
 8000ad2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad4:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000ae8:	220c      	movs	r2, #12
 8000aea:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 fb89 	bl	8003224 <HAL_UART_Init>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000b16:	f7ff fe71 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000b1a:	2380      	movs	r3, #128	@ 0x80
 8000b1c:	05da      	lsls	r2, r3, #23
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000b20:	0011      	movs	r1, r2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f003 ff0c 	bl	8004940 <HAL_UARTEx_SetTxFifoThreshold>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000b2c:	f7ff fe66 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000b30:	2380      	movs	r3, #128	@ 0x80
 8000b32:	04da      	lsls	r2, r3, #19
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f003 ff41 	bl	80049c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3e:	1e03      	subs	r3, r0, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 8000b42:	f7ff fe5b 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b46:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <MX_USART2_UART_Init+0x98>)
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f003 febf 	bl	80048cc <HAL_UARTEx_DisableFifoMode>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 8000b52:	f7ff fe53 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200004a8 	.word	0x200004a8
 8000b60:	40004400 	.word	0x40004400
 8000b64:	001e8480 	.word	0x001e8480

08000b68 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000b6e:	4a25      	ldr	r2, [pc, #148]	@ (8000c04 <MX_USART3_UART_Init+0x9c>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000b72:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000b74:	4a24      	ldr	r2, [pc, #144]	@ (8000c08 <MX_USART3_UART_Init+0xa0>)
 8000b76:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b78:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000b8c:	220c      	movs	r2, #12
 8000b8e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f002 fb37 	bl	8003224 <HAL_UART_Init>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000bba:	f7ff fe1f 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000bbe:	2380      	movs	r3, #128	@ 0x80
 8000bc0:	05da      	lsls	r2, r3, #23
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f003 feba 	bl	8004940 <HAL_UARTEx_SetTxFifoThreshold>
 8000bcc:	1e03      	subs	r3, r0, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8000bd0:	f7ff fe14 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000bd4:	2380      	movs	r3, #128	@ 0x80
 8000bd6:	04da      	lsls	r2, r3, #19
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f003 feef 	bl	80049c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000be6:	f7ff fe09 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <MX_USART3_UART_Init+0x98>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f003 fe6d 	bl	80048cc <HAL_UARTEx_DisableFifoMode>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000bf6:	f7ff fe01 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000053c 	.word	0x2000053c
 8000c04:	40004800 	.word	0x40004800
 8000c08:	001e8480 	.word	0x001e8480

08000c0c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c12:	4a16      	ldr	r2, [pc, #88]	@ (8000c6c <MX_USART4_UART_Init+0x60>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c18:	4a15      	ldr	r2, [pc, #84]	@ (8000c70 <MX_USART4_UART_Init+0x64>)
 8000c1a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c30:	220c      	movs	r2, #12
 8000c32:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c52:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <MX_USART4_UART_Init+0x5c>)
 8000c54:	0018      	movs	r0, r3
 8000c56:	f002 fae5 	bl	8003224 <HAL_UART_Init>
 8000c5a:	1e03      	subs	r3, r0, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART4_UART_Init+0x56>
  {
    Error_Handler();
 8000c5e:	f7ff fdcd 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200005d0 	.word	0x200005d0
 8000c6c:	40004c00 	.word	0x40004c00
 8000c70:	001e8480 	.word	0x001e8480

08000c74 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000c7a:	4a16      	ldr	r2, [pc, #88]	@ (8000cd4 <MX_USART5_UART_Init+0x60>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 2000000;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000c80:	4a15      	ldr	r2, [pc, #84]	@ (8000cd8 <MX_USART5_UART_Init+0x64>)
 8000c82:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000c98:	220c      	movs	r2, #12
 8000c9a:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000cba:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <MX_USART5_UART_Init+0x5c>)
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f002 fab1 	bl	8003224 <HAL_UART_Init>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART5_UART_Init+0x56>
  {
    Error_Handler();
 8000cc6:	f7ff fd99 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000664 	.word	0x20000664
 8000cd4:	40005000 	.word	0x40005000
 8000cd8:	001e8480 	.word	0x001e8480

08000cdc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000ce2:	4a16      	ldr	r2, [pc, #88]	@ (8000d3c <MX_USART6_UART_Init+0x60>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 2000000;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000ce8:	4a15      	ldr	r2, [pc, #84]	@ (8000d40 <MX_USART6_UART_Init+0x64>)
 8000cea:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000d00:	220c      	movs	r2, #12
 8000d02:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d22:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000d24:	0018      	movs	r0, r3
 8000d26:	f002 fa7d 	bl	8003224 <HAL_UART_Init>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART6_UART_Init+0x56>
  {
    Error_Handler();
 8000d2e:	f7ff fd65 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200006f8 	.word	0x200006f8
 8000d3c:	40013c00 	.word	0x40013c00
 8000d40:	001e8480 	.word	0x001e8480

08000d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b0ab      	sub	sp, #172	@ 0xac
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	2394      	movs	r3, #148	@ 0x94
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	0018      	movs	r0, r3
 8000d52:	2314      	movs	r3, #20
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f003 ff3a 	bl	8004bd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	2448      	movs	r4, #72	@ 0x48
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	0018      	movs	r0, r3
 8000d62:	234c      	movs	r3, #76	@ 0x4c
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f003 ff32 	bl	8004bd0 <memset>
  if(uartHandle->Instance==USART1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4aa0      	ldr	r2, [pc, #640]	@ (8000ff4 <HAL_UART_MspInit+0x2b0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d000      	beq.n	8000d78 <HAL_UART_MspInit+0x34>
 8000d76:	e09b      	b.n	8000eb0 <HAL_UART_MspInit+0x16c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d78:	193b      	adds	r3, r7, r4
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 f810 	bl	8002dac <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000d90:	f7ff fd34 	bl	80007fc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d94:	4b98      	ldr	r3, [pc, #608]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000d96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d98:	4b97      	ldr	r3, [pc, #604]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000d9a:	2180      	movs	r1, #128	@ 0x80
 8000d9c:	01c9      	lsls	r1, r1, #7
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000da2:	4b95      	ldr	r3, [pc, #596]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000da4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000da6:	2380      	movs	r3, #128	@ 0x80
 8000da8:	01db      	lsls	r3, r3, #7
 8000daa:	4013      	ands	r3, r2
 8000dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8000dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b91      	ldr	r3, [pc, #580]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000db4:	4b90      	ldr	r3, [pc, #576]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	430a      	orrs	r2, r1
 8000dba:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8000dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dc8:	2194      	movs	r1, #148	@ 0x94
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	22c0      	movs	r2, #192	@ 0xc0
 8000dce:	00d2      	lsls	r2, r2, #3
 8000dd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2201      	movs	r2, #1
 8000de8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	187a      	adds	r2, r7, r1
 8000dec:	23a0      	movs	r3, #160	@ 0xa0
 8000dee:	05db      	lsls	r3, r3, #23
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f001 f918 	bl	8002028 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000df8:	4b80      	ldr	r3, [pc, #512]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000dfa:	4a81      	ldr	r2, [pc, #516]	@ (8001000 <HAL_UART_MspInit+0x2bc>)
 8000dfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000e00:	2232      	movs	r2, #50	@ 0x32
 8000e02:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e04:	4b7d      	ldr	r3, [pc, #500]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e0a:	4b7c      	ldr	r3, [pc, #496]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e10:	4b7a      	ldr	r3, [pc, #488]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000e12:	2280      	movs	r2, #128	@ 0x80
 8000e14:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e16:	4b79      	ldr	r3, [pc, #484]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e1c:	4b77      	ldr	r3, [pc, #476]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e22:	4b76      	ldr	r3, [pc, #472]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000e24:	2220      	movs	r2, #32
 8000e26:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e28:	4b74      	ldr	r3, [pc, #464]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e2e:	4b73      	ldr	r3, [pc, #460]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000e30:	0018      	movs	r0, r3
 8000e32:	f000 fd91 	bl	8001958 <HAL_DMA_Init>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000e3a:	f7ff fcdf 	bl	80007fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	4a6e      	ldr	r2, [pc, #440]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000e44:	505a      	str	r2, [r3, r1]
 8000e46:	4b6d      	ldr	r3, [pc, #436]	@ (8000ffc <HAL_UART_MspInit+0x2b8>)
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000e4c:	4b6d      	ldr	r3, [pc, #436]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001008 <HAL_UART_MspInit+0x2c4>)
 8000e50:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000e52:	4b6c      	ldr	r3, [pc, #432]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e54:	2233      	movs	r2, #51	@ 0x33
 8000e56:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e58:	4b6a      	ldr	r3, [pc, #424]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e5a:	2210      	movs	r2, #16
 8000e5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5e:	4b69      	ldr	r3, [pc, #420]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e64:	4b67      	ldr	r3, [pc, #412]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e66:	2280      	movs	r2, #128	@ 0x80
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e6a:	4b66      	ldr	r3, [pc, #408]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e70:	4b64      	ldr	r3, [pc, #400]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000e76:	4b63      	ldr	r3, [pc, #396]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e78:	2220      	movs	r2, #32
 8000e7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e7c:	4b61      	ldr	r3, [pc, #388]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000e82:	4b60      	ldr	r3, [pc, #384]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e84:	0018      	movs	r0, r3
 8000e86:	f000 fd67 	bl	8001958 <HAL_DMA_Init>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8000e8e:	f7ff fcb5 	bl	80007fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a5b      	ldr	r2, [pc, #364]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e96:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000e98:	4b5a      	ldr	r3, [pc, #360]	@ (8001004 <HAL_UART_MspInit+0x2c0>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	201b      	movs	r0, #27
 8000ea4:	f000 fd26 	bl	80018f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ea8:	201b      	movs	r0, #27
 8000eaa:	f000 fd38 	bl	800191e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000eae:	e390      	b.n	80015d2 <HAL_UART_MspInit+0x88e>
  else if(uartHandle->Instance==USART2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a55      	ldr	r2, [pc, #340]	@ (800100c <HAL_UART_MspInit+0x2c8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d000      	beq.n	8000ebc <HAL_UART_MspInit+0x178>
 8000eba:	e0b1      	b.n	8001020 <HAL_UART_MspInit+0x2dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ebc:	2148      	movs	r1, #72	@ 0x48
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f001 ff6d 	bl	8002dac <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0x196>
      Error_Handler();
 8000ed6:	f7ff fc91 	bl	80007fc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eda:	4b47      	ldr	r3, [pc, #284]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000edc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ede:	4b46      	ldr	r3, [pc, #280]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	0289      	lsls	r1, r1, #10
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ee8:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	029b      	lsls	r3, r3, #10
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b40      	ldr	r3, [pc, #256]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000efa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000efc:	2101      	movs	r1, #1
 8000efe:	430a      	orrs	r2, r1
 8000f00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f02:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff8 <HAL_UART_MspInit+0x2b4>)
 8000f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f06:	2201      	movs	r2, #1
 8000f08:	4013      	ands	r3, r2
 8000f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f0e:	2194      	movs	r1, #148	@ 0x94
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2202      	movs	r2, #2
 8000f1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	187a      	adds	r2, r7, r1
 8000f30:	23a0      	movs	r3, #160	@ 0xa0
 8000f32:	05db      	lsls	r3, r3, #23
 8000f34:	0011      	movs	r1, r2
 8000f36:	0018      	movs	r0, r3
 8000f38:	f001 f876 	bl	8002028 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8000f3c:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f3e:	4a35      	ldr	r2, [pc, #212]	@ (8001014 <HAL_UART_MspInit+0x2d0>)
 8000f40:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000f42:	4b33      	ldr	r3, [pc, #204]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f44:	2234      	movs	r2, #52	@ 0x34
 8000f46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f48:	4b31      	ldr	r3, [pc, #196]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4e:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f66:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f68:	2220      	movs	r2, #32
 8000f6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f6c:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f72:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f74:	0018      	movs	r0, r3
 8000f76:	f000 fcef 	bl	8001958 <HAL_DMA_Init>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_MspInit+0x23e>
      Error_Handler();
 8000f7e:	f7ff fc3d 	bl	80007fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2180      	movs	r1, #128	@ 0x80
 8000f86:	4a22      	ldr	r2, [pc, #136]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f88:	505a      	str	r2, [r3, r1]
 8000f8a:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <HAL_UART_MspInit+0x2cc>)
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000f90:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000f92:	4a22      	ldr	r2, [pc, #136]	@ (800101c <HAL_UART_MspInit+0x2d8>)
 8000f94:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000f98:	2235      	movs	r2, #53	@ 0x35
 8000f9a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000f9e:	2210      	movs	r2, #16
 8000fa0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000faa:	2280      	movs	r2, #128	@ 0x80
 8000fac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000fbc:	2220      	movs	r2, #32
 8000fbe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 fcc5 	bl	8001958 <HAL_DMA_Init>
 8000fce:	1e03      	subs	r3, r0, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8000fd2:	f7ff fc13 	bl	80007fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000fda:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_UART_MspInit+0x2d4>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	201c      	movs	r0, #28
 8000fe8:	f000 fc84 	bl	80018f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000fec:	201c      	movs	r0, #28
 8000fee:	f000 fc96 	bl	800191e <HAL_NVIC_EnableIRQ>
}
 8000ff2:	e2ee      	b.n	80015d2 <HAL_UART_MspInit+0x88e>
 8000ff4:	40013800 	.word	0x40013800
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	2000078c 	.word	0x2000078c
 8001000:	40020008 	.word	0x40020008
 8001004:	200007ec 	.word	0x200007ec
 8001008:	4002001c 	.word	0x4002001c
 800100c:	40004400 	.word	0x40004400
 8001010:	2000084c 	.word	0x2000084c
 8001014:	40020030 	.word	0x40020030
 8001018:	200008ac 	.word	0x200008ac
 800101c:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART3)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4aaa      	ldr	r2, [pc, #680]	@ (80012d0 <HAL_UART_MspInit+0x58c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d000      	beq.n	800102c <HAL_UART_MspInit+0x2e8>
 800102a:	e0bd      	b.n	80011a8 <HAL_UART_MspInit+0x464>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800102c:	2148      	movs	r1, #72	@ 0x48
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2204      	movs	r2, #4
 8001032:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103a:	187b      	adds	r3, r7, r1
 800103c:	0018      	movs	r0, r3
 800103e:	f001 feb5 	bl	8002dac <HAL_RCCEx_PeriphCLKConfig>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <HAL_UART_MspInit+0x306>
      Error_Handler();
 8001046:	f7ff fbd9 	bl	80007fc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800104a:	4ba2      	ldr	r3, [pc, #648]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 800104c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800104e:	4ba1      	ldr	r3, [pc, #644]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	02c9      	lsls	r1, r1, #11
 8001054:	430a      	orrs	r2, r1
 8001056:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001058:	4b9e      	ldr	r3, [pc, #632]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 800105a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	02db      	lsls	r3, r3, #11
 8001060:	4013      	ands	r3, r2
 8001062:	637b      	str	r3, [r7, #52]	@ 0x34
 8001064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b9b      	ldr	r3, [pc, #620]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 8001068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800106a:	4b9a      	ldr	r3, [pc, #616]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 800106c:	2101      	movs	r1, #1
 800106e:	430a      	orrs	r2, r1
 8001070:	635a      	str	r2, [r3, #52]	@ 0x34
 8001072:	4b98      	ldr	r3, [pc, #608]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 8001074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001076:	2201      	movs	r2, #1
 8001078:	4013      	ands	r3, r2
 800107a:	633b      	str	r3, [r7, #48]	@ 0x30
 800107c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b95      	ldr	r3, [pc, #596]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 8001080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001082:	4b94      	ldr	r3, [pc, #592]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 8001084:	2102      	movs	r1, #2
 8001086:	430a      	orrs	r2, r1
 8001088:	635a      	str	r2, [r3, #52]	@ 0x34
 800108a:	4b92      	ldr	r3, [pc, #584]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 800108c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800108e:	2202      	movs	r2, #2
 8001090:	4013      	ands	r3, r2
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001096:	2494      	movs	r4, #148	@ 0x94
 8001098:	193b      	adds	r3, r7, r4
 800109a:	2220      	movs	r2, #32
 800109c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	193b      	adds	r3, r7, r4
 80010a0:	2202      	movs	r2, #2
 80010a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	2204      	movs	r2, #4
 80010b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	193a      	adds	r2, r7, r4
 80010b8:	23a0      	movs	r3, #160	@ 0xa0
 80010ba:	05db      	lsls	r3, r3, #23
 80010bc:	0011      	movs	r1, r2
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 ffb2 	bl	8002028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c4:	0021      	movs	r1, r4
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2202      	movs	r2, #2
 80010d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2204      	movs	r2, #4
 80010e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	4a7c      	ldr	r2, [pc, #496]	@ (80012d8 <HAL_UART_MspInit+0x594>)
 80010e8:	0019      	movs	r1, r3
 80010ea:	0010      	movs	r0, r2
 80010ec:	f000 ff9c 	bl	8002028 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel5;
 80010f0:	4b7a      	ldr	r3, [pc, #488]	@ (80012dc <HAL_UART_MspInit+0x598>)
 80010f2:	4a7b      	ldr	r2, [pc, #492]	@ (80012e0 <HAL_UART_MspInit+0x59c>)
 80010f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80010f6:	4b79      	ldr	r3, [pc, #484]	@ (80012dc <HAL_UART_MspInit+0x598>)
 80010f8:	2236      	movs	r2, #54	@ 0x36
 80010fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fc:	4b77      	ldr	r3, [pc, #476]	@ (80012dc <HAL_UART_MspInit+0x598>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001102:	4b76      	ldr	r3, [pc, #472]	@ (80012dc <HAL_UART_MspInit+0x598>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001108:	4b74      	ldr	r3, [pc, #464]	@ (80012dc <HAL_UART_MspInit+0x598>)
 800110a:	2280      	movs	r2, #128	@ 0x80
 800110c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800110e:	4b73      	ldr	r3, [pc, #460]	@ (80012dc <HAL_UART_MspInit+0x598>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001114:	4b71      	ldr	r3, [pc, #452]	@ (80012dc <HAL_UART_MspInit+0x598>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800111a:	4b70      	ldr	r3, [pc, #448]	@ (80012dc <HAL_UART_MspInit+0x598>)
 800111c:	2220      	movs	r2, #32
 800111e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001120:	4b6e      	ldr	r3, [pc, #440]	@ (80012dc <HAL_UART_MspInit+0x598>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001126:	4b6d      	ldr	r3, [pc, #436]	@ (80012dc <HAL_UART_MspInit+0x598>)
 8001128:	0018      	movs	r0, r3
 800112a:	f000 fc15 	bl	8001958 <HAL_DMA_Init>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d001      	beq.n	8001136 <HAL_UART_MspInit+0x3f2>
      Error_Handler();
 8001132:	f7ff fb63 	bl	80007fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2180      	movs	r1, #128	@ 0x80
 800113a:	4a68      	ldr	r2, [pc, #416]	@ (80012dc <HAL_UART_MspInit+0x598>)
 800113c:	505a      	str	r2, [r3, r1]
 800113e:	4b67      	ldr	r3, [pc, #412]	@ (80012dc <HAL_UART_MspInit+0x598>)
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_tx.Instance = DMA1_Channel6;
 8001144:	4b67      	ldr	r3, [pc, #412]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 8001146:	4a68      	ldr	r2, [pc, #416]	@ (80012e8 <HAL_UART_MspInit+0x5a4>)
 8001148:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800114a:	4b66      	ldr	r3, [pc, #408]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 800114c:	2237      	movs	r2, #55	@ 0x37
 800114e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001150:	4b64      	ldr	r3, [pc, #400]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 8001152:	2210      	movs	r2, #16
 8001154:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001156:	4b63      	ldr	r3, [pc, #396]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800115c:	4b61      	ldr	r3, [pc, #388]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001162:	4b60      	ldr	r3, [pc, #384]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001168:	4b5e      	ldr	r3, [pc, #376]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 800116e:	4b5d      	ldr	r3, [pc, #372]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 8001170:	2220      	movs	r2, #32
 8001172:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001174:	4b5b      	ldr	r3, [pc, #364]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800117a:	4b5a      	ldr	r3, [pc, #360]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 800117c:	0018      	movs	r0, r3
 800117e:	f000 fbeb 	bl	8001958 <HAL_DMA_Init>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <HAL_UART_MspInit+0x446>
      Error_Handler();
 8001186:	f7ff fb39 	bl	80007fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a55      	ldr	r2, [pc, #340]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 800118e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001190:	4b54      	ldr	r3, [pc, #336]	@ (80012e4 <HAL_UART_MspInit+0x5a0>)
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	201d      	movs	r0, #29
 800119c:	f000 fbaa 	bl	80018f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 80011a0:	201d      	movs	r0, #29
 80011a2:	f000 fbbc 	bl	800191e <HAL_NVIC_EnableIRQ>
}
 80011a6:	e214      	b.n	80015d2 <HAL_UART_MspInit+0x88e>
  else if(uartHandle->Instance==USART4)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	@ (80012ec <HAL_UART_MspInit+0x5a8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d000      	beq.n	80011b4 <HAL_UART_MspInit+0x470>
 80011b2:	e0a5      	b.n	8001300 <HAL_UART_MspInit+0x5bc>
    __HAL_RCC_USART4_CLK_ENABLE();
 80011b4:	4b47      	ldr	r3, [pc, #284]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 80011b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011b8:	4b46      	ldr	r3, [pc, #280]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 80011ba:	2180      	movs	r1, #128	@ 0x80
 80011bc:	0309      	lsls	r1, r1, #12
 80011be:	430a      	orrs	r2, r1
 80011c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011c2:	4b44      	ldr	r3, [pc, #272]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 80011c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	031b      	lsls	r3, r3, #12
 80011ca:	4013      	ands	r3, r2
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b40      	ldr	r3, [pc, #256]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 80011d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011d4:	4b3f      	ldr	r3, [pc, #252]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	430a      	orrs	r2, r1
 80011da:	635a      	str	r2, [r3, #52]	@ 0x34
 80011dc:	4b3d      	ldr	r3, [pc, #244]	@ (80012d4 <HAL_UART_MspInit+0x590>)
 80011de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e0:	2201      	movs	r2, #1
 80011e2:	4013      	ands	r3, r2
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011e8:	2194      	movs	r1, #148	@ 0x94
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	2203      	movs	r2, #3
 80011ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	2202      	movs	r2, #2
 80011f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2204      	movs	r2, #4
 8001206:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	187a      	adds	r2, r7, r1
 800120a:	23a0      	movs	r3, #160	@ 0xa0
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	0011      	movs	r1, r2
 8001210:	0018      	movs	r0, r3
 8001212:	f000 ff09 	bl	8002028 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel7;
 8001216:	4b36      	ldr	r3, [pc, #216]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 8001218:	4a36      	ldr	r2, [pc, #216]	@ (80012f4 <HAL_UART_MspInit+0x5b0>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800121c:	4b34      	ldr	r3, [pc, #208]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 800121e:	2238      	movs	r2, #56	@ 0x38
 8001220:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001222:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b31      	ldr	r3, [pc, #196]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 8001230:	2280      	movs	r2, #128	@ 0x80
 8001232:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123a:	4b2d      	ldr	r3, [pc, #180]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8001240:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 8001242:	2220      	movs	r2, #32
 8001244:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001246:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800124c:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 800124e:	0018      	movs	r0, r3
 8001250:	f000 fb82 	bl	8001958 <HAL_DMA_Init>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <HAL_UART_MspInit+0x518>
      Error_Handler();
 8001258:	f7ff fad0 	bl	80007fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2180      	movs	r1, #128	@ 0x80
 8001260:	4a23      	ldr	r2, [pc, #140]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 8001262:	505a      	str	r2, [r3, r1]
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <HAL_UART_MspInit+0x5ac>)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA2_Channel1;
 800126a:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 800126c:	4a23      	ldr	r2, [pc, #140]	@ (80012fc <HAL_UART_MspInit+0x5b8>)
 800126e:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 8001270:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 8001272:	2239      	movs	r2, #57	@ 0x39
 8001274:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 8001278:	2210      	movs	r2, #16
 800127a:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800127c:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001282:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001288:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_CIRCULAR;
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 8001296:	2220      	movs	r2, #32
 8001298:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 fb58 	bl	8001958 <HAL_DMA_Init>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_UART_MspInit+0x56c>
      Error_Handler();
 80012ac:	f7ff faa6 	bl	80007fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a11      	ldr	r2, [pc, #68]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 80012b4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <HAL_UART_MspInit+0x5b4>)
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	201d      	movs	r0, #29
 80012c2:	f000 fb17 	bl	80018f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 80012c6:	201d      	movs	r0, #29
 80012c8:	f000 fb29 	bl	800191e <HAL_NVIC_EnableIRQ>
}
 80012cc:	e181      	b.n	80015d2 <HAL_UART_MspInit+0x88e>
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	40004800 	.word	0x40004800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	50000400 	.word	0x50000400
 80012dc:	2000090c 	.word	0x2000090c
 80012e0:	40020058 	.word	0x40020058
 80012e4:	2000096c 	.word	0x2000096c
 80012e8:	4002006c 	.word	0x4002006c
 80012ec:	40004c00 	.word	0x40004c00
 80012f0:	200009cc 	.word	0x200009cc
 80012f4:	40020080 	.word	0x40020080
 80012f8:	20000a2c 	.word	0x20000a2c
 80012fc:	40020408 	.word	0x40020408
  else if(uartHandle->Instance==USART5)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4ab5      	ldr	r2, [pc, #724]	@ (80015dc <HAL_UART_MspInit+0x898>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d000      	beq.n	800130c <HAL_UART_MspInit+0x5c8>
 800130a:	e0ad      	b.n	8001468 <HAL_UART_MspInit+0x724>
    __HAL_RCC_USART5_CLK_ENABLE();
 800130c:	4bb4      	ldr	r3, [pc, #720]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 800130e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001310:	4bb3      	ldr	r3, [pc, #716]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 8001312:	2180      	movs	r1, #128	@ 0x80
 8001314:	0049      	lsls	r1, r1, #1
 8001316:	430a      	orrs	r2, r1
 8001318:	63da      	str	r2, [r3, #60]	@ 0x3c
 800131a:	4bb1      	ldr	r3, [pc, #708]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 800131c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800131e:	2380      	movs	r3, #128	@ 0x80
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4013      	ands	r3, r2
 8001324:	623b      	str	r3, [r7, #32]
 8001326:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4bad      	ldr	r3, [pc, #692]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 800132a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800132c:	4bac      	ldr	r3, [pc, #688]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 800132e:	2102      	movs	r1, #2
 8001330:	430a      	orrs	r2, r1
 8001332:	635a      	str	r2, [r3, #52]	@ 0x34
 8001334:	4baa      	ldr	r3, [pc, #680]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 8001336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001338:	2202      	movs	r2, #2
 800133a:	4013      	ands	r3, r2
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001340:	4ba7      	ldr	r3, [pc, #668]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 8001342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001344:	4ba6      	ldr	r3, [pc, #664]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 8001346:	2108      	movs	r1, #8
 8001348:	430a      	orrs	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	@ 0x34
 800134c:	4ba4      	ldr	r3, [pc, #656]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 800134e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001350:	2208      	movs	r2, #8
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001358:	2494      	movs	r4, #148	@ 0x94
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2202      	movs	r2, #2
 800135e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	2202      	movs	r2, #2
 8001364:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	193b      	adds	r3, r7, r4
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	193b      	adds	r3, r7, r4
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART5;
 8001372:	193b      	adds	r3, r7, r4
 8001374:	2208      	movs	r2, #8
 8001376:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	193b      	adds	r3, r7, r4
 800137a:	4a9a      	ldr	r2, [pc, #616]	@ (80015e4 <HAL_UART_MspInit+0x8a0>)
 800137c:	0019      	movs	r1, r3
 800137e:	0010      	movs	r0, r2
 8001380:	f000 fe52 	bl	8002028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001384:	0021      	movs	r1, r4
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2208      	movs	r2, #8
 800138a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2202      	movs	r2, #2
 8001390:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2203      	movs	r2, #3
 80013a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	4a90      	ldr	r2, [pc, #576]	@ (80015e8 <HAL_UART_MspInit+0x8a4>)
 80013a8:	0019      	movs	r1, r3
 80013aa:	0010      	movs	r0, r2
 80013ac:	f000 fe3c 	bl	8002028 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA2_Channel2;
 80013b0:	4b8e      	ldr	r3, [pc, #568]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 80013b2:	4a8f      	ldr	r2, [pc, #572]	@ (80015f0 <HAL_UART_MspInit+0x8ac>)
 80013b4:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_USART5_RX;
 80013b6:	4b8d      	ldr	r3, [pc, #564]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 80013b8:	224a      	movs	r2, #74	@ 0x4a
 80013ba:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013bc:	4b8b      	ldr	r3, [pc, #556]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b8a      	ldr	r3, [pc, #552]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b88      	ldr	r3, [pc, #544]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 80013ca:	2280      	movs	r2, #128	@ 0x80
 80013cc:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ce:	4b87      	ldr	r3, [pc, #540]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d4:	4b85      	ldr	r3, [pc, #532]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_CIRCULAR;
 80013da:	4b84      	ldr	r3, [pc, #528]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 80013dc:	2220      	movs	r2, #32
 80013de:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013e0:	4b82      	ldr	r3, [pc, #520]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 80013e6:	4b81      	ldr	r3, [pc, #516]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 fab5 	bl	8001958 <HAL_DMA_Init>
 80013ee:	1e03      	subs	r3, r0, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_UART_MspInit+0x6b2>
      Error_Handler();
 80013f2:	f7ff fa03 	bl	80007fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart5_rx);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	4a7c      	ldr	r2, [pc, #496]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 80013fc:	505a      	str	r2, [r3, r1]
 80013fe:	4b7b      	ldr	r3, [pc, #492]	@ (80015ec <HAL_UART_MspInit+0x8a8>)
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart5_tx.Instance = DMA2_Channel3;
 8001404:	4b7b      	ldr	r3, [pc, #492]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 8001406:	4a7c      	ldr	r2, [pc, #496]	@ (80015f8 <HAL_UART_MspInit+0x8b4>)
 8001408:	601a      	str	r2, [r3, #0]
    hdma_usart5_tx.Init.Request = DMA_REQUEST_USART5_TX;
 800140a:	4b7a      	ldr	r3, [pc, #488]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 800140c:	224b      	movs	r2, #75	@ 0x4b
 800140e:	605a      	str	r2, [r3, #4]
    hdma_usart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001410:	4b78      	ldr	r3, [pc, #480]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 8001412:	2210      	movs	r2, #16
 8001414:	609a      	str	r2, [r3, #8]
    hdma_usart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001416:	4b77      	ldr	r3, [pc, #476]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
    hdma_usart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800141c:	4b75      	ldr	r3, [pc, #468]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 800141e:	2280      	movs	r2, #128	@ 0x80
 8001420:	611a      	str	r2, [r3, #16]
    hdma_usart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001422:	4b74      	ldr	r3, [pc, #464]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
    hdma_usart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001428:	4b72      	ldr	r3, [pc, #456]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
    hdma_usart5_tx.Init.Mode = DMA_CIRCULAR;
 800142e:	4b71      	ldr	r3, [pc, #452]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 8001430:	2220      	movs	r2, #32
 8001432:	61da      	str	r2, [r3, #28]
    hdma_usart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001434:	4b6f      	ldr	r3, [pc, #444]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_tx) != HAL_OK)
 800143a:	4b6e      	ldr	r3, [pc, #440]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 800143c:	0018      	movs	r0, r3
 800143e:	f000 fa8b 	bl	8001958 <HAL_DMA_Init>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d001      	beq.n	800144a <HAL_UART_MspInit+0x706>
      Error_Handler();
 8001446:	f7ff f9d9 	bl	80007fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart5_tx);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a69      	ldr	r2, [pc, #420]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 800144e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001450:	4b68      	ldr	r3, [pc, #416]	@ (80015f4 <HAL_UART_MspInit+0x8b0>)
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	201d      	movs	r0, #29
 800145c:	f000 fa4a 	bl	80018f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8001460:	201d      	movs	r0, #29
 8001462:	f000 fa5c 	bl	800191e <HAL_NVIC_EnableIRQ>
}
 8001466:	e0b4      	b.n	80015d2 <HAL_UART_MspInit+0x88e>
  else if(uartHandle->Instance==USART6)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a63      	ldr	r2, [pc, #396]	@ (80015fc <HAL_UART_MspInit+0x8b8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d000      	beq.n	8001474 <HAL_UART_MspInit+0x730>
 8001472:	e0ae      	b.n	80015d2 <HAL_UART_MspInit+0x88e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001474:	4b5a      	ldr	r3, [pc, #360]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 8001476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001478:	4b59      	ldr	r3, [pc, #356]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 800147a:	2180      	movs	r1, #128	@ 0x80
 800147c:	0089      	lsls	r1, r1, #2
 800147e:	430a      	orrs	r2, r1
 8001480:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001482:	4b57      	ldr	r3, [pc, #348]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 8001484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001486:	2380      	movs	r3, #128	@ 0x80
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4013      	ands	r3, r2
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b53      	ldr	r3, [pc, #332]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 8001492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001494:	4b52      	ldr	r3, [pc, #328]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 8001496:	2101      	movs	r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	635a      	str	r2, [r3, #52]	@ 0x34
 800149c:	4b50      	ldr	r3, [pc, #320]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 800149e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	4b4d      	ldr	r3, [pc, #308]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 80014aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014ac:	4b4c      	ldr	r3, [pc, #304]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 80014ae:	2102      	movs	r1, #2
 80014b0:	430a      	orrs	r2, r1
 80014b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b4:	4b4a      	ldr	r3, [pc, #296]	@ (80015e0 <HAL_UART_MspInit+0x89c>)
 80014b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b8:	2202      	movs	r2, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c0:	2494      	movs	r4, #148	@ 0x94
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	2210      	movs	r2, #16
 80014c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	193b      	adds	r3, r7, r4
 80014ca:	2202      	movs	r2, #2
 80014cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	193b      	adds	r3, r7, r4
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART6;
 80014da:	193b      	adds	r3, r7, r4
 80014dc:	2203      	movs	r2, #3
 80014de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	193a      	adds	r2, r7, r4
 80014e2:	23a0      	movs	r3, #160	@ 0xa0
 80014e4:	05db      	lsls	r3, r3, #23
 80014e6:	0011      	movs	r1, r2
 80014e8:	0018      	movs	r0, r3
 80014ea:	f000 fd9d 	bl	8002028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ee:	0021      	movs	r1, r4
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2280      	movs	r2, #128	@ 0x80
 80014f4:	0092      	lsls	r2, r2, #2
 80014f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2202      	movs	r2, #2
 80014fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2208      	movs	r2, #8
 800150e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	187b      	adds	r3, r7, r1
 8001512:	4a34      	ldr	r2, [pc, #208]	@ (80015e4 <HAL_UART_MspInit+0x8a0>)
 8001514:	0019      	movs	r1, r3
 8001516:	0010      	movs	r0, r2
 8001518:	f000 fd86 	bl	8002028 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Channel4;
 800151c:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 800151e:	4a39      	ldr	r2, [pc, #228]	@ (8001604 <HAL_UART_MspInit+0x8c0>)
 8001520:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8001522:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 8001524:	224c      	movs	r2, #76	@ 0x4c
 8001526:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001528:	4b35      	ldr	r3, [pc, #212]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001534:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153a:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001540:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001546:	4b2e      	ldr	r3, [pc, #184]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 8001548:	2220      	movs	r2, #32
 800154a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800154c:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001552:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 8001554:	0018      	movs	r0, r3
 8001556:	f000 f9ff 	bl	8001958 <HAL_DMA_Init>
 800155a:	1e03      	subs	r3, r0, #0
 800155c:	d001      	beq.n	8001562 <HAL_UART_MspInit+0x81e>
      Error_Handler();
 800155e:	f7ff f94d 	bl	80007fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2180      	movs	r1, #128	@ 0x80
 8001566:	4a26      	ldr	r2, [pc, #152]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 8001568:	505a      	str	r2, [r3, r1]
 800156a:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <HAL_UART_MspInit+0x8bc>)
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart6_tx.Instance = DMA2_Channel5;
 8001570:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 8001572:	4a26      	ldr	r2, [pc, #152]	@ (800160c <HAL_UART_MspInit+0x8c8>)
 8001574:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8001576:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 8001578:	224d      	movs	r2, #77	@ 0x4d
 800157a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 800157e:	2210      	movs	r2, #16
 8001580:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001588:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 800158a:	2280      	movs	r2, #128	@ 0x80
 800158c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001594:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 800159a:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 800159c:	2220      	movs	r2, #32
 800159e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015a0:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80015a6:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 f9d5 	bl	8001958 <HAL_DMA_Init>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_UART_MspInit+0x872>
      Error_Handler();
 80015b2:	f7ff f923 	bl	80007fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a13      	ldr	r2, [pc, #76]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 80015ba:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_UART_MspInit+0x8c4>)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	201d      	movs	r0, #29
 80015c8:	f000 f994 	bl	80018f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 80015cc:	201d      	movs	r0, #29
 80015ce:	f000 f9a6 	bl	800191e <HAL_NVIC_EnableIRQ>
}
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b02b      	add	sp, #172	@ 0xac
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	46c0      	nop			@ (mov r8, r8)
 80015dc:	40005000 	.word	0x40005000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	50000400 	.word	0x50000400
 80015e8:	50000c00 	.word	0x50000c00
 80015ec:	20000a8c 	.word	0x20000a8c
 80015f0:	4002041c 	.word	0x4002041c
 80015f4:	20000aec 	.word	0x20000aec
 80015f8:	40020430 	.word	0x40020430
 80015fc:	40013c00 	.word	0x40013c00
 8001600:	20000b4c 	.word	0x20000b4c
 8001604:	40020444 	.word	0x40020444
 8001608:	20000bac 	.word	0x20000bac
 800160c:	40020458 	.word	0x40020458

08001610 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001610:	480d      	ldr	r0, [pc, #52]	@ (8001648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001612:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001614:	f7ff f9fe 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <LoopForever+0x6>)
  ldr r1, =_edata
 800161a:	490d      	ldr	r1, [pc, #52]	@ (8001650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <LoopForever+0xe>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001630:	4c0a      	ldr	r4, [pc, #40]	@ (800165c <LoopForever+0x16>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800163e:	f003 facf 	bl	8004be0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001642:	f7ff f85f 	bl	8000704 <main>

08001646 <LoopForever>:

LoopForever:
  b LoopForever
 8001646:	e7fe      	b.n	8001646 <LoopForever>
  ldr   r0, =_estack
 8001648:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001654:	08004cd8 	.word	0x08004cd8
  ldr r2, =_sbss
 8001658:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800165c:	20000c10 	.word	0x20000c10

08001660 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC1_COMP_IRQHandler>
	...

08001664 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <HAL_Init+0x3c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <HAL_Init+0x3c>)
 8001676:	2180      	movs	r1, #128	@ 0x80
 8001678:	0049      	lsls	r1, r1, #1
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800167e:	2003      	movs	r0, #3
 8001680:	f000 f810 	bl	80016a4 <HAL_InitTick>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d003      	beq.n	8001690 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e001      	b.n	8001694 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff f8ba 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001694:	1dfb      	adds	r3, r7, #7
 8001696:	781b      	ldrb	r3, [r3, #0]
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40022000 	.word	0x40022000

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016ac:	230f      	movs	r3, #15
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80016b4:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <HAL_InitTick+0x88>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d02b      	beq.n	8001714 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80016bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <HAL_InitTick+0x8c>)
 80016be:	681c      	ldr	r4, [r3, #0]
 80016c0:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <HAL_InitTick+0x88>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	0019      	movs	r1, r3
 80016c6:	23fa      	movs	r3, #250	@ 0xfa
 80016c8:	0098      	lsls	r0, r3, #2
 80016ca:	f7fe fd1b 	bl	8000104 <__udivsi3>
 80016ce:	0003      	movs	r3, r0
 80016d0:	0019      	movs	r1, r3
 80016d2:	0020      	movs	r0, r4
 80016d4:	f7fe fd16 	bl	8000104 <__udivsi3>
 80016d8:	0003      	movs	r3, r0
 80016da:	0018      	movs	r0, r3
 80016dc:	f000 f92f 	bl	800193e <HAL_SYSTICK_Config>
 80016e0:	1e03      	subs	r3, r0, #0
 80016e2:	d112      	bne.n	800170a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d80a      	bhi.n	8001700 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	2301      	movs	r3, #1
 80016ee:	425b      	negs	r3, r3
 80016f0:	2200      	movs	r2, #0
 80016f2:	0018      	movs	r0, r3
 80016f4:	f000 f8fe 	bl	80018f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <HAL_InitTick+0x90>)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e00d      	b.n	800171c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001700:	230f      	movs	r3, #15
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	e008      	b.n	800171c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800170a:	230f      	movs	r3, #15
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	e003      	b.n	800171c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001714:	230f      	movs	r3, #15
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800171c:	230f      	movs	r3, #15
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	781b      	ldrb	r3, [r3, #0]
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b005      	add	sp, #20
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	20000008 	.word	0x20000008
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <HAL_IncTick+0x1c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	001a      	movs	r2, r3
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_IncTick+0x20>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	18d2      	adds	r2, r2, r3
 8001748:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <HAL_IncTick+0x20>)
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	46c0      	nop			@ (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	20000008 	.word	0x20000008
 8001758:	20000c0c 	.word	0x20000c0c

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b02      	ldr	r3, [pc, #8]	@ (800176c <HAL_GetTick+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	20000c0c 	.word	0x20000c0c

08001770 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800177e:	4013      	ands	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	40010000 	.word	0x40010000
 8001798:	fffff9ff 	.word	0xfffff9ff

0800179c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	0002      	movs	r2, r0
 80017a4:	1dfb      	adds	r3, r7, #7
 80017a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	1dfb      	adds	r3, r7, #7
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80017ae:	d809      	bhi.n	80017c4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	001a      	movs	r2, r3
 80017b6:	231f      	movs	r3, #31
 80017b8:	401a      	ands	r2, r3
 80017ba:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_EnableIRQ+0x30>)
 80017bc:	2101      	movs	r1, #1
 80017be:	4091      	lsls	r1, r2
 80017c0:	000a      	movs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80017c4:	46c0      	nop			@ (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	0002      	movs	r2, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80017e4:	d828      	bhi.n	8001838 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e6:	4a2f      	ldr	r2, [pc, #188]	@ (80018a4 <__NVIC_SetPriority+0xd4>)
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	33c0      	adds	r3, #192	@ 0xc0
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	589b      	ldr	r3, [r3, r2]
 80017f6:	1dfa      	adds	r2, r7, #7
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	0011      	movs	r1, r2
 80017fc:	2203      	movs	r2, #3
 80017fe:	400a      	ands	r2, r1
 8001800:	00d2      	lsls	r2, r2, #3
 8001802:	21ff      	movs	r1, #255	@ 0xff
 8001804:	4091      	lsls	r1, r2
 8001806:	000a      	movs	r2, r1
 8001808:	43d2      	mvns	r2, r2
 800180a:	401a      	ands	r2, r3
 800180c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	22ff      	movs	r2, #255	@ 0xff
 8001814:	401a      	ands	r2, r3
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	0018      	movs	r0, r3
 800181c:	2303      	movs	r3, #3
 800181e:	4003      	ands	r3, r0
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001824:	481f      	ldr	r0, [pc, #124]	@ (80018a4 <__NVIC_SetPriority+0xd4>)
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b25b      	sxtb	r3, r3
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	430a      	orrs	r2, r1
 8001830:	33c0      	adds	r3, #192	@ 0xc0
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001836:	e031      	b.n	800189c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001838:	4a1b      	ldr	r2, [pc, #108]	@ (80018a8 <__NVIC_SetPriority+0xd8>)
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	0019      	movs	r1, r3
 8001840:	230f      	movs	r3, #15
 8001842:	400b      	ands	r3, r1
 8001844:	3b08      	subs	r3, #8
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3306      	adds	r3, #6
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	18d3      	adds	r3, r2, r3
 800184e:	3304      	adds	r3, #4
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1dfa      	adds	r2, r7, #7
 8001854:	7812      	ldrb	r2, [r2, #0]
 8001856:	0011      	movs	r1, r2
 8001858:	2203      	movs	r2, #3
 800185a:	400a      	ands	r2, r1
 800185c:	00d2      	lsls	r2, r2, #3
 800185e:	21ff      	movs	r1, #255	@ 0xff
 8001860:	4091      	lsls	r1, r2
 8001862:	000a      	movs	r2, r1
 8001864:	43d2      	mvns	r2, r2
 8001866:	401a      	ands	r2, r3
 8001868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	019b      	lsls	r3, r3, #6
 800186e:	22ff      	movs	r2, #255	@ 0xff
 8001870:	401a      	ands	r2, r3
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	0018      	movs	r0, r3
 8001878:	2303      	movs	r3, #3
 800187a:	4003      	ands	r3, r0
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001880:	4809      	ldr	r0, [pc, #36]	@ (80018a8 <__NVIC_SetPriority+0xd8>)
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	001c      	movs	r4, r3
 8001888:	230f      	movs	r3, #15
 800188a:	4023      	ands	r3, r4
 800188c:	3b08      	subs	r3, #8
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	430a      	orrs	r2, r1
 8001892:	3306      	adds	r3, #6
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	18c3      	adds	r3, r0, r3
 8001898:	3304      	adds	r3, #4
 800189a:	601a      	str	r2, [r3, #0]
}
 800189c:	46c0      	nop			@ (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b003      	add	sp, #12
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	1e5a      	subs	r2, r3, #1
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	045b      	lsls	r3, r3, #17
 80018bc:	429a      	cmp	r2, r3
 80018be:	d301      	bcc.n	80018c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c0:	2301      	movs	r3, #1
 80018c2:	e010      	b.n	80018e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <SysTick_Config+0x44>)
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	3a01      	subs	r2, #1
 80018ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018cc:	2301      	movs	r3, #1
 80018ce:	425b      	negs	r3, r3
 80018d0:	2103      	movs	r1, #3
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7ff ff7c 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <SysTick_Config+0x44>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <SysTick_Config+0x44>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b002      	add	sp, #8
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	210f      	movs	r1, #15
 8001900:	187b      	adds	r3, r7, r1
 8001902:	1c02      	adds	r2, r0, #0
 8001904:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	187b      	adds	r3, r7, r1
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b25b      	sxtb	r3, r3
 800190e:	0011      	movs	r1, r2
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b004      	add	sp, #16
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	0002      	movs	r2, r0
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192a:	1dfb      	adds	r3, r7, #7
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b25b      	sxtb	r3, r3
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff ff33 	bl	800179c <__NVIC_EnableIRQ>
}
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b002      	add	sp, #8
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ffaf 	bl	80018ac <SysTick_Config>
 800194e:	0003      	movs	r3, r0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e091      	b.n	8001a8e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	001a      	movs	r2, r3
 8001970:	4b49      	ldr	r3, [pc, #292]	@ (8001a98 <HAL_DMA_Init+0x140>)
 8001972:	429a      	cmp	r2, r3
 8001974:	d810      	bhi.n	8001998 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a48      	ldr	r2, [pc, #288]	@ (8001a9c <HAL_DMA_Init+0x144>)
 800197c:	4694      	mov	ip, r2
 800197e:	4463      	add	r3, ip
 8001980:	2114      	movs	r1, #20
 8001982:	0018      	movs	r0, r3
 8001984:	f7fe fbbe 	bl	8000104 <__udivsi3>
 8001988:	0003      	movs	r3, r0
 800198a:	009a      	lsls	r2, r3, #2
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a43      	ldr	r2, [pc, #268]	@ (8001aa0 <HAL_DMA_Init+0x148>)
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
 8001996:	e00f      	b.n	80019b8 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a41      	ldr	r2, [pc, #260]	@ (8001aa4 <HAL_DMA_Init+0x14c>)
 800199e:	4694      	mov	ip, r2
 80019a0:	4463      	add	r3, ip
 80019a2:	2114      	movs	r1, #20
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7fe fbad 	bl	8000104 <__udivsi3>
 80019aa:	0003      	movs	r3, r0
 80019ac:	009a      	lsls	r2, r3, #2
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a3c      	ldr	r2, [pc, #240]	@ (8001aa8 <HAL_DMA_Init+0x150>)
 80019b6:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2225      	movs	r2, #37	@ 0x25
 80019bc:	2102      	movs	r1, #2
 80019be:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4938      	ldr	r1, [pc, #224]	@ (8001aac <HAL_DMA_Init+0x154>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 fa9f 	bl	8001f4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	2380      	movs	r3, #128	@ 0x80
 8001a14:	01db      	lsls	r3, r3, #7
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d102      	bne.n	8001a20 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a28:	217f      	movs	r1, #127	@ 0x7f
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a36:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d011      	beq.n	8001a64 <HAL_DMA_Init+0x10c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d80d      	bhi.n	8001a64 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f000 fac8 	bl	8001fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	e008      	b.n	8001a76 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2225      	movs	r2, #37	@ 0x25
 8001a80:	2101      	movs	r1, #1
 8001a82:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2224      	movs	r2, #36	@ 0x24
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	40020407 	.word	0x40020407
 8001a9c:	bffdfff8 	.word	0xbffdfff8
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	bffdfbf8 	.word	0xbffdfbf8
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	ffff800f 	.word	0xffff800f

08001ab0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001abe:	2317      	movs	r3, #23
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2224      	movs	r2, #36	@ 0x24
 8001aca:	5c9b      	ldrb	r3, [r3, r2]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_DMA_Start_IT+0x24>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e06f      	b.n	8001bb4 <HAL_DMA_Start_IT+0x104>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2224      	movs	r2, #36	@ 0x24
 8001ad8:	2101      	movs	r1, #1
 8001ada:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2225      	movs	r2, #37	@ 0x25
 8001ae0:	5c9b      	ldrb	r3, [r3, r2]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d157      	bne.n	8001b98 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2225      	movs	r2, #37	@ 0x25
 8001aec:	2102      	movs	r1, #2
 8001aee:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	438a      	bics	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f9e1 	bl	8001ed4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	210e      	movs	r1, #14
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e00f      	b.n	8001b4c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2104      	movs	r1, #4
 8001b38:	438a      	bics	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	210a      	movs	r1, #10
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	025b      	lsls	r3, r3, #9
 8001b56:	4013      	ands	r3, r2
 8001b58:	d008      	beq.n	8001b6c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b64:	2180      	movs	r1, #128	@ 0x80
 8001b66:	0049      	lsls	r1, r1, #1
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7e:	2180      	movs	r1, #128	@ 0x80
 8001b80:	0049      	lsls	r1, r1, #1
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e00a      	b.n	8001bae <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2280      	movs	r2, #128	@ 0x80
 8001b9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2224      	movs	r2, #36	@ 0x24
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001ba6:	2317      	movs	r3, #23
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001bae:	2317      	movs	r3, #23
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b006      	add	sp, #24
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e04f      	b.n	8001c6e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2225      	movs	r2, #37	@ 0x25
 8001bd2:	5c9b      	ldrb	r3, [r3, r2]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d008      	beq.n	8001bec <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2224      	movs	r2, #36	@ 0x24
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e040      	b.n	8001c6e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	210e      	movs	r1, #14
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c06:	491c      	ldr	r1, [pc, #112]	@ (8001c78 <HAL_DMA_Abort+0xbc>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2101      	movs	r1, #1
 8001c18:	438a      	bics	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c20:	221c      	movs	r2, #28
 8001c22:	401a      	ands	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	2101      	movs	r1, #1
 8001c2a:	4091      	lsls	r1, r2
 8001c2c:	000a      	movs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4c:	490a      	ldr	r1, [pc, #40]	@ (8001c78 <HAL_DMA_Abort+0xbc>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2225      	movs	r2, #37	@ 0x25
 8001c60:	2101      	movs	r1, #1
 8001c62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	@ 0x24
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b002      	add	sp, #8
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	fffffeff 	.word	0xfffffeff

08001c7c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c84:	210f      	movs	r1, #15
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2225      	movs	r2, #37	@ 0x25
 8001c90:	5c9b      	ldrb	r3, [r3, r2]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d006      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	e048      	b.n	8001d38 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	210e      	movs	r1, #14
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	438a      	bics	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd0:	491d      	ldr	r1, [pc, #116]	@ (8001d48 <HAL_DMA_Abort_IT+0xcc>)
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	221c      	movs	r2, #28
 8001cdc:	401a      	ands	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	4091      	lsls	r1, r2
 8001ce6:	000a      	movs	r2, r1
 8001ce8:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001cf2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00c      	beq.n	8001d16 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d06:	4910      	ldr	r1, [pc, #64]	@ (8001d48 <HAL_DMA_Abort_IT+0xcc>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d14:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2225      	movs	r2, #37	@ 0x25
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2224      	movs	r2, #36	@ 0x24
 8001d22:	2100      	movs	r1, #0
 8001d24:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	0010      	movs	r0, r2
 8001d36:	4798      	blx	r3
    }
  }
  return status;
 8001d38:	230f      	movs	r3, #15
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b004      	add	sp, #16
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	fffffeff 	.word	0xfffffeff

08001d4c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d68:	221c      	movs	r2, #28
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	0013      	movs	r3, r2
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4013      	ands	r3, r2
 8001d76:	d026      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x7a>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d022      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2220      	movs	r2, #32
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d107      	bne.n	8001d9c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2104      	movs	r1, #4
 8001d98:	438a      	bics	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da0:	221c      	movs	r2, #28
 8001da2:	401a      	ands	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	2104      	movs	r1, #4
 8001daa:	4091      	lsls	r1, r2
 8001dac:	000a      	movs	r2, r1
 8001dae:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d100      	bne.n	8001dba <HAL_DMA_IRQHandler+0x6e>
 8001db8:	e080      	b.n	8001ebc <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	0010      	movs	r0, r2
 8001dc2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001dc4:	e07a      	b.n	8001ebc <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	221c      	movs	r2, #28
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2202      	movs	r2, #2
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	0013      	movs	r3, r2
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d03c      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x108>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	d038      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2220      	movs	r2, #32
 8001dea:	4013      	ands	r3, r2
 8001dec:	d10b      	bne.n	8001e06 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	210a      	movs	r1, #10
 8001dfa:	438a      	bics	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2225      	movs	r2, #37	@ 0x25
 8001e02:	2101      	movs	r1, #1
 8001e04:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec8 <HAL_DMA_IRQHandler+0x17c>)
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d909      	bls.n	8001e26 <HAL_DMA_IRQHandler+0xda>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	221c      	movs	r2, #28
 8001e18:	401a      	ands	r2, r3
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ecc <HAL_DMA_IRQHandler+0x180>)
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4091      	lsls	r1, r2
 8001e20:	000a      	movs	r2, r1
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	e008      	b.n	8001e38 <HAL_DMA_IRQHandler+0xec>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	221c      	movs	r2, #28
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	4b28      	ldr	r3, [pc, #160]	@ (8001ed0 <HAL_DMA_IRQHandler+0x184>)
 8001e30:	2102      	movs	r1, #2
 8001e32:	4091      	lsls	r1, r2
 8001e34:	000a      	movs	r2, r1
 8001e36:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2224      	movs	r2, #36	@ 0x24
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d039      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	0010      	movs	r0, r2
 8001e50:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001e52:	e033      	b.n	8001ebc <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e58:	221c      	movs	r2, #28
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	0013      	movs	r3, r2
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	d02a      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x172>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d026      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	210e      	movs	r1, #14
 8001e7c:	438a      	bics	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e84:	221c      	movs	r2, #28
 8001e86:	401a      	ands	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	4091      	lsls	r1, r2
 8001e90:	000a      	movs	r2, r1
 8001e92:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2225      	movs	r2, #37	@ 0x25
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2224      	movs	r2, #36	@ 0x24
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	0010      	movs	r0, r2
 8001eba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ebc:	46c0      	nop			@ (mov r8, r8)
 8001ebe:	46c0      	nop			@ (mov r8, r8)
}
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b004      	add	sp, #16
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	40020080 	.word	0x40020080
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001eea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001efc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	221c      	movs	r2, #28
 8001f04:	401a      	ands	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4091      	lsls	r1, r2
 8001f0e:	000a      	movs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d108      	bne.n	8001f34 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f32:	e007      	b.n	8001f44 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	60da      	str	r2, [r3, #12]
}
 8001f44:	46c0      	nop			@ (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b004      	add	sp, #16
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	001a      	movs	r2, r3
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d814      	bhi.n	8001f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001f6a:	189a      	adds	r2, r3, r2
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	001a      	movs	r2, r3
 8001f76:	23ff      	movs	r3, #255	@ 0xff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	3b08      	subs	r3, #8
 8001f7c:	2114      	movs	r1, #20
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7fe f8c0 	bl	8000104 <__udivsi3>
 8001f84:	0003      	movs	r3, r0
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e014      	b.n	8001fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4a11      	ldr	r2, [pc, #68]	@ (8001fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001f94:	189a      	adds	r2, r3, r2
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	23ff      	movs	r3, #255	@ 0xff
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	3b08      	subs	r3, #8
 8001fa6:	2114      	movs	r1, #20
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7fe f8ab 	bl	8000104 <__udivsi3>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	3307      	adds	r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a09      	ldr	r2, [pc, #36]	@ (8001fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001fb8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	221f      	movs	r2, #31
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001fc8:	46c0      	nop			@ (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b004      	add	sp, #16
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40020407 	.word	0x40020407
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	4002081c 	.word	0x4002081c
 8001fdc:	40020880 	.word	0x40020880

08001fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	227f      	movs	r2, #127	@ 0x7f
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ff6:	4694      	mov	ip, r2
 8001ff8:	4463      	add	r3, ip
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	001a      	movs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a07      	ldr	r2, [pc, #28]	@ (8002024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002006:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3b01      	subs	r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	4013      	ands	r3, r2
 8002010:	2201      	movs	r2, #1
 8002012:	409a      	lsls	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b004      	add	sp, #16
 800201e:	bd80      	pop	{r7, pc}
 8002020:	1000823f 	.word	0x1000823f
 8002024:	40020940 	.word	0x40020940

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002036:	e14d      	b.n	80022d4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4091      	lsls	r1, r2
 8002042:	000a      	movs	r2, r1
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d100      	bne.n	8002050 <HAL_GPIO_Init+0x28>
 800204e:	e13e      	b.n	80022ce <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2203      	movs	r2, #3
 8002056:	4013      	ands	r3, r2
 8002058:	2b01      	cmp	r3, #1
 800205a:	d005      	beq.n	8002068 <HAL_GPIO_Init+0x40>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2203      	movs	r2, #3
 8002062:	4013      	ands	r3, r2
 8002064:	2b02      	cmp	r3, #2
 8002066:	d130      	bne.n	80020ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	409a      	lsls	r2, r3
 8002076:	0013      	movs	r3, r2
 8002078:	43da      	mvns	r2, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	409a      	lsls	r2, r3
 800208a:	0013      	movs	r3, r2
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800209e:	2201      	movs	r2, #1
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
 80020a4:	0013      	movs	r3, r2
 80020a6:	43da      	mvns	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	2201      	movs	r2, #1
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2203      	movs	r2, #3
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d017      	beq.n	8002106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	409a      	lsls	r2, r3
 80020e4:	0013      	movs	r3, r2
 80020e6:	43da      	mvns	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	409a      	lsls	r2, r3
 80020f8:	0013      	movs	r3, r2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2203      	movs	r2, #3
 800210c:	4013      	ands	r3, r2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d123      	bne.n	800215a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	58d3      	ldr	r3, [r2, r3]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2207      	movs	r2, #7
 8002124:	4013      	ands	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	409a      	lsls	r2, r3
 800212c:	0013      	movs	r3, r2
 800212e:	43da      	mvns	r2, r3
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2107      	movs	r1, #7
 800213e:	400b      	ands	r3, r1
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	409a      	lsls	r2, r3
 8002144:	0013      	movs	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	0092      	lsls	r2, r2, #2
 8002156:	6939      	ldr	r1, [r7, #16]
 8002158:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	409a      	lsls	r2, r3
 8002168:	0013      	movs	r3, r2
 800216a:	43da      	mvns	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2203      	movs	r2, #3
 8002178:	401a      	ands	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	409a      	lsls	r2, r3
 8002180:	0013      	movs	r3, r2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	23c0      	movs	r3, #192	@ 0xc0
 8002194:	029b      	lsls	r3, r3, #10
 8002196:	4013      	ands	r3, r2
 8002198:	d100      	bne.n	800219c <HAL_GPIO_Init+0x174>
 800219a:	e098      	b.n	80022ce <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800219c:	4a53      	ldr	r2, [pc, #332]	@ (80022ec <HAL_GPIO_Init+0x2c4>)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	3318      	adds	r3, #24
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	589b      	ldr	r3, [r3, r2]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2203      	movs	r2, #3
 80021ae:	4013      	ands	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	220f      	movs	r2, #15
 80021b4:	409a      	lsls	r2, r3
 80021b6:	0013      	movs	r3, r2
 80021b8:	43da      	mvns	r2, r3
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	23a0      	movs	r3, #160	@ 0xa0
 80021c4:	05db      	lsls	r3, r3, #23
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d019      	beq.n	80021fe <HAL_GPIO_Init+0x1d6>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a48      	ldr	r2, [pc, #288]	@ (80022f0 <HAL_GPIO_Init+0x2c8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x1d2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a47      	ldr	r2, [pc, #284]	@ (80022f4 <HAL_GPIO_Init+0x2cc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x1ce>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a46      	ldr	r2, [pc, #280]	@ (80022f8 <HAL_GPIO_Init+0x2d0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x1ca>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a45      	ldr	r2, [pc, #276]	@ (80022fc <HAL_GPIO_Init+0x2d4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x1c6>
 80021ea:	2304      	movs	r3, #4
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x1d8>
 80021ee:	2305      	movs	r3, #5
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x1d8>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x1d8>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x1d8>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x1d8>
 80021fe:	2300      	movs	r3, #0
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	2103      	movs	r1, #3
 8002204:	400a      	ands	r2, r1
 8002206:	00d2      	lsls	r2, r2, #3
 8002208:	4093      	lsls	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002210:	4936      	ldr	r1, [pc, #216]	@ (80022ec <HAL_GPIO_Init+0x2c4>)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3318      	adds	r3, #24
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800221e:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <HAL_GPIO_Init+0x2c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	43da      	mvns	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	035b      	lsls	r3, r3, #13
 8002236:	4013      	ands	r3, r2
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002242:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <HAL_GPIO_Init+0x2c4>)
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002248:	4b28      	ldr	r3, [pc, #160]	@ (80022ec <HAL_GPIO_Init+0x2c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	43da      	mvns	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	039b      	lsls	r3, r3, #14
 8002260:	4013      	ands	r3, r2
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800226c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ec <HAL_GPIO_Init+0x2c4>)
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002272:	4a1e      	ldr	r2, [pc, #120]	@ (80022ec <HAL_GPIO_Init+0x2c4>)
 8002274:	2384      	movs	r3, #132	@ 0x84
 8002276:	58d3      	ldr	r3, [r2, r3]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	43da      	mvns	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	2380      	movs	r3, #128	@ 0x80
 800228a:	029b      	lsls	r3, r3, #10
 800228c:	4013      	ands	r3, r2
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002298:	4914      	ldr	r1, [pc, #80]	@ (80022ec <HAL_GPIO_Init+0x2c4>)
 800229a:	2284      	movs	r2, #132	@ 0x84
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80022a0:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <HAL_GPIO_Init+0x2c4>)
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	58d3      	ldr	r3, [r2, r3]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43da      	mvns	r2, r3
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2380      	movs	r3, #128	@ 0x80
 80022b8:	025b      	lsls	r3, r3, #9
 80022ba:	4013      	ands	r3, r2
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022c6:	4909      	ldr	r1, [pc, #36]	@ (80022ec <HAL_GPIO_Init+0x2c4>)
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	40da      	lsrs	r2, r3
 80022dc:	1e13      	subs	r3, r2, #0
 80022de:	d000      	beq.n	80022e2 <HAL_GPIO_Init+0x2ba>
 80022e0:	e6aa      	b.n	8002038 <HAL_GPIO_Init+0x10>
  }
}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b006      	add	sp, #24
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021800 	.word	0x40021800
 80022f0:	50000400 	.word	0x50000400
 80022f4:	50000800 	.word	0x50000800
 80022f8:	50000c00 	.word	0x50000c00
 80022fc:	50001000 	.word	0x50001000

08002300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a19      	ldr	r2, [pc, #100]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	429a      	cmp	r2, r3
 8002322:	d11f      	bne.n	8002364 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002324:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	0013      	movs	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	189b      	adds	r3, r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4912      	ldr	r1, [pc, #72]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002332:	0018      	movs	r0, r3
 8002334:	f7fd fee6 	bl	8000104 <__udivsi3>
 8002338:	0003      	movs	r3, r0
 800233a:	3301      	adds	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800233e:	e008      	b.n	8002352 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3b01      	subs	r3, #1
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e001      	b.n	8002352 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e009      	b.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002352:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	401a      	ands	r2, r3
 800235c:	2380      	movs	r3, #128	@ 0x80
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	429a      	cmp	r2, r3
 8002362:	d0ed      	beq.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b004      	add	sp, #16
 800236c:	bd80      	pop	{r7, pc}
 800236e:	46c0      	nop			@ (mov r8, r8)
 8002370:	40007000 	.word	0x40007000
 8002374:	fffff9ff 	.word	0xfffff9ff
 8002378:	20000000 	.word	0x20000000
 800237c:	000f4240 	.word	0x000f4240

08002380 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002384:	4b03      	ldr	r3, [pc, #12]	@ (8002394 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	23e0      	movs	r3, #224	@ 0xe0
 800238a:	01db      	lsls	r3, r3, #7
 800238c:	4013      	ands	r3, r2
}
 800238e:	0018      	movs	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f000 fb50 	bl	8002a4c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	d100      	bne.n	80023b8 <HAL_RCC_OscConfig+0x20>
 80023b6:	e07c      	b.n	80024b2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b8:	4bc3      	ldr	r3, [pc, #780]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2238      	movs	r2, #56	@ 0x38
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c2:	4bc1      	ldr	r3, [pc, #772]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2203      	movs	r2, #3
 80023c8:	4013      	ands	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d102      	bne.n	80023d8 <HAL_RCC_OscConfig+0x40>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d002      	beq.n	80023de <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d10b      	bne.n	80023f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023de:	4bba      	ldr	r3, [pc, #744]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	2380      	movs	r3, #128	@ 0x80
 80023e4:	029b      	lsls	r3, r3, #10
 80023e6:	4013      	ands	r3, r2
 80023e8:	d062      	beq.n	80024b0 <HAL_RCC_OscConfig+0x118>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d15e      	bne.n	80024b0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e32a      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	025b      	lsls	r3, r3, #9
 80023fe:	429a      	cmp	r2, r3
 8002400:	d107      	bne.n	8002412 <HAL_RCC_OscConfig+0x7a>
 8002402:	4bb1      	ldr	r3, [pc, #708]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4bb0      	ldr	r3, [pc, #704]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002408:	2180      	movs	r1, #128	@ 0x80
 800240a:	0249      	lsls	r1, r1, #9
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e020      	b.n	8002454 <HAL_RCC_OscConfig+0xbc>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	23a0      	movs	r3, #160	@ 0xa0
 8002418:	02db      	lsls	r3, r3, #11
 800241a:	429a      	cmp	r2, r3
 800241c:	d10e      	bne.n	800243c <HAL_RCC_OscConfig+0xa4>
 800241e:	4baa      	ldr	r3, [pc, #680]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4ba9      	ldr	r3, [pc, #676]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002424:	2180      	movs	r1, #128	@ 0x80
 8002426:	02c9      	lsls	r1, r1, #11
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	4ba6      	ldr	r3, [pc, #664]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4ba5      	ldr	r3, [pc, #660]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002432:	2180      	movs	r1, #128	@ 0x80
 8002434:	0249      	lsls	r1, r1, #9
 8002436:	430a      	orrs	r2, r1
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0xbc>
 800243c:	4ba2      	ldr	r3, [pc, #648]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4ba1      	ldr	r3, [pc, #644]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002442:	49a2      	ldr	r1, [pc, #648]	@ (80026cc <HAL_RCC_OscConfig+0x334>)
 8002444:	400a      	ands	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	4b9f      	ldr	r3, [pc, #636]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b9e      	ldr	r3, [pc, #632]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800244e:	49a0      	ldr	r1, [pc, #640]	@ (80026d0 <HAL_RCC_OscConfig+0x338>)
 8002450:	400a      	ands	r2, r1
 8002452:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d014      	beq.n	8002486 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff f97e 	bl	800175c <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002466:	f7ff f979 	bl	800175c <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	@ 0x64
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e2e9      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002478:	4b93      	ldr	r3, [pc, #588]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	029b      	lsls	r3, r3, #10
 8002480:	4013      	ands	r3, r2
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0xce>
 8002484:	e015      	b.n	80024b2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7ff f969 	bl	800175c <HAL_GetTick>
 800248a:	0003      	movs	r3, r0
 800248c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff f964 	bl	800175c <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	@ 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e2d4      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024a2:	4b89      	ldr	r3, [pc, #548]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	2380      	movs	r3, #128	@ 0x80
 80024a8:	029b      	lsls	r3, r3, #10
 80024aa:	4013      	ands	r3, r2
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0xf8>
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	d100      	bne.n	80024be <HAL_RCC_OscConfig+0x126>
 80024bc:	e099      	b.n	80025f2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024be:	4b82      	ldr	r3, [pc, #520]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2238      	movs	r2, #56	@ 0x38
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c8:	4b7f      	ldr	r3, [pc, #508]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2203      	movs	r2, #3
 80024ce:	4013      	ands	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d102      	bne.n	80024de <HAL_RCC_OscConfig+0x146>
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d135      	bne.n	8002550 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e4:	4b78      	ldr	r3, [pc, #480]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	@ 0x80
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4013      	ands	r3, r2
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_OscConfig+0x164>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e2a7      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b72      	ldr	r3, [pc, #456]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a74      	ldr	r2, [pc, #464]	@ (80026d4 <HAL_RCC_OscConfig+0x33c>)
 8002502:	4013      	ands	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	021a      	lsls	r2, r3, #8
 800250c:	4b6e      	ldr	r3, [pc, #440]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d112      	bne.n	800253e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002518:	4b6b      	ldr	r3, [pc, #428]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a6e      	ldr	r2, [pc, #440]	@ (80026d8 <HAL_RCC_OscConfig+0x340>)
 800251e:	4013      	ands	r3, r2
 8002520:	0019      	movs	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	4b68      	ldr	r3, [pc, #416]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800252c:	4b66      	ldr	r3, [pc, #408]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0adb      	lsrs	r3, r3, #11
 8002532:	2207      	movs	r2, #7
 8002534:	4013      	ands	r3, r2
 8002536:	4a69      	ldr	r2, [pc, #420]	@ (80026dc <HAL_RCC_OscConfig+0x344>)
 8002538:	40da      	lsrs	r2, r3
 800253a:	4b69      	ldr	r3, [pc, #420]	@ (80026e0 <HAL_RCC_OscConfig+0x348>)
 800253c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800253e:	4b69      	ldr	r3, [pc, #420]	@ (80026e4 <HAL_RCC_OscConfig+0x34c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff f8ae 	bl	80016a4 <HAL_InitTick>
 8002548:	1e03      	subs	r3, r0, #0
 800254a:	d051      	beq.n	80025f0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e27d      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d030      	beq.n	80025ba <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002558:	4b5b      	ldr	r3, [pc, #364]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a5e      	ldr	r2, [pc, #376]	@ (80026d8 <HAL_RCC_OscConfig+0x340>)
 800255e:	4013      	ands	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	4b58      	ldr	r3, [pc, #352]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800256c:	4b56      	ldr	r3, [pc, #344]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b55      	ldr	r3, [pc, #340]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002572:	2180      	movs	r1, #128	@ 0x80
 8002574:	0049      	lsls	r1, r1, #1
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7ff f8ef 	bl	800175c <HAL_GetTick>
 800257e:	0003      	movs	r3, r0
 8002580:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002584:	f7ff f8ea 	bl	800175c <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e25a      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002596:	4b4c      	ldr	r3, [pc, #304]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4013      	ands	r3, r2
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	4b49      	ldr	r3, [pc, #292]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4a4b      	ldr	r2, [pc, #300]	@ (80026d4 <HAL_RCC_OscConfig+0x33c>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	021a      	lsls	r2, r3, #8
 80025b2:	4b45      	ldr	r3, [pc, #276]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80025b4:	430a      	orrs	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	e01b      	b.n	80025f2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	4b43      	ldr	r3, [pc, #268]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b42      	ldr	r3, [pc, #264]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80025c0:	4949      	ldr	r1, [pc, #292]	@ (80026e8 <HAL_RCC_OscConfig+0x350>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7ff f8c9 	bl	800175c <HAL_GetTick>
 80025ca:	0003      	movs	r3, r0
 80025cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d0:	f7ff f8c4 	bl	800175c <HAL_GetTick>
 80025d4:	0002      	movs	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e234      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e2:	4b39      	ldr	r3, [pc, #228]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	2380      	movs	r3, #128	@ 0x80
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4013      	ands	r3, r2
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x238>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2208      	movs	r2, #8
 80025f8:	4013      	ands	r3, r2
 80025fa:	d047      	beq.n	800268c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025fc:	4b32      	ldr	r3, [pc, #200]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2238      	movs	r2, #56	@ 0x38
 8002602:	4013      	ands	r3, r2
 8002604:	2b18      	cmp	r3, #24
 8002606:	d10a      	bne.n	800261e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002608:	4b2f      	ldr	r3, [pc, #188]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800260a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260c:	2202      	movs	r2, #2
 800260e:	4013      	ands	r3, r2
 8002610:	d03c      	beq.n	800268c <HAL_RCC_OscConfig+0x2f4>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d138      	bne.n	800268c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e216      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d019      	beq.n	800265a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002626:	4b28      	ldr	r3, [pc, #160]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002628:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800262a:	4b27      	ldr	r3, [pc, #156]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800262c:	2101      	movs	r1, #1
 800262e:	430a      	orrs	r2, r1
 8002630:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7ff f893 	bl	800175c <HAL_GetTick>
 8002636:	0003      	movs	r3, r0
 8002638:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263c:	f7ff f88e 	bl	800175c <HAL_GetTick>
 8002640:	0002      	movs	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1fe      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800264e:	4b1e      	ldr	r3, [pc, #120]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002652:	2202      	movs	r2, #2
 8002654:	4013      	ands	r3, r2
 8002656:	d0f1      	beq.n	800263c <HAL_RCC_OscConfig+0x2a4>
 8002658:	e018      	b.n	800268c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800265a:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 800265c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800265e:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002660:	2101      	movs	r1, #1
 8002662:	438a      	bics	r2, r1
 8002664:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7ff f879 	bl	800175c <HAL_GetTick>
 800266a:	0003      	movs	r3, r0
 800266c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002670:	f7ff f874 	bl	800175c <HAL_GetTick>
 8002674:	0002      	movs	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1e4      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002682:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002686:	2202      	movs	r2, #2
 8002688:	4013      	ands	r3, r2
 800268a:	d1f1      	bne.n	8002670 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2204      	movs	r2, #4
 8002692:	4013      	ands	r3, r2
 8002694:	d100      	bne.n	8002698 <HAL_RCC_OscConfig+0x300>
 8002696:	e0c7      	b.n	8002828 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002698:	231f      	movs	r3, #31
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026a0:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2238      	movs	r2, #56	@ 0x38
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d11f      	bne.n	80026ec <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_RCC_OscConfig+0x330>)
 80026ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b0:	2202      	movs	r2, #2
 80026b2:	4013      	ands	r3, r2
 80026b4:	d100      	bne.n	80026b8 <HAL_RCC_OscConfig+0x320>
 80026b6:	e0b7      	b.n	8002828 <HAL_RCC_OscConfig+0x490>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d000      	beq.n	80026c2 <HAL_RCC_OscConfig+0x32a>
 80026c0:	e0b2      	b.n	8002828 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e1c2      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	40021000 	.word	0x40021000
 80026cc:	fffeffff 	.word	0xfffeffff
 80026d0:	fffbffff 	.word	0xfffbffff
 80026d4:	ffff80ff 	.word	0xffff80ff
 80026d8:	ffffc7ff 	.word	0xffffc7ff
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000004 	.word	0x20000004
 80026e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026ec:	4bb5      	ldr	r3, [pc, #724]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80026ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	055b      	lsls	r3, r3, #21
 80026f4:	4013      	ands	r3, r2
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_OscConfig+0x364>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x366>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d011      	beq.n	8002726 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	4bb0      	ldr	r3, [pc, #704]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002706:	4baf      	ldr	r3, [pc, #700]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002708:	2180      	movs	r1, #128	@ 0x80
 800270a:	0549      	lsls	r1, r1, #21
 800270c:	430a      	orrs	r2, r1
 800270e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002710:	4bac      	ldr	r3, [pc, #688]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002712:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002714:	2380      	movs	r3, #128	@ 0x80
 8002716:	055b      	lsls	r3, r3, #21
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800271e:	231f      	movs	r3, #31
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002726:	4ba8      	ldr	r3, [pc, #672]	@ (80029c8 <HAL_RCC_OscConfig+0x630>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	2380      	movs	r3, #128	@ 0x80
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4013      	ands	r3, r2
 8002730:	d11a      	bne.n	8002768 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002732:	4ba5      	ldr	r3, [pc, #660]	@ (80029c8 <HAL_RCC_OscConfig+0x630>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4ba4      	ldr	r3, [pc, #656]	@ (80029c8 <HAL_RCC_OscConfig+0x630>)
 8002738:	2180      	movs	r1, #128	@ 0x80
 800273a:	0049      	lsls	r1, r1, #1
 800273c:	430a      	orrs	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002740:	f7ff f80c 	bl	800175c <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7ff f807 	bl	800175c <HAL_GetTick>
 800274e:	0002      	movs	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e177      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275c:	4b9a      	ldr	r3, [pc, #616]	@ (80029c8 <HAL_RCC_OscConfig+0x630>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4013      	ands	r3, r2
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x3e6>
 8002770:	4b94      	ldr	r3, [pc, #592]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002772:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002774:	4b93      	ldr	r3, [pc, #588]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002776:	2101      	movs	r1, #1
 8002778:	430a      	orrs	r2, r1
 800277a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800277c:	e01c      	b.n	80027b8 <HAL_RCC_OscConfig+0x420>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b05      	cmp	r3, #5
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x408>
 8002786:	4b8f      	ldr	r3, [pc, #572]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002788:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800278a:	4b8e      	ldr	r3, [pc, #568]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 800278c:	2104      	movs	r1, #4
 800278e:	430a      	orrs	r2, r1
 8002790:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002792:	4b8c      	ldr	r3, [pc, #560]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002794:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002796:	4b8b      	ldr	r3, [pc, #556]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002798:	2101      	movs	r1, #1
 800279a:	430a      	orrs	r2, r1
 800279c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0x420>
 80027a0:	4b88      	ldr	r3, [pc, #544]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80027a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027a4:	4b87      	ldr	r3, [pc, #540]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	438a      	bics	r2, r1
 80027aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027ac:	4b85      	ldr	r3, [pc, #532]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80027ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027b0:	4b84      	ldr	r3, [pc, #528]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80027b2:	2104      	movs	r1, #4
 80027b4:	438a      	bics	r2, r1
 80027b6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d014      	beq.n	80027ea <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe ffcc 	bl	800175c <HAL_GetTick>
 80027c4:	0003      	movs	r3, r0
 80027c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c8:	e009      	b.n	80027de <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe ffc7 	bl	800175c <HAL_GetTick>
 80027ce:	0002      	movs	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	4a7d      	ldr	r2, [pc, #500]	@ (80029cc <HAL_RCC_OscConfig+0x634>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e136      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027de:	4b79      	ldr	r3, [pc, #484]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80027e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e2:	2202      	movs	r2, #2
 80027e4:	4013      	ands	r3, r2
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x432>
 80027e8:	e013      	b.n	8002812 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe ffb7 	bl	800175c <HAL_GetTick>
 80027ee:	0003      	movs	r3, r0
 80027f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f2:	e009      	b.n	8002808 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f4:	f7fe ffb2 	bl	800175c <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	4a73      	ldr	r2, [pc, #460]	@ (80029cc <HAL_RCC_OscConfig+0x634>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e121      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002808:	4b6e      	ldr	r3, [pc, #440]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 800280a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280c:	2202      	movs	r2, #2
 800280e:	4013      	ands	r3, r2
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002812:	231f      	movs	r3, #31
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800281c:	4b69      	ldr	r3, [pc, #420]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 800281e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002820:	4b68      	ldr	r3, [pc, #416]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002822:	496b      	ldr	r1, [pc, #428]	@ (80029d0 <HAL_RCC_OscConfig+0x638>)
 8002824:	400a      	ands	r2, r1
 8002826:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2220      	movs	r2, #32
 800282e:	4013      	ands	r3, r2
 8002830:	d039      	beq.n	80028a6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01b      	beq.n	8002872 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800283a:	4b62      	ldr	r3, [pc, #392]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b61      	ldr	r3, [pc, #388]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002840:	2180      	movs	r1, #128	@ 0x80
 8002842:	03c9      	lsls	r1, r1, #15
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe ff88 	bl	800175c <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002852:	f7fe ff83 	bl	800175c <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e0f3      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002864:	4b57      	ldr	r3, [pc, #348]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	4013      	ands	r3, r2
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x4ba>
 8002870:	e019      	b.n	80028a6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002872:	4b54      	ldr	r3, [pc, #336]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b53      	ldr	r3, [pc, #332]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002878:	4956      	ldr	r1, [pc, #344]	@ (80029d4 <HAL_RCC_OscConfig+0x63c>)
 800287a:	400a      	ands	r2, r1
 800287c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287e:	f7fe ff6d 	bl	800175c <HAL_GetTick>
 8002882:	0003      	movs	r3, r0
 8002884:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002888:	f7fe ff68 	bl	800175c <HAL_GetTick>
 800288c:	0002      	movs	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e0d8      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800289a:	4b4a      	ldr	r3, [pc, #296]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	2380      	movs	r3, #128	@ 0x80
 80028a0:	041b      	lsls	r3, r3, #16
 80028a2:	4013      	ands	r3, r2
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d100      	bne.n	80028b0 <HAL_RCC_OscConfig+0x518>
 80028ae:	e0cc      	b.n	8002a4a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b0:	4b44      	ldr	r3, [pc, #272]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2238      	movs	r2, #56	@ 0x38
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d100      	bne.n	80028be <HAL_RCC_OscConfig+0x526>
 80028bc:	e07b      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d156      	bne.n	8002974 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b3f      	ldr	r3, [pc, #252]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b3e      	ldr	r3, [pc, #248]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80028cc:	4942      	ldr	r1, [pc, #264]	@ (80029d8 <HAL_RCC_OscConfig+0x640>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe ff43 	bl	800175c <HAL_GetTick>
 80028d6:	0003      	movs	r3, r0
 80028d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe ff3e 	bl	800175c <HAL_GetTick>
 80028e0:	0002      	movs	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0ae      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ee:	4b35      	ldr	r3, [pc, #212]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	2380      	movs	r3, #128	@ 0x80
 80028f4:	049b      	lsls	r3, r3, #18
 80028f6:	4013      	ands	r3, r2
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fa:	4b32      	ldr	r3, [pc, #200]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	4a37      	ldr	r2, [pc, #220]	@ (80029dc <HAL_RCC_OscConfig+0x644>)
 8002900:	4013      	ands	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002926:	431a      	orrs	r2, r3
 8002928:	4b26      	ldr	r3, [pc, #152]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 800292a:	430a      	orrs	r2, r1
 800292c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292e:	4b25      	ldr	r3, [pc, #148]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b24      	ldr	r3, [pc, #144]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002934:	2180      	movs	r1, #128	@ 0x80
 8002936:	0449      	lsls	r1, r1, #17
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800293c:	4b21      	ldr	r3, [pc, #132]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002942:	2180      	movs	r1, #128	@ 0x80
 8002944:	0549      	lsls	r1, r1, #21
 8002946:	430a      	orrs	r2, r1
 8002948:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe ff07 	bl	800175c <HAL_GetTick>
 800294e:	0003      	movs	r3, r0
 8002950:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe ff02 	bl	800175c <HAL_GetTick>
 8002958:	0002      	movs	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e072      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002966:	4b17      	ldr	r3, [pc, #92]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	2380      	movs	r3, #128	@ 0x80
 800296c:	049b      	lsls	r3, r3, #18
 800296e:	4013      	ands	r3, r2
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x5bc>
 8002972:	e06a      	b.n	8002a4a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002974:	4b13      	ldr	r3, [pc, #76]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 800297a:	4917      	ldr	r1, [pc, #92]	@ (80029d8 <HAL_RCC_OscConfig+0x640>)
 800297c:	400a      	ands	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe feec 	bl	800175c <HAL_GetTick>
 8002984:	0003      	movs	r3, r0
 8002986:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298a:	f7fe fee7 	bl	800175c <HAL_GetTick>
 800298e:	0002      	movs	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e057      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299c:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	049b      	lsls	r3, r3, #18
 80029a4:	4013      	ands	r3, r2
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <HAL_RCC_OscConfig+0x62c>)
 80029ae:	490c      	ldr	r1, [pc, #48]	@ (80029e0 <HAL_RCC_OscConfig+0x648>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	e049      	b.n	8002a4a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d112      	bne.n	80029e4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e044      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40007000 	.word	0x40007000
 80029cc:	00001388 	.word	0x00001388
 80029d0:	efffffff 	.word	0xefffffff
 80029d4:	ffbfffff 	.word	0xffbfffff
 80029d8:	feffffff 	.word	0xfeffffff
 80029dc:	11c1808c 	.word	0x11c1808c
 80029e0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <HAL_RCC_OscConfig+0x6bc>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2203      	movs	r2, #3
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d126      	bne.n	8002a46 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2270      	movs	r2, #112	@ 0x70
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d11f      	bne.n	8002a46 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	23fe      	movs	r3, #254	@ 0xfe
 8002a0a:	01db      	lsls	r3, r3, #7
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d116      	bne.n	8002a46 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	23f8      	movs	r3, #248	@ 0xf8
 8002a1c:	039b      	lsls	r3, r3, #14
 8002a1e:	401a      	ands	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d10e      	bne.n	8002a46 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	23e0      	movs	r3, #224	@ 0xe0
 8002a2c:	051b      	lsls	r3, r3, #20
 8002a2e:	401a      	ands	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	0f5b      	lsrs	r3, r3, #29
 8002a3c:	075a      	lsls	r2, r3, #29
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b008      	add	sp, #32
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0e9      	b.n	8002c40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b76      	ldr	r3, [pc, #472]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2207      	movs	r2, #7
 8002a72:	4013      	ands	r3, r2
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d91e      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b73      	ldr	r3, [pc, #460]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2207      	movs	r2, #7
 8002a80:	4393      	bics	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	4b70      	ldr	r3, [pc, #448]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fe66 	bl	800175c <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a94:	e009      	b.n	8002aaa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a96:	f7fe fe61 	bl	800175c <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c4c <HAL_RCC_ClockConfig+0x1f4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0ca      	b.n	8002c40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aaa:	4b67      	ldr	r3, [pc, #412]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2207      	movs	r2, #7
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1ee      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2202      	movs	r2, #2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d015      	beq.n	8002aee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d006      	beq.n	8002ada <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002acc:	4b60      	ldr	r3, [pc, #384]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4b5f      	ldr	r3, [pc, #380]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad2:	21e0      	movs	r1, #224	@ 0xe0
 8002ad4:	01c9      	lsls	r1, r1, #7
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ada:	4b5d      	ldr	r3, [pc, #372]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4a5d      	ldr	r2, [pc, #372]	@ (8002c54 <HAL_RCC_ClockConfig+0x1fc>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	4b59      	ldr	r3, [pc, #356]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2201      	movs	r2, #1
 8002af4:	4013      	ands	r3, r2
 8002af6:	d057      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b00:	4b53      	ldr	r3, [pc, #332]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	2380      	movs	r3, #128	@ 0x80
 8002b06:	029b      	lsls	r3, r3, #10
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d12b      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e097      	b.n	8002c40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b18:	4b4d      	ldr	r3, [pc, #308]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	049b      	lsls	r3, r3, #18
 8002b20:	4013      	ands	r3, r2
 8002b22:	d11f      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e08b      	b.n	8002c40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b30:	4b47      	ldr	r3, [pc, #284]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d113      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e07f      	b.n	8002c40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b48:	4b41      	ldr	r3, [pc, #260]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d108      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e074      	b.n	8002c40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b56:	4b3e      	ldr	r3, [pc, #248]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e06d      	b.n	8002c40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b64:	4b3a      	ldr	r3, [pc, #232]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2207      	movs	r2, #7
 8002b6a:	4393      	bics	r3, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	4b37      	ldr	r3, [pc, #220]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002b74:	430a      	orrs	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b78:	f7fe fdf0 	bl	800175c <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b80:	e009      	b.n	8002b96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b82:	f7fe fdeb 	bl	800175c <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8002c4c <HAL_RCC_ClockConfig+0x1f4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e054      	b.n	8002c40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	4b2e      	ldr	r3, [pc, #184]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2238      	movs	r2, #56	@ 0x38
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d1ec      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2207      	movs	r2, #7
 8002bae:	4013      	ands	r3, r2
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d21e      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b24      	ldr	r3, [pc, #144]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2207      	movs	r2, #7
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	4b21      	ldr	r3, [pc, #132]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fdc8 	bl	800175c <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bd0:	e009      	b.n	8002be6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd2:	f7fe fdc3 	bl	800175c <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c4c <HAL_RCC_ClockConfig+0x1f4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e02c      	b.n	8002c40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002be6:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2207      	movs	r2, #7
 8002bec:	4013      	ands	r3, r2
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bfe:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4a15      	ldr	r2, [pc, #84]	@ (8002c58 <HAL_RCC_ClockConfig+0x200>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	0019      	movs	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c12:	f000 f829 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8002c16:	0001      	movs	r1, r0
 8002c18:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	220f      	movs	r2, #15
 8002c20:	401a      	ands	r2, r3
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <HAL_RCC_ClockConfig+0x204>)
 8002c24:	0092      	lsls	r2, r2, #2
 8002c26:	58d3      	ldr	r3, [r2, r3]
 8002c28:	221f      	movs	r2, #31
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	000a      	movs	r2, r1
 8002c2e:	40da      	lsrs	r2, r3
 8002c30:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_RCC_ClockConfig+0x208>)
 8002c32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c34:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <HAL_RCC_ClockConfig+0x20c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7fe fd33 	bl	80016a4 <HAL_InitTick>
 8002c3e:	0003      	movs	r3, r0
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b004      	add	sp, #16
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	00001388 	.word	0x00001388
 8002c50:	40021000 	.word	0x40021000
 8002c54:	fffff0ff 	.word	0xfffff0ff
 8002c58:	ffff8fff 	.word	0xffff8fff
 8002c5c:	08004c40 	.word	0x08004c40
 8002c60:	20000000 	.word	0x20000000
 8002c64:	20000004 	.word	0x20000004

08002c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2238      	movs	r2, #56	@ 0x38
 8002c74:	4013      	ands	r3, r2
 8002c76:	d10f      	bne.n	8002c98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c78:	4b39      	ldr	r3, [pc, #228]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0adb      	lsrs	r3, r3, #11
 8002c7e:	2207      	movs	r2, #7
 8002c80:	4013      	ands	r3, r2
 8002c82:	2201      	movs	r2, #1
 8002c84:	409a      	lsls	r2, r3
 8002c86:	0013      	movs	r3, r2
 8002c88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c8a:	6839      	ldr	r1, [r7, #0]
 8002c8c:	4835      	ldr	r0, [pc, #212]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c8e:	f7fd fa39 	bl	8000104 <__udivsi3>
 8002c92:	0003      	movs	r3, r0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	e05d      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c98:	4b31      	ldr	r3, [pc, #196]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2238      	movs	r2, #56	@ 0x38
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d102      	bne.n	8002caa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ca4:	4b30      	ldr	r3, [pc, #192]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	e054      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002caa:	4b2d      	ldr	r3, [pc, #180]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2238      	movs	r2, #56	@ 0x38
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d138      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2203      	movs	r2, #3
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cc0:	4b27      	ldr	r3, [pc, #156]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	4013      	ands	r3, r2
 8002cca:	3301      	adds	r3, #1
 8002ccc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	4824      	ldr	r0, [pc, #144]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cd8:	f7fd fa14 	bl	8000104 <__udivsi3>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	0019      	movs	r1, r3
 8002ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	227f      	movs	r2, #127	@ 0x7f
 8002ce8:	4013      	ands	r3, r2
 8002cea:	434b      	muls	r3, r1
 8002cec:	617b      	str	r3, [r7, #20]
        break;
 8002cee:	e00d      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	481c      	ldr	r0, [pc, #112]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cf4:	f7fd fa06 	bl	8000104 <__udivsi3>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	227f      	movs	r2, #127	@ 0x7f
 8002d04:	4013      	ands	r3, r2
 8002d06:	434b      	muls	r3, r1
 8002d08:	617b      	str	r3, [r7, #20]
        break;
 8002d0a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d0c:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0f5b      	lsrs	r3, r3, #29
 8002d12:	2207      	movs	r2, #7
 8002d14:	4013      	ands	r3, r2
 8002d16:	3301      	adds	r3, #1
 8002d18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	6978      	ldr	r0, [r7, #20]
 8002d1e:	f7fd f9f1 	bl	8000104 <__udivsi3>
 8002d22:	0003      	movs	r3, r0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	e015      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d28:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2238      	movs	r2, #56	@ 0x38
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d103      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d3c:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2238      	movs	r2, #56	@ 0x38
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b18      	cmp	r3, #24
 8002d46:	d103      	bne.n	8002d50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d48:	23fa      	movs	r3, #250	@ 0xfa
 8002d4a:	01db      	lsls	r3, r3, #7
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	e001      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d54:	693b      	ldr	r3, [r7, #16]
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b006      	add	sp, #24
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	40021000 	.word	0x40021000
 8002d64:	00f42400 	.word	0x00f42400
 8002d68:	007a1200 	.word	0x007a1200

08002d6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d70:	4b02      	ldr	r3, [pc, #8]	@ (8002d7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	20000000 	.word	0x20000000

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b5b0      	push	{r4, r5, r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d84:	f7ff fff2 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002d88:	0004      	movs	r4, r0
 8002d8a:	f7ff faf9 	bl	8002380 <LL_RCC_GetAPB1Prescaler>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	0b1a      	lsrs	r2, r3, #12
 8002d92:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d94:	0092      	lsls	r2, r2, #2
 8002d96:	58d3      	ldr	r3, [r2, r3]
 8002d98:	221f      	movs	r2, #31
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	40dc      	lsrs	r4, r3
 8002d9e:	0023      	movs	r3, r4
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bdb0      	pop	{r4, r5, r7, pc}
 8002da6:	46c0      	nop			@ (mov r8, r8)
 8002da8:	08004c80 	.word	0x08004c80

08002dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002db4:	2313      	movs	r3, #19
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dbc:	2312      	movs	r3, #18
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002dd0:	e0ad      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd2:	2011      	movs	r0, #17
 8002dd4:	183b      	adds	r3, r7, r0
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dda:	4b47      	ldr	r3, [pc, #284]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ddc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dde:	2380      	movs	r3, #128	@ 0x80
 8002de0:	055b      	lsls	r3, r3, #21
 8002de2:	4013      	ands	r3, r2
 8002de4:	d110      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	4b44      	ldr	r3, [pc, #272]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002de8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002dec:	2180      	movs	r1, #128	@ 0x80
 8002dee:	0549      	lsls	r1, r1, #21
 8002df0:	430a      	orrs	r2, r1
 8002df2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002df4:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002df6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	055b      	lsls	r3, r3, #21
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e02:	183b      	adds	r3, r7, r0
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e08:	4b3c      	ldr	r3, [pc, #240]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e0e:	2180      	movs	r1, #128	@ 0x80
 8002e10:	0049      	lsls	r1, r1, #1
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e16:	f7fe fca1 	bl	800175c <HAL_GetTick>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e1e:	e00b      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e20:	f7fe fc9c 	bl	800175c <HAL_GetTick>
 8002e24:	0002      	movs	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d904      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e2e:	2313      	movs	r3, #19
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2203      	movs	r2, #3
 8002e34:	701a      	strb	r2, [r3, #0]
        break;
 8002e36:	e005      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e38:	4b30      	ldr	r3, [pc, #192]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	2380      	movs	r3, #128	@ 0x80
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4013      	ands	r3, r2
 8002e42:	d0ed      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e44:	2313      	movs	r3, #19
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d15e      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e52:	23c0      	movs	r3, #192	@ 0xc0
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4013      	ands	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d019      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d014      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e6a:	4b23      	ldr	r3, [pc, #140]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6e:	4a24      	ldr	r2, [pc, #144]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e74:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e78:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e7a:	2180      	movs	r1, #128	@ 0x80
 8002e7c:	0249      	lsls	r1, r1, #9
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e86:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e88:	491e      	ldr	r1, [pc, #120]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2201      	movs	r2, #1
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d016      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fc5e 	bl	800175c <HAL_GetTick>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea4:	e00c      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe fc59 	bl	800175c <HAL_GetTick>
 8002eaa:	0002      	movs	r2, r0
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	4a15      	ldr	r2, [pc, #84]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d904      	bls.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002eb6:	2313      	movs	r3, #19
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	2203      	movs	r2, #3
 8002ebc:	701a      	strb	r2, [r3, #0]
            break;
 8002ebe:	e004      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d0ed      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002eca:	2313      	movs	r3, #19
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed4:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed8:	4a09      	ldr	r2, [pc, #36]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ee2:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ee8:	e016      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eea:	2312      	movs	r3, #18
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2213      	movs	r2, #19
 8002ef0:	18ba      	adds	r2, r7, r2
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e00f      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40007000 	.word	0x40007000
 8002f00:	fffffcff 	.word	0xfffffcff
 8002f04:	fffeffff 	.word	0xfffeffff
 8002f08:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0c:	2312      	movs	r3, #18
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	2213      	movs	r2, #19
 8002f12:	18ba      	adds	r2, r7, r2
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f18:	2311      	movs	r3, #17
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f22:	4bb6      	ldr	r3, [pc, #728]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f26:	4bb5      	ldr	r3, [pc, #724]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f28:	49b5      	ldr	r1, [pc, #724]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2201      	movs	r2, #1
 8002f34:	4013      	ands	r3, r2
 8002f36:	d009      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f38:	4bb0      	ldr	r3, [pc, #704]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	4393      	bics	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4bad      	ldr	r3, [pc, #692]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2202      	movs	r2, #2
 8002f52:	4013      	ands	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f56:	4ba9      	ldr	r3, [pc, #676]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	4393      	bics	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	4ba5      	ldr	r3, [pc, #660]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f66:	430a      	orrs	r2, r1
 8002f68:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4013      	ands	r3, r2
 8002f72:	d009      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f74:	4ba1      	ldr	r3, [pc, #644]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f78:	2230      	movs	r2, #48	@ 0x30
 8002f7a:	4393      	bics	r3, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	4b9e      	ldr	r3, [pc, #632]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f84:	430a      	orrs	r2, r1
 8002f86:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f92:	4b9a      	ldr	r3, [pc, #616]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f96:	4a9b      	ldr	r2, [pc, #620]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	4b96      	ldr	r3, [pc, #600]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	2380      	movs	r3, #128	@ 0x80
 8002fac:	015b      	lsls	r3, r3, #5
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002fb2:	4b92      	ldr	r3, [pc, #584]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb6:	4a94      	ldr	r2, [pc, #592]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	4b8e      	ldr	r3, [pc, #568]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	2380      	movs	r3, #128	@ 0x80
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fd2:	4b8a      	ldr	r3, [pc, #552]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd6:	4a8d      	ldr	r2, [pc, #564]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fe0:	4b86      	ldr	r3, [pc, #536]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	2380      	movs	r3, #128	@ 0x80
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d009      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ff2:	4b82      	ldr	r3, [pc, #520]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff6:	4a86      	ldr	r2, [pc, #536]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003000:	4b7e      	ldr	r3, [pc, #504]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003002:	430a      	orrs	r2, r1
 8003004:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2220      	movs	r2, #32
 800300c:	4013      	ands	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003010:	4b7a      	ldr	r3, [pc, #488]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003014:	4a7f      	ldr	r2, [pc, #508]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003016:	4013      	ands	r3, r2
 8003018:	0019      	movs	r1, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	4b77      	ldr	r3, [pc, #476]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003020:	430a      	orrs	r2, r1
 8003022:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2240      	movs	r2, #64	@ 0x40
 800302a:	4013      	ands	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800302e:	4b73      	ldr	r3, [pc, #460]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003032:	4a79      	ldr	r2, [pc, #484]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003034:	4013      	ands	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	4b6f      	ldr	r3, [pc, #444]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800303e:	430a      	orrs	r2, r1
 8003040:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	01db      	lsls	r3, r3, #7
 800304a:	4013      	ands	r3, r2
 800304c:	d015      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800304e:	4b6b      	ldr	r3, [pc, #428]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	0899      	lsrs	r1, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800305a:	4b68      	ldr	r3, [pc, #416]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800305c:	430a      	orrs	r2, r1
 800305e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003064:	2380      	movs	r3, #128	@ 0x80
 8003066:	05db      	lsls	r3, r3, #23
 8003068:	429a      	cmp	r2, r3
 800306a:	d106      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800306c:	4b63      	ldr	r3, [pc, #396]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	4b62      	ldr	r3, [pc, #392]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003072:	2180      	movs	r1, #128	@ 0x80
 8003074:	0249      	lsls	r1, r1, #9
 8003076:	430a      	orrs	r2, r1
 8003078:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	031b      	lsls	r3, r3, #12
 8003082:	4013      	ands	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003086:	4b5d      	ldr	r3, [pc, #372]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308a:	2240      	movs	r2, #64	@ 0x40
 800308c:	4393      	bics	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003094:	4b59      	ldr	r3, [pc, #356]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003096:	430a      	orrs	r2, r1
 8003098:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	@ 0x80
 80030a0:	039b      	lsls	r3, r3, #14
 80030a2:	4013      	ands	r3, r2
 80030a4:	d016      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030a6:	4b55      	ldr	r3, [pc, #340]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030aa:	4a5c      	ldr	r2, [pc, #368]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030b4:	4b51      	ldr	r3, [pc, #324]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030b6:	430a      	orrs	r2, r1
 80030b8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030be:	2380      	movs	r3, #128	@ 0x80
 80030c0:	03db      	lsls	r3, r3, #15
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d106      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030c6:	4b4d      	ldr	r3, [pc, #308]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	4b4c      	ldr	r3, [pc, #304]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030cc:	2180      	movs	r1, #128	@ 0x80
 80030ce:	0449      	lsls	r1, r1, #17
 80030d0:	430a      	orrs	r2, r1
 80030d2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	03db      	lsls	r3, r3, #15
 80030dc:	4013      	ands	r3, r2
 80030de:	d016      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030e0:	4b46      	ldr	r3, [pc, #280]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	0019      	movs	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030ee:	4b43      	ldr	r3, [pc, #268]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030f0:	430a      	orrs	r2, r1
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	045b      	lsls	r3, r3, #17
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d106      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003100:	4b3e      	ldr	r3, [pc, #248]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	4b3d      	ldr	r3, [pc, #244]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003106:	2180      	movs	r1, #128	@ 0x80
 8003108:	0449      	lsls	r1, r1, #17
 800310a:	430a      	orrs	r2, r1
 800310c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	@ 0x80
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	4013      	ands	r3, r2
 8003118:	d014      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800311a:	4b38      	ldr	r3, [pc, #224]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311e:	2203      	movs	r2, #3
 8003120:	4393      	bics	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	4b34      	ldr	r3, [pc, #208]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800312a:	430a      	orrs	r2, r1
 800312c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d106      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003136:	4b31      	ldr	r3, [pc, #196]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	4b30      	ldr	r3, [pc, #192]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800313c:	2180      	movs	r1, #128	@ 0x80
 800313e:	0249      	lsls	r1, r1, #9
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	@ 0x80
 800314a:	019b      	lsls	r3, r3, #6
 800314c:	4013      	ands	r3, r2
 800314e:	d014      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003150:	4b2a      	ldr	r3, [pc, #168]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	220c      	movs	r2, #12
 8003156:	4393      	bics	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800315e:	4b27      	ldr	r3, [pc, #156]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003160:	430a      	orrs	r2, r1
 8003162:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	2b04      	cmp	r3, #4
 800316a:	d106      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800316c:	4b23      	ldr	r3, [pc, #140]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	4b22      	ldr	r3, [pc, #136]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003172:	2180      	movs	r1, #128	@ 0x80
 8003174:	0249      	lsls	r1, r1, #9
 8003176:	430a      	orrs	r2, r1
 8003178:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	2380      	movs	r3, #128	@ 0x80
 8003180:	045b      	lsls	r3, r3, #17
 8003182:	4013      	ands	r3, r2
 8003184:	d016      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003186:	4b1d      	ldr	r3, [pc, #116]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	4a22      	ldr	r2, [pc, #136]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003194:	4b19      	ldr	r3, [pc, #100]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003196:	430a      	orrs	r2, r1
 8003198:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800319e:	2380      	movs	r3, #128	@ 0x80
 80031a0:	019b      	lsls	r3, r3, #6
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d106      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031a6:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	4b14      	ldr	r3, [pc, #80]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ac:	2180      	movs	r1, #128	@ 0x80
 80031ae:	0449      	lsls	r1, r1, #17
 80031b0:	430a      	orrs	r2, r1
 80031b2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	2380      	movs	r3, #128	@ 0x80
 80031ba:	049b      	lsls	r3, r3, #18
 80031bc:	4013      	ands	r3, r2
 80031be:	d016      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031c0:	4b0e      	ldr	r3, [pc, #56]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	4a10      	ldr	r2, [pc, #64]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031ce:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031d0:	430a      	orrs	r2, r1
 80031d2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031d8:	2380      	movs	r3, #128	@ 0x80
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	429a      	cmp	r2, r3
 80031de:	d106      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031e0:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031e6:	2180      	movs	r1, #128	@ 0x80
 80031e8:	0449      	lsls	r1, r1, #17
 80031ea:	430a      	orrs	r2, r1
 80031ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80031ee:	2312      	movs	r3, #18
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	781b      	ldrb	r3, [r3, #0]
}
 80031f4:	0018      	movs	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b006      	add	sp, #24
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	efffffff 	.word	0xefffffff
 8003204:	fffff3ff 	.word	0xfffff3ff
 8003208:	fffffcff 	.word	0xfffffcff
 800320c:	fff3ffff 	.word	0xfff3ffff
 8003210:	ffcfffff 	.word	0xffcfffff
 8003214:	ffffcfff 	.word	0xffffcfff
 8003218:	ffff3fff 	.word	0xffff3fff
 800321c:	ffbfffff 	.word	0xffbfffff
 8003220:	feffffff 	.word	0xfeffffff

08003224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e046      	b.n	80032c4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2288      	movs	r2, #136	@ 0x88
 800323a:	589b      	ldr	r3, [r3, r2]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2284      	movs	r2, #132	@ 0x84
 8003244:	2100      	movs	r1, #0
 8003246:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	0018      	movs	r0, r3
 800324c:	f7fd fd7a 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2288      	movs	r2, #136	@ 0x88
 8003254:	2124      	movs	r1, #36	@ 0x24
 8003256:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2101      	movs	r1, #1
 8003264:	438a      	bics	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	0018      	movs	r0, r3
 8003274:	f000 feb8 	bl	8003fe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	0018      	movs	r0, r3
 800327c:	f000 fb5e 	bl	800393c <UART_SetConfig>
 8003280:	0003      	movs	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e01c      	b.n	80032c4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	490d      	ldr	r1, [pc, #52]	@ (80032cc <HAL_UART_Init+0xa8>)
 8003296:	400a      	ands	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	212a      	movs	r1, #42	@ 0x2a
 80032a6:	438a      	bics	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 ff47 	bl	8004150 <UART_CheckIdleState>
 80032c2:	0003      	movs	r3, r0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	ffffb7ff 	.word	0xffffb7ff

080032d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032d0:	b5b0      	push	{r4, r5, r7, lr}
 80032d2:	b0aa      	sub	sp, #168	@ 0xa8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	22a4      	movs	r2, #164	@ 0xa4
 80032e0:	18b9      	adds	r1, r7, r2
 80032e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	20a0      	movs	r0, #160	@ 0xa0
 80032ec:	1839      	adds	r1, r7, r0
 80032ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	249c      	movs	r4, #156	@ 0x9c
 80032f8:	1939      	adds	r1, r7, r4
 80032fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032fc:	0011      	movs	r1, r2
 80032fe:	18bb      	adds	r3, r7, r2
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4aa2      	ldr	r2, [pc, #648]	@ (800358c <HAL_UART_IRQHandler+0x2bc>)
 8003304:	4013      	ands	r3, r2
 8003306:	2298      	movs	r2, #152	@ 0x98
 8003308:	18bd      	adds	r5, r7, r2
 800330a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800330c:	18bb      	adds	r3, r7, r2
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11a      	bne.n	800334a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003314:	187b      	adds	r3, r7, r1
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2220      	movs	r2, #32
 800331a:	4013      	ands	r3, r2
 800331c:	d015      	beq.n	800334a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800331e:	183b      	adds	r3, r7, r0
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2220      	movs	r2, #32
 8003324:	4013      	ands	r3, r2
 8003326:	d105      	bne.n	8003334 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003328:	193b      	adds	r3, r7, r4
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	2380      	movs	r3, #128	@ 0x80
 800332e:	055b      	lsls	r3, r3, #21
 8003330:	4013      	ands	r3, r2
 8003332:	d00a      	beq.n	800334a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003338:	2b00      	cmp	r3, #0
 800333a:	d100      	bne.n	800333e <HAL_UART_IRQHandler+0x6e>
 800333c:	e2dc      	b.n	80038f8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	0010      	movs	r0, r2
 8003346:	4798      	blx	r3
      }
      return;
 8003348:	e2d6      	b.n	80038f8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800334a:	2398      	movs	r3, #152	@ 0x98
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d100      	bne.n	8003356 <HAL_UART_IRQHandler+0x86>
 8003354:	e122      	b.n	800359c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003356:	239c      	movs	r3, #156	@ 0x9c
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a8c      	ldr	r2, [pc, #560]	@ (8003590 <HAL_UART_IRQHandler+0x2c0>)
 800335e:	4013      	ands	r3, r2
 8003360:	d106      	bne.n	8003370 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003362:	23a0      	movs	r3, #160	@ 0xa0
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a8a      	ldr	r2, [pc, #552]	@ (8003594 <HAL_UART_IRQHandler+0x2c4>)
 800336a:	4013      	ands	r3, r2
 800336c:	d100      	bne.n	8003370 <HAL_UART_IRQHandler+0xa0>
 800336e:	e115      	b.n	800359c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003370:	23a4      	movs	r3, #164	@ 0xa4
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2201      	movs	r2, #1
 8003378:	4013      	ands	r3, r2
 800337a:	d012      	beq.n	80033a2 <HAL_UART_IRQHandler+0xd2>
 800337c:	23a0      	movs	r3, #160	@ 0xa0
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4013      	ands	r3, r2
 8003388:	d00b      	beq.n	80033a2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2201      	movs	r2, #1
 8003390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2290      	movs	r2, #144	@ 0x90
 8003396:	589b      	ldr	r3, [r3, r2]
 8003398:	2201      	movs	r2, #1
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2190      	movs	r1, #144	@ 0x90
 80033a0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033a2:	23a4      	movs	r3, #164	@ 0xa4
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2202      	movs	r2, #2
 80033aa:	4013      	ands	r3, r2
 80033ac:	d011      	beq.n	80033d2 <HAL_UART_IRQHandler+0x102>
 80033ae:	239c      	movs	r3, #156	@ 0x9c
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	4013      	ands	r3, r2
 80033b8:	d00b      	beq.n	80033d2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2202      	movs	r2, #2
 80033c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2290      	movs	r2, #144	@ 0x90
 80033c6:	589b      	ldr	r3, [r3, r2]
 80033c8:	2204      	movs	r2, #4
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2190      	movs	r1, #144	@ 0x90
 80033d0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033d2:	23a4      	movs	r3, #164	@ 0xa4
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2204      	movs	r2, #4
 80033da:	4013      	ands	r3, r2
 80033dc:	d011      	beq.n	8003402 <HAL_UART_IRQHandler+0x132>
 80033de:	239c      	movs	r3, #156	@ 0x9c
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2201      	movs	r2, #1
 80033e6:	4013      	ands	r3, r2
 80033e8:	d00b      	beq.n	8003402 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2204      	movs	r2, #4
 80033f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2290      	movs	r2, #144	@ 0x90
 80033f6:	589b      	ldr	r3, [r3, r2]
 80033f8:	2202      	movs	r2, #2
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2190      	movs	r1, #144	@ 0x90
 8003400:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003402:	23a4      	movs	r3, #164	@ 0xa4
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2208      	movs	r2, #8
 800340a:	4013      	ands	r3, r2
 800340c:	d017      	beq.n	800343e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800340e:	23a0      	movs	r3, #160	@ 0xa0
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2220      	movs	r2, #32
 8003416:	4013      	ands	r3, r2
 8003418:	d105      	bne.n	8003426 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800341a:	239c      	movs	r3, #156	@ 0x9c
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a5b      	ldr	r2, [pc, #364]	@ (8003590 <HAL_UART_IRQHandler+0x2c0>)
 8003422:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003424:	d00b      	beq.n	800343e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2208      	movs	r2, #8
 800342c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2290      	movs	r2, #144	@ 0x90
 8003432:	589b      	ldr	r3, [r3, r2]
 8003434:	2208      	movs	r2, #8
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2190      	movs	r1, #144	@ 0x90
 800343c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800343e:	23a4      	movs	r3, #164	@ 0xa4
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	2380      	movs	r3, #128	@ 0x80
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	4013      	ands	r3, r2
 800344a:	d013      	beq.n	8003474 <HAL_UART_IRQHandler+0x1a4>
 800344c:	23a0      	movs	r3, #160	@ 0xa0
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	2380      	movs	r3, #128	@ 0x80
 8003454:	04db      	lsls	r3, r3, #19
 8003456:	4013      	ands	r3, r2
 8003458:	d00c      	beq.n	8003474 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2280      	movs	r2, #128	@ 0x80
 8003460:	0112      	lsls	r2, r2, #4
 8003462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2290      	movs	r2, #144	@ 0x90
 8003468:	589b      	ldr	r3, [r3, r2]
 800346a:	2220      	movs	r2, #32
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2190      	movs	r1, #144	@ 0x90
 8003472:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2290      	movs	r2, #144	@ 0x90
 8003478:	589b      	ldr	r3, [r3, r2]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d100      	bne.n	8003480 <HAL_UART_IRQHandler+0x1b0>
 800347e:	e23d      	b.n	80038fc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003480:	23a4      	movs	r3, #164	@ 0xa4
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2220      	movs	r2, #32
 8003488:	4013      	ands	r3, r2
 800348a:	d015      	beq.n	80034b8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800348c:	23a0      	movs	r3, #160	@ 0xa0
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2220      	movs	r2, #32
 8003494:	4013      	ands	r3, r2
 8003496:	d106      	bne.n	80034a6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003498:	239c      	movs	r3, #156	@ 0x9c
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	2380      	movs	r3, #128	@ 0x80
 80034a0:	055b      	lsls	r3, r3, #21
 80034a2:	4013      	ands	r3, r2
 80034a4:	d008      	beq.n	80034b8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	0010      	movs	r0, r2
 80034b6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2290      	movs	r2, #144	@ 0x90
 80034bc:	589b      	ldr	r3, [r3, r2]
 80034be:	2194      	movs	r1, #148	@ 0x94
 80034c0:	187a      	adds	r2, r7, r1
 80034c2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2240      	movs	r2, #64	@ 0x40
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b40      	cmp	r3, #64	@ 0x40
 80034d0:	d004      	beq.n	80034dc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034d2:	187b      	adds	r3, r7, r1
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2228      	movs	r2, #40	@ 0x28
 80034d8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034da:	d04c      	beq.n	8003576 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	0018      	movs	r0, r3
 80034e0:	f001 f836 	bl	8004550 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2240      	movs	r2, #64	@ 0x40
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b40      	cmp	r3, #64	@ 0x40
 80034f0:	d13c      	bne.n	800356c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f2:	f3ef 8310 	mrs	r3, PRIMASK
 80034f6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80034f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fa:	2090      	movs	r0, #144	@ 0x90
 80034fc:	183a      	adds	r2, r7, r0
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	2301      	movs	r3, #1
 8003502:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003506:	f383 8810 	msr	PRIMASK, r3
}
 800350a:	46c0      	nop			@ (mov r8, r8)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2140      	movs	r1, #64	@ 0x40
 8003518:	438a      	bics	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	183b      	adds	r3, r7, r0
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003522:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003524:	f383 8810 	msr	PRIMASK, r3
}
 8003528:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2280      	movs	r2, #128	@ 0x80
 800352e:	589b      	ldr	r3, [r3, r2]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d016      	beq.n	8003562 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2280      	movs	r2, #128	@ 0x80
 8003538:	589b      	ldr	r3, [r3, r2]
 800353a:	4a17      	ldr	r2, [pc, #92]	@ (8003598 <HAL_UART_IRQHandler+0x2c8>)
 800353c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2280      	movs	r2, #128	@ 0x80
 8003542:	589b      	ldr	r3, [r3, r2]
 8003544:	0018      	movs	r0, r3
 8003546:	f7fe fb99 	bl	8001c7c <HAL_DMA_Abort_IT>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d01c      	beq.n	8003588 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2280      	movs	r2, #128	@ 0x80
 8003552:	589b      	ldr	r3, [r3, r2]
 8003554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	2180      	movs	r1, #128	@ 0x80
 800355a:	5852      	ldr	r2, [r2, r1]
 800355c:	0010      	movs	r0, r2
 800355e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003560:	e012      	b.n	8003588 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	0018      	movs	r0, r3
 8003566:	f000 f9e1 	bl	800392c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356a:	e00d      	b.n	8003588 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f9dc 	bl	800392c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	e008      	b.n	8003588 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 f9d7 	bl	800392c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2290      	movs	r2, #144	@ 0x90
 8003582:	2100      	movs	r1, #0
 8003584:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003586:	e1b9      	b.n	80038fc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003588:	46c0      	nop			@ (mov r8, r8)
    return;
 800358a:	e1b7      	b.n	80038fc <HAL_UART_IRQHandler+0x62c>
 800358c:	0000080f 	.word	0x0000080f
 8003590:	10000001 	.word	0x10000001
 8003594:	04000120 	.word	0x04000120
 8003598:	08004815 	.word	0x08004815

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d000      	beq.n	80035a6 <HAL_UART_IRQHandler+0x2d6>
 80035a4:	e13e      	b.n	8003824 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035a6:	23a4      	movs	r3, #164	@ 0xa4
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2210      	movs	r2, #16
 80035ae:	4013      	ands	r3, r2
 80035b0:	d100      	bne.n	80035b4 <HAL_UART_IRQHandler+0x2e4>
 80035b2:	e137      	b.n	8003824 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035b4:	23a0      	movs	r3, #160	@ 0xa0
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2210      	movs	r2, #16
 80035bc:	4013      	ands	r3, r2
 80035be:	d100      	bne.n	80035c2 <HAL_UART_IRQHandler+0x2f2>
 80035c0:	e130      	b.n	8003824 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2210      	movs	r2, #16
 80035c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2240      	movs	r2, #64	@ 0x40
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b40      	cmp	r3, #64	@ 0x40
 80035d6:	d000      	beq.n	80035da <HAL_UART_IRQHandler+0x30a>
 80035d8:	e0a4      	b.n	8003724 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2280      	movs	r2, #128	@ 0x80
 80035de:	589b      	ldr	r3, [r3, r2]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	217e      	movs	r1, #126	@ 0x7e
 80035e6:	187b      	adds	r3, r7, r1
 80035e8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d100      	bne.n	80035f4 <HAL_UART_IRQHandler+0x324>
 80035f2:	e185      	b.n	8003900 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	225c      	movs	r2, #92	@ 0x5c
 80035f8:	5a9b      	ldrh	r3, [r3, r2]
 80035fa:	187a      	adds	r2, r7, r1
 80035fc:	8812      	ldrh	r2, [r2, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d300      	bcc.n	8003604 <HAL_UART_IRQHandler+0x334>
 8003602:	e17d      	b.n	8003900 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	187a      	adds	r2, r7, r1
 8003608:	215e      	movs	r1, #94	@ 0x5e
 800360a:	8812      	ldrh	r2, [r2, #0]
 800360c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2280      	movs	r2, #128	@ 0x80
 8003612:	589b      	ldr	r3, [r3, r2]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2220      	movs	r2, #32
 800361a:	4013      	ands	r3, r2
 800361c:	d170      	bne.n	8003700 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361e:	f3ef 8310 	mrs	r3, PRIMASK
 8003622:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003626:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003628:	2301      	movs	r3, #1
 800362a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362e:	f383 8810 	msr	PRIMASK, r3
}
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	49b4      	ldr	r1, [pc, #720]	@ (8003910 <HAL_UART_IRQHandler+0x640>)
 8003640:	400a      	ands	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003646:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364a:	f383 8810 	msr	PRIMASK, r3
}
 800364e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003650:	f3ef 8310 	mrs	r3, PRIMASK
 8003654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	677b      	str	r3, [r7, #116]	@ 0x74
 800365a:	2301      	movs	r3, #1
 800365c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003660:	f383 8810 	msr	PRIMASK, r3
}
 8003664:	46c0      	nop			@ (mov r8, r8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	438a      	bics	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003678:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003682:	f3ef 8310 	mrs	r3, PRIMASK
 8003686:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800368a:	673b      	str	r3, [r7, #112]	@ 0x70
 800368c:	2301      	movs	r3, #1
 800368e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2140      	movs	r1, #64	@ 0x40
 80036a4:	438a      	bics	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036aa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ae:	f383 8810 	msr	PRIMASK, r3
}
 80036b2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	228c      	movs	r2, #140	@ 0x8c
 80036b8:	2120      	movs	r1, #32
 80036ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c2:	f3ef 8310 	mrs	r3, PRIMASK
 80036c6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80036c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036cc:	2301      	movs	r3, #1
 80036ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2110      	movs	r1, #16
 80036e4:	438a      	bics	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2280      	movs	r2, #128	@ 0x80
 80036f8:	589b      	ldr	r3, [r3, r2]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7fe fa5e 	bl	8001bbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	225c      	movs	r2, #92	@ 0x5c
 800370a:	5a9a      	ldrh	r2, [r3, r2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	215e      	movs	r1, #94	@ 0x5e
 8003710:	5a5b      	ldrh	r3, [r3, r1]
 8003712:	b29b      	uxth	r3, r3
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	0011      	movs	r1, r2
 800371c:	0018      	movs	r0, r3
 800371e:	f7fd f965 	bl	80009ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003722:	e0ed      	b.n	8003900 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	225c      	movs	r2, #92	@ 0x5c
 8003728:	5a99      	ldrh	r1, [r3, r2]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	225e      	movs	r2, #94	@ 0x5e
 800372e:	5a9b      	ldrh	r3, [r3, r2]
 8003730:	b29a      	uxth	r2, r3
 8003732:	208e      	movs	r0, #142	@ 0x8e
 8003734:	183b      	adds	r3, r7, r0
 8003736:	1a8a      	subs	r2, r1, r2
 8003738:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	225e      	movs	r2, #94	@ 0x5e
 800373e:	5a9b      	ldrh	r3, [r3, r2]
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d100      	bne.n	8003748 <HAL_UART_IRQHandler+0x478>
 8003746:	e0dd      	b.n	8003904 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003748:	183b      	adds	r3, r7, r0
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d100      	bne.n	8003752 <HAL_UART_IRQHandler+0x482>
 8003750:	e0d8      	b.n	8003904 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003752:	f3ef 8310 	mrs	r3, PRIMASK
 8003756:	60fb      	str	r3, [r7, #12]
  return(result);
 8003758:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800375a:	2488      	movs	r4, #136	@ 0x88
 800375c:	193a      	adds	r2, r7, r4
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	2301      	movs	r3, #1
 8003762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4967      	ldr	r1, [pc, #412]	@ (8003914 <HAL_UART_IRQHandler+0x644>)
 8003778:	400a      	ands	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	193b      	adds	r3, r7, r4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378a:	f3ef 8310 	mrs	r3, PRIMASK
 800378e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003790:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003792:	2484      	movs	r4, #132	@ 0x84
 8003794:	193a      	adds	r2, r7, r4
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	2301      	movs	r3, #1
 800379a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f383 8810 	msr	PRIMASK, r3
}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	495a      	ldr	r1, [pc, #360]	@ (8003918 <HAL_UART_IRQHandler+0x648>)
 80037b0:	400a      	ands	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	193b      	adds	r3, r7, r4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f383 8810 	msr	PRIMASK, r3
}
 80037c0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	228c      	movs	r2, #140	@ 0x8c
 80037c6:	2120      	movs	r1, #32
 80037c8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d6:	f3ef 8310 	mrs	r3, PRIMASK
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037de:	2480      	movs	r4, #128	@ 0x80
 80037e0:	193a      	adds	r2, r7, r4
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	2301      	movs	r3, #1
 80037e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2110      	movs	r1, #16
 80037fc:	438a      	bics	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	193b      	adds	r3, r7, r4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003808:	f383 8810 	msr	PRIMASK, r3
}
 800380c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003814:	183b      	adds	r3, r7, r0
 8003816:	881a      	ldrh	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	0011      	movs	r1, r2
 800381c:	0018      	movs	r0, r3
 800381e:	f7fd f8e5 	bl	80009ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003822:	e06f      	b.n	8003904 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003824:	23a4      	movs	r3, #164	@ 0xa4
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	2380      	movs	r3, #128	@ 0x80
 800382c:	035b      	lsls	r3, r3, #13
 800382e:	4013      	ands	r3, r2
 8003830:	d010      	beq.n	8003854 <HAL_UART_IRQHandler+0x584>
 8003832:	239c      	movs	r3, #156	@ 0x9c
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	@ 0x80
 800383a:	03db      	lsls	r3, r3, #15
 800383c:	4013      	ands	r3, r2
 800383e:	d009      	beq.n	8003854 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2280      	movs	r2, #128	@ 0x80
 8003846:	0352      	lsls	r2, r2, #13
 8003848:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0018      	movs	r0, r3
 800384e:	f001 f824 	bl	800489a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003852:	e05a      	b.n	800390a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003854:	23a4      	movs	r3, #164	@ 0xa4
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2280      	movs	r2, #128	@ 0x80
 800385c:	4013      	ands	r3, r2
 800385e:	d016      	beq.n	800388e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003860:	23a0      	movs	r3, #160	@ 0xa0
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2280      	movs	r2, #128	@ 0x80
 8003868:	4013      	ands	r3, r2
 800386a:	d106      	bne.n	800387a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800386c:	239c      	movs	r3, #156	@ 0x9c
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	2380      	movs	r3, #128	@ 0x80
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	4013      	ands	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800387e:	2b00      	cmp	r3, #0
 8003880:	d042      	beq.n	8003908 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	0010      	movs	r0, r2
 800388a:	4798      	blx	r3
    }
    return;
 800388c:	e03c      	b.n	8003908 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800388e:	23a4      	movs	r3, #164	@ 0xa4
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2240      	movs	r2, #64	@ 0x40
 8003896:	4013      	ands	r3, r2
 8003898:	d00a      	beq.n	80038b0 <HAL_UART_IRQHandler+0x5e0>
 800389a:	23a0      	movs	r3, #160	@ 0xa0
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2240      	movs	r2, #64	@ 0x40
 80038a2:	4013      	ands	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 ffca 	bl	8004842 <UART_EndTransmit_IT>
    return;
 80038ae:	e02c      	b.n	800390a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80038b0:	23a4      	movs	r3, #164	@ 0xa4
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	2380      	movs	r3, #128	@ 0x80
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	4013      	ands	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <HAL_UART_IRQHandler+0x606>
 80038be:	23a0      	movs	r3, #160	@ 0xa0
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	2380      	movs	r3, #128	@ 0x80
 80038c6:	05db      	lsls	r3, r3, #23
 80038c8:	4013      	ands	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	0018      	movs	r0, r3
 80038d0:	f000 fff3 	bl	80048ba <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038d4:	e019      	b.n	800390a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80038d6:	23a4      	movs	r3, #164	@ 0xa4
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	2380      	movs	r3, #128	@ 0x80
 80038de:	045b      	lsls	r3, r3, #17
 80038e0:	4013      	ands	r3, r2
 80038e2:	d012      	beq.n	800390a <HAL_UART_IRQHandler+0x63a>
 80038e4:	23a0      	movs	r3, #160	@ 0xa0
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	da0d      	bge.n	800390a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f000 ffda 	bl	80048aa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038f6:	e008      	b.n	800390a <HAL_UART_IRQHandler+0x63a>
      return;
 80038f8:	46c0      	nop			@ (mov r8, r8)
 80038fa:	e006      	b.n	800390a <HAL_UART_IRQHandler+0x63a>
    return;
 80038fc:	46c0      	nop			@ (mov r8, r8)
 80038fe:	e004      	b.n	800390a <HAL_UART_IRQHandler+0x63a>
      return;
 8003900:	46c0      	nop			@ (mov r8, r8)
 8003902:	e002      	b.n	800390a <HAL_UART_IRQHandler+0x63a>
      return;
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	e000      	b.n	800390a <HAL_UART_IRQHandler+0x63a>
    return;
 8003908:	46c0      	nop			@ (mov r8, r8)
  }
}
 800390a:	46bd      	mov	sp, r7
 800390c:	b02a      	add	sp, #168	@ 0xa8
 800390e:	bdb0      	pop	{r4, r5, r7, pc}
 8003910:	fffffeff 	.word	0xfffffeff
 8003914:	fffffedf 	.word	0xfffffedf
 8003918:	effffffe 	.word	0xeffffffe

0800391c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003924:	46c0      	nop			@ (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b002      	add	sp, #8
 800393a:	bd80      	pop	{r7, pc}

0800393c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800393c:	b5b0      	push	{r4, r5, r7, lr}
 800393e:	b090      	sub	sp, #64	@ 0x40
 8003940:	af00      	add	r7, sp, #0
 8003942:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003944:	231a      	movs	r3, #26
 8003946:	2220      	movs	r2, #32
 8003948:	189b      	adds	r3, r3, r2
 800394a:	19db      	adds	r3, r3, r7
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	431a      	orrs	r2, r3
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	431a      	orrs	r2, r3
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	4313      	orrs	r3, r2
 8003966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4ac1      	ldr	r2, [pc, #772]	@ (8003c74 <UART_SetConfig+0x338>)
 8003970:	4013      	ands	r3, r2
 8003972:	0019      	movs	r1, r3
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397a:	430b      	orrs	r3, r1
 800397c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4abc      	ldr	r2, [pc, #752]	@ (8003c78 <UART_SetConfig+0x33c>)
 8003986:	4013      	ands	r3, r2
 8003988:	0018      	movs	r0, r3
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	68d9      	ldr	r1, [r3, #12]
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	0003      	movs	r3, r0
 8003994:	430b      	orrs	r3, r1
 8003996:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4ab6      	ldr	r2, [pc, #728]	@ (8003c7c <UART_SetConfig+0x340>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d009      	beq.n	80039bc <UART_SetConfig+0x80>
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4ab4      	ldr	r2, [pc, #720]	@ (8003c80 <UART_SetConfig+0x344>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039b8:	4313      	orrs	r3, r2
 80039ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	4ab0      	ldr	r2, [pc, #704]	@ (8003c84 <UART_SetConfig+0x348>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ce:	430b      	orrs	r3, r1
 80039d0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d8:	220f      	movs	r2, #15
 80039da:	4393      	bics	r3, r2
 80039dc:	0018      	movs	r0, r3
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	0003      	movs	r3, r0
 80039e8:	430b      	orrs	r3, r1
 80039ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4aa5      	ldr	r2, [pc, #660]	@ (8003c88 <UART_SetConfig+0x34c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d131      	bne.n	8003a5a <UART_SetConfig+0x11e>
 80039f6:	4ba5      	ldr	r3, [pc, #660]	@ (8003c8c <UART_SetConfig+0x350>)
 80039f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fa:	2203      	movs	r2, #3
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d01d      	beq.n	8003a3e <UART_SetConfig+0x102>
 8003a02:	d823      	bhi.n	8003a4c <UART_SetConfig+0x110>
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d00c      	beq.n	8003a22 <UART_SetConfig+0xe6>
 8003a08:	d820      	bhi.n	8003a4c <UART_SetConfig+0x110>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <UART_SetConfig+0xd8>
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d00e      	beq.n	8003a30 <UART_SetConfig+0xf4>
 8003a12:	e01b      	b.n	8003a4c <UART_SetConfig+0x110>
 8003a14:	231b      	movs	r3, #27
 8003a16:	2220      	movs	r2, #32
 8003a18:	189b      	adds	r3, r3, r2
 8003a1a:	19db      	adds	r3, r3, r7
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	e154      	b.n	8003ccc <UART_SetConfig+0x390>
 8003a22:	231b      	movs	r3, #27
 8003a24:	2220      	movs	r2, #32
 8003a26:	189b      	adds	r3, r3, r2
 8003a28:	19db      	adds	r3, r3, r7
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e14d      	b.n	8003ccc <UART_SetConfig+0x390>
 8003a30:	231b      	movs	r3, #27
 8003a32:	2220      	movs	r2, #32
 8003a34:	189b      	adds	r3, r3, r2
 8003a36:	19db      	adds	r3, r3, r7
 8003a38:	2204      	movs	r2, #4
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e146      	b.n	8003ccc <UART_SetConfig+0x390>
 8003a3e:	231b      	movs	r3, #27
 8003a40:	2220      	movs	r2, #32
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	19db      	adds	r3, r3, r7
 8003a46:	2208      	movs	r2, #8
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e13f      	b.n	8003ccc <UART_SetConfig+0x390>
 8003a4c:	231b      	movs	r3, #27
 8003a4e:	2220      	movs	r2, #32
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	19db      	adds	r3, r3, r7
 8003a54:	2210      	movs	r2, #16
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e138      	b.n	8003ccc <UART_SetConfig+0x390>
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a8c      	ldr	r2, [pc, #560]	@ (8003c90 <UART_SetConfig+0x354>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d131      	bne.n	8003ac8 <UART_SetConfig+0x18c>
 8003a64:	4b89      	ldr	r3, [pc, #548]	@ (8003c8c <UART_SetConfig+0x350>)
 8003a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a68:	220c      	movs	r2, #12
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b0c      	cmp	r3, #12
 8003a6e:	d01d      	beq.n	8003aac <UART_SetConfig+0x170>
 8003a70:	d823      	bhi.n	8003aba <UART_SetConfig+0x17e>
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d00c      	beq.n	8003a90 <UART_SetConfig+0x154>
 8003a76:	d820      	bhi.n	8003aba <UART_SetConfig+0x17e>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <UART_SetConfig+0x146>
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d00e      	beq.n	8003a9e <UART_SetConfig+0x162>
 8003a80:	e01b      	b.n	8003aba <UART_SetConfig+0x17e>
 8003a82:	231b      	movs	r3, #27
 8003a84:	2220      	movs	r2, #32
 8003a86:	189b      	adds	r3, r3, r2
 8003a88:	19db      	adds	r3, r3, r7
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	e11d      	b.n	8003ccc <UART_SetConfig+0x390>
 8003a90:	231b      	movs	r3, #27
 8003a92:	2220      	movs	r2, #32
 8003a94:	189b      	adds	r3, r3, r2
 8003a96:	19db      	adds	r3, r3, r7
 8003a98:	2202      	movs	r2, #2
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e116      	b.n	8003ccc <UART_SetConfig+0x390>
 8003a9e:	231b      	movs	r3, #27
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	189b      	adds	r3, r3, r2
 8003aa4:	19db      	adds	r3, r3, r7
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e10f      	b.n	8003ccc <UART_SetConfig+0x390>
 8003aac:	231b      	movs	r3, #27
 8003aae:	2220      	movs	r2, #32
 8003ab0:	189b      	adds	r3, r3, r2
 8003ab2:	19db      	adds	r3, r3, r7
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	e108      	b.n	8003ccc <UART_SetConfig+0x390>
 8003aba:	231b      	movs	r3, #27
 8003abc:	2220      	movs	r2, #32
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e101      	b.n	8003ccc <UART_SetConfig+0x390>
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a71      	ldr	r2, [pc, #452]	@ (8003c94 <UART_SetConfig+0x358>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d131      	bne.n	8003b36 <UART_SetConfig+0x1fa>
 8003ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8003c8c <UART_SetConfig+0x350>)
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad6:	2230      	movs	r2, #48	@ 0x30
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b30      	cmp	r3, #48	@ 0x30
 8003adc:	d01d      	beq.n	8003b1a <UART_SetConfig+0x1de>
 8003ade:	d823      	bhi.n	8003b28 <UART_SetConfig+0x1ec>
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d00c      	beq.n	8003afe <UART_SetConfig+0x1c2>
 8003ae4:	d820      	bhi.n	8003b28 <UART_SetConfig+0x1ec>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <UART_SetConfig+0x1b4>
 8003aea:	2b10      	cmp	r3, #16
 8003aec:	d00e      	beq.n	8003b0c <UART_SetConfig+0x1d0>
 8003aee:	e01b      	b.n	8003b28 <UART_SetConfig+0x1ec>
 8003af0:	231b      	movs	r3, #27
 8003af2:	2220      	movs	r2, #32
 8003af4:	189b      	adds	r3, r3, r2
 8003af6:	19db      	adds	r3, r3, r7
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	e0e6      	b.n	8003ccc <UART_SetConfig+0x390>
 8003afe:	231b      	movs	r3, #27
 8003b00:	2220      	movs	r2, #32
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	19db      	adds	r3, r3, r7
 8003b06:	2202      	movs	r2, #2
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e0df      	b.n	8003ccc <UART_SetConfig+0x390>
 8003b0c:	231b      	movs	r3, #27
 8003b0e:	2220      	movs	r2, #32
 8003b10:	189b      	adds	r3, r3, r2
 8003b12:	19db      	adds	r3, r3, r7
 8003b14:	2204      	movs	r2, #4
 8003b16:	701a      	strb	r2, [r3, #0]
 8003b18:	e0d8      	b.n	8003ccc <UART_SetConfig+0x390>
 8003b1a:	231b      	movs	r3, #27
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	189b      	adds	r3, r3, r2
 8003b20:	19db      	adds	r3, r3, r7
 8003b22:	2208      	movs	r2, #8
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e0d1      	b.n	8003ccc <UART_SetConfig+0x390>
 8003b28:	231b      	movs	r3, #27
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	189b      	adds	r3, r3, r2
 8003b2e:	19db      	adds	r3, r3, r7
 8003b30:	2210      	movs	r2, #16
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e0ca      	b.n	8003ccc <UART_SetConfig+0x390>
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a57      	ldr	r2, [pc, #348]	@ (8003c98 <UART_SetConfig+0x35c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d106      	bne.n	8003b4e <UART_SetConfig+0x212>
 8003b40:	231b      	movs	r3, #27
 8003b42:	2220      	movs	r2, #32
 8003b44:	189b      	adds	r3, r3, r2
 8003b46:	19db      	adds	r3, r3, r7
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e0be      	b.n	8003ccc <UART_SetConfig+0x390>
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a52      	ldr	r2, [pc, #328]	@ (8003c9c <UART_SetConfig+0x360>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d106      	bne.n	8003b66 <UART_SetConfig+0x22a>
 8003b58:	231b      	movs	r3, #27
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	189b      	adds	r3, r3, r2
 8003b5e:	19db      	adds	r3, r3, r7
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	e0b2      	b.n	8003ccc <UART_SetConfig+0x390>
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a4d      	ldr	r2, [pc, #308]	@ (8003ca0 <UART_SetConfig+0x364>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d106      	bne.n	8003b7e <UART_SetConfig+0x242>
 8003b70:	231b      	movs	r3, #27
 8003b72:	2220      	movs	r2, #32
 8003b74:	189b      	adds	r3, r3, r2
 8003b76:	19db      	adds	r3, r3, r7
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	e0a6      	b.n	8003ccc <UART_SetConfig+0x390>
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a3e      	ldr	r2, [pc, #248]	@ (8003c7c <UART_SetConfig+0x340>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d13e      	bne.n	8003c06 <UART_SetConfig+0x2ca>
 8003b88:	4b40      	ldr	r3, [pc, #256]	@ (8003c8c <UART_SetConfig+0x350>)
 8003b8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b8c:	23c0      	movs	r3, #192	@ 0xc0
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	4013      	ands	r3, r2
 8003b92:	22c0      	movs	r2, #192	@ 0xc0
 8003b94:	0112      	lsls	r2, r2, #4
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d027      	beq.n	8003bea <UART_SetConfig+0x2ae>
 8003b9a:	22c0      	movs	r2, #192	@ 0xc0
 8003b9c:	0112      	lsls	r2, r2, #4
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d82a      	bhi.n	8003bf8 <UART_SetConfig+0x2bc>
 8003ba2:	2280      	movs	r2, #128	@ 0x80
 8003ba4:	0112      	lsls	r2, r2, #4
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d011      	beq.n	8003bce <UART_SetConfig+0x292>
 8003baa:	2280      	movs	r2, #128	@ 0x80
 8003bac:	0112      	lsls	r2, r2, #4
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d822      	bhi.n	8003bf8 <UART_SetConfig+0x2bc>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <UART_SetConfig+0x284>
 8003bb6:	2280      	movs	r2, #128	@ 0x80
 8003bb8:	00d2      	lsls	r2, r2, #3
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00e      	beq.n	8003bdc <UART_SetConfig+0x2a0>
 8003bbe:	e01b      	b.n	8003bf8 <UART_SetConfig+0x2bc>
 8003bc0:	231b      	movs	r3, #27
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	189b      	adds	r3, r3, r2
 8003bc6:	19db      	adds	r3, r3, r7
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e07e      	b.n	8003ccc <UART_SetConfig+0x390>
 8003bce:	231b      	movs	r3, #27
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	189b      	adds	r3, r3, r2
 8003bd4:	19db      	adds	r3, r3, r7
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	e077      	b.n	8003ccc <UART_SetConfig+0x390>
 8003bdc:	231b      	movs	r3, #27
 8003bde:	2220      	movs	r2, #32
 8003be0:	189b      	adds	r3, r3, r2
 8003be2:	19db      	adds	r3, r3, r7
 8003be4:	2204      	movs	r2, #4
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	e070      	b.n	8003ccc <UART_SetConfig+0x390>
 8003bea:	231b      	movs	r3, #27
 8003bec:	2220      	movs	r2, #32
 8003bee:	189b      	adds	r3, r3, r2
 8003bf0:	19db      	adds	r3, r3, r7
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e069      	b.n	8003ccc <UART_SetConfig+0x390>
 8003bf8:	231b      	movs	r3, #27
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	189b      	adds	r3, r3, r2
 8003bfe:	19db      	adds	r3, r3, r7
 8003c00:	2210      	movs	r2, #16
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e062      	b.n	8003ccc <UART_SetConfig+0x390>
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c80 <UART_SetConfig+0x344>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d157      	bne.n	8003cc0 <UART_SetConfig+0x384>
 8003c10:	4b1e      	ldr	r3, [pc, #120]	@ (8003c8c <UART_SetConfig+0x350>)
 8003c12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c14:	23c0      	movs	r3, #192	@ 0xc0
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4013      	ands	r3, r2
 8003c1a:	22c0      	movs	r2, #192	@ 0xc0
 8003c1c:	0092      	lsls	r2, r2, #2
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d040      	beq.n	8003ca4 <UART_SetConfig+0x368>
 8003c22:	22c0      	movs	r2, #192	@ 0xc0
 8003c24:	0092      	lsls	r2, r2, #2
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d843      	bhi.n	8003cb2 <UART_SetConfig+0x376>
 8003c2a:	2280      	movs	r2, #128	@ 0x80
 8003c2c:	0092      	lsls	r2, r2, #2
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d011      	beq.n	8003c56 <UART_SetConfig+0x31a>
 8003c32:	2280      	movs	r2, #128	@ 0x80
 8003c34:	0092      	lsls	r2, r2, #2
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d83b      	bhi.n	8003cb2 <UART_SetConfig+0x376>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <UART_SetConfig+0x30c>
 8003c3e:	2280      	movs	r2, #128	@ 0x80
 8003c40:	0052      	lsls	r2, r2, #1
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00e      	beq.n	8003c64 <UART_SetConfig+0x328>
 8003c46:	e034      	b.n	8003cb2 <UART_SetConfig+0x376>
 8003c48:	231b      	movs	r3, #27
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	189b      	adds	r3, r3, r2
 8003c4e:	19db      	adds	r3, r3, r7
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	e03a      	b.n	8003ccc <UART_SetConfig+0x390>
 8003c56:	231b      	movs	r3, #27
 8003c58:	2220      	movs	r2, #32
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	19db      	adds	r3, r3, r7
 8003c5e:	2202      	movs	r2, #2
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e033      	b.n	8003ccc <UART_SetConfig+0x390>
 8003c64:	231b      	movs	r3, #27
 8003c66:	2220      	movs	r2, #32
 8003c68:	189b      	adds	r3, r3, r2
 8003c6a:	19db      	adds	r3, r3, r7
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	701a      	strb	r2, [r3, #0]
 8003c70:	e02c      	b.n	8003ccc <UART_SetConfig+0x390>
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	cfff69f3 	.word	0xcfff69f3
 8003c78:	ffffcfff 	.word	0xffffcfff
 8003c7c:	40008000 	.word	0x40008000
 8003c80:	40008400 	.word	0x40008400
 8003c84:	11fff4ff 	.word	0x11fff4ff
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40004400 	.word	0x40004400
 8003c94:	40004800 	.word	0x40004800
 8003c98:	40004c00 	.word	0x40004c00
 8003c9c:	40005000 	.word	0x40005000
 8003ca0:	40013c00 	.word	0x40013c00
 8003ca4:	231b      	movs	r3, #27
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	19db      	adds	r3, r3, r7
 8003cac:	2208      	movs	r2, #8
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e00c      	b.n	8003ccc <UART_SetConfig+0x390>
 8003cb2:	231b      	movs	r3, #27
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	19db      	adds	r3, r3, r7
 8003cba:	2210      	movs	r2, #16
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e005      	b.n	8003ccc <UART_SetConfig+0x390>
 8003cc0:	231b      	movs	r3, #27
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	189b      	adds	r3, r3, r2
 8003cc6:	19db      	adds	r3, r3, r7
 8003cc8:	2210      	movs	r2, #16
 8003cca:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4ac1      	ldr	r2, [pc, #772]	@ (8003fd8 <UART_SetConfig+0x69c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d005      	beq.n	8003ce2 <UART_SetConfig+0x3a6>
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4ac0      	ldr	r2, [pc, #768]	@ (8003fdc <UART_SetConfig+0x6a0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d000      	beq.n	8003ce2 <UART_SetConfig+0x3a6>
 8003ce0:	e093      	b.n	8003e0a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ce2:	231b      	movs	r3, #27
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	189b      	adds	r3, r3, r2
 8003ce8:	19db      	adds	r3, r3, r7
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d015      	beq.n	8003d1c <UART_SetConfig+0x3e0>
 8003cf0:	dc18      	bgt.n	8003d24 <UART_SetConfig+0x3e8>
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d00d      	beq.n	8003d12 <UART_SetConfig+0x3d6>
 8003cf6:	dc15      	bgt.n	8003d24 <UART_SetConfig+0x3e8>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <UART_SetConfig+0x3c6>
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d005      	beq.n	8003d0c <UART_SetConfig+0x3d0>
 8003d00:	e010      	b.n	8003d24 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d02:	f7ff f83d 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8003d06:	0003      	movs	r3, r0
 8003d08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d0a:	e014      	b.n	8003d36 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d0c:	4bb4      	ldr	r3, [pc, #720]	@ (8003fe0 <UART_SetConfig+0x6a4>)
 8003d0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d10:	e011      	b.n	8003d36 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d12:	f7fe ffa9 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8003d16:	0003      	movs	r3, r0
 8003d18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d1a:	e00c      	b.n	8003d36 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1c:	2380      	movs	r3, #128	@ 0x80
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d22:	e008      	b.n	8003d36 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003d28:	231a      	movs	r3, #26
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	189b      	adds	r3, r3, r2
 8003d2e:	19db      	adds	r3, r3, r7
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
        break;
 8003d34:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d100      	bne.n	8003d3e <UART_SetConfig+0x402>
 8003d3c:	e135      	b.n	8003faa <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d42:	4ba8      	ldr	r3, [pc, #672]	@ (8003fe4 <UART_SetConfig+0x6a8>)
 8003d44:	0052      	lsls	r2, r2, #1
 8003d46:	5ad3      	ldrh	r3, [r2, r3]
 8003d48:	0019      	movs	r1, r3
 8003d4a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003d4c:	f7fc f9da 	bl	8000104 <__udivsi3>
 8003d50:	0003      	movs	r3, r0
 8003d52:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	0013      	movs	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	189b      	adds	r3, r3, r2
 8003d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d305      	bcc.n	8003d70 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d906      	bls.n	8003d7e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003d70:	231a      	movs	r3, #26
 8003d72:	2220      	movs	r2, #32
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	19db      	adds	r3, r3, r7
 8003d78:	2201      	movs	r2, #1
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e044      	b.n	8003e08 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d8a:	4b96      	ldr	r3, [pc, #600]	@ (8003fe4 <UART_SetConfig+0x6a8>)
 8003d8c:	0052      	lsls	r2, r2, #1
 8003d8e:	5ad3      	ldrh	r3, [r2, r3]
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	69b8      	ldr	r0, [r7, #24]
 8003d9c:	69f9      	ldr	r1, [r7, #28]
 8003d9e:	f7fc fb27 	bl	80003f0 <__aeabi_uldivmod>
 8003da2:	0002      	movs	r2, r0
 8003da4:	000b      	movs	r3, r1
 8003da6:	0e11      	lsrs	r1, r2, #24
 8003da8:	021d      	lsls	r5, r3, #8
 8003daa:	430d      	orrs	r5, r1
 8003dac:	0214      	lsls	r4, r2, #8
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	68b8      	ldr	r0, [r7, #8]
 8003dbc:	68f9      	ldr	r1, [r7, #12]
 8003dbe:	1900      	adds	r0, r0, r4
 8003dc0:	4169      	adcs	r1, r5
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f7fc fb0e 	bl	80003f0 <__aeabi_uldivmod>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	000b      	movs	r3, r1
 8003dd8:	0013      	movs	r3, r2
 8003dda:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dde:	23c0      	movs	r3, #192	@ 0xc0
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d309      	bcc.n	8003dfa <UART_SetConfig+0x4be>
 8003de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de8:	2380      	movs	r3, #128	@ 0x80
 8003dea:	035b      	lsls	r3, r3, #13
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d204      	bcs.n	8003dfa <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	e006      	b.n	8003e08 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003dfa:	231a      	movs	r3, #26
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	19db      	adds	r3, r3, r7
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003e06:	e0d0      	b.n	8003faa <UART_SetConfig+0x66e>
 8003e08:	e0cf      	b.n	8003faa <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	2380      	movs	r3, #128	@ 0x80
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d000      	beq.n	8003e18 <UART_SetConfig+0x4dc>
 8003e16:	e070      	b.n	8003efa <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003e18:	231b      	movs	r3, #27
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	189b      	adds	r3, r3, r2
 8003e1e:	19db      	adds	r3, r3, r7
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d015      	beq.n	8003e52 <UART_SetConfig+0x516>
 8003e26:	dc18      	bgt.n	8003e5a <UART_SetConfig+0x51e>
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d00d      	beq.n	8003e48 <UART_SetConfig+0x50c>
 8003e2c:	dc15      	bgt.n	8003e5a <UART_SetConfig+0x51e>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <UART_SetConfig+0x4fc>
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d005      	beq.n	8003e42 <UART_SetConfig+0x506>
 8003e36:	e010      	b.n	8003e5a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e38:	f7fe ffa2 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e40:	e014      	b.n	8003e6c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e42:	4b67      	ldr	r3, [pc, #412]	@ (8003fe0 <UART_SetConfig+0x6a4>)
 8003e44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e46:	e011      	b.n	8003e6c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e48:	f7fe ff0e 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e50:	e00c      	b.n	8003e6c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e52:	2380      	movs	r3, #128	@ 0x80
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e58:	e008      	b.n	8003e6c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003e5e:	231a      	movs	r3, #26
 8003e60:	2220      	movs	r2, #32
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	19db      	adds	r3, r3, r7
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
        break;
 8003e6a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d100      	bne.n	8003e74 <UART_SetConfig+0x538>
 8003e72:	e09a      	b.n	8003faa <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e78:	4b5a      	ldr	r3, [pc, #360]	@ (8003fe4 <UART_SetConfig+0x6a8>)
 8003e7a:	0052      	lsls	r2, r2, #1
 8003e7c:	5ad3      	ldrh	r3, [r2, r3]
 8003e7e:	0019      	movs	r1, r3
 8003e80:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e82:	f7fc f93f 	bl	8000104 <__udivsi3>
 8003e86:	0003      	movs	r3, r0
 8003e88:	005a      	lsls	r2, r3, #1
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	18d2      	adds	r2, r2, r3
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	0019      	movs	r1, r3
 8003e98:	0010      	movs	r0, r2
 8003e9a:	f7fc f933 	bl	8000104 <__udivsi3>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	2b0f      	cmp	r3, #15
 8003ea6:	d921      	bls.n	8003eec <UART_SetConfig+0x5b0>
 8003ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eaa:	2380      	movs	r3, #128	@ 0x80
 8003eac:	025b      	lsls	r3, r3, #9
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d21c      	bcs.n	8003eec <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	200e      	movs	r0, #14
 8003eb8:	2420      	movs	r4, #32
 8003eba:	1903      	adds	r3, r0, r4
 8003ebc:	19db      	adds	r3, r3, r7
 8003ebe:	210f      	movs	r1, #15
 8003ec0:	438a      	bics	r2, r1
 8003ec2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2207      	movs	r2, #7
 8003ecc:	4013      	ands	r3, r2
 8003ece:	b299      	uxth	r1, r3
 8003ed0:	1903      	adds	r3, r0, r4
 8003ed2:	19db      	adds	r3, r3, r7
 8003ed4:	1902      	adds	r2, r0, r4
 8003ed6:	19d2      	adds	r2, r2, r7
 8003ed8:	8812      	ldrh	r2, [r2, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	1902      	adds	r2, r0, r4
 8003ee4:	19d2      	adds	r2, r2, r7
 8003ee6:	8812      	ldrh	r2, [r2, #0]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	e05e      	b.n	8003faa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003eec:	231a      	movs	r3, #26
 8003eee:	2220      	movs	r2, #32
 8003ef0:	189b      	adds	r3, r3, r2
 8003ef2:	19db      	adds	r3, r3, r7
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	e057      	b.n	8003faa <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003efa:	231b      	movs	r3, #27
 8003efc:	2220      	movs	r2, #32
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	19db      	adds	r3, r3, r7
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d015      	beq.n	8003f34 <UART_SetConfig+0x5f8>
 8003f08:	dc18      	bgt.n	8003f3c <UART_SetConfig+0x600>
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d00d      	beq.n	8003f2a <UART_SetConfig+0x5ee>
 8003f0e:	dc15      	bgt.n	8003f3c <UART_SetConfig+0x600>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <UART_SetConfig+0x5de>
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d005      	beq.n	8003f24 <UART_SetConfig+0x5e8>
 8003f18:	e010      	b.n	8003f3c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1a:	f7fe ff31 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f22:	e014      	b.n	8003f4e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f24:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe0 <UART_SetConfig+0x6a4>)
 8003f26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f28:	e011      	b.n	8003f4e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2a:	f7fe fe9d 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f32:	e00c      	b.n	8003f4e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f34:	2380      	movs	r3, #128	@ 0x80
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f3a:	e008      	b.n	8003f4e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003f40:	231a      	movs	r3, #26
 8003f42:	2220      	movs	r2, #32
 8003f44:	189b      	adds	r3, r3, r2
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
        break;
 8003f4c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d02a      	beq.n	8003faa <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f58:	4b22      	ldr	r3, [pc, #136]	@ (8003fe4 <UART_SetConfig+0x6a8>)
 8003f5a:	0052      	lsls	r2, r2, #1
 8003f5c:	5ad3      	ldrh	r3, [r2, r3]
 8003f5e:	0019      	movs	r1, r3
 8003f60:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f62:	f7fc f8cf 	bl	8000104 <__udivsi3>
 8003f66:	0003      	movs	r3, r0
 8003f68:	001a      	movs	r2, r3
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	18d2      	adds	r2, r2, r3
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	0019      	movs	r1, r3
 8003f78:	0010      	movs	r0, r2
 8003f7a:	f7fc f8c3 	bl	8000104 <__udivsi3>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	2b0f      	cmp	r3, #15
 8003f86:	d90a      	bls.n	8003f9e <UART_SetConfig+0x662>
 8003f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	025b      	lsls	r3, r3, #9
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d205      	bcs.n	8003f9e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60da      	str	r2, [r3, #12]
 8003f9c:	e005      	b.n	8003faa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9e:	231a      	movs	r3, #26
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	19db      	adds	r3, r3, r7
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	226a      	movs	r2, #106	@ 0x6a
 8003fae:	2101      	movs	r1, #1
 8003fb0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	2268      	movs	r2, #104	@ 0x68
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003fc6:	231a      	movs	r3, #26
 8003fc8:	2220      	movs	r2, #32
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	19db      	adds	r3, r3, r7
 8003fce:	781b      	ldrb	r3, [r3, #0]
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b010      	add	sp, #64	@ 0x40
 8003fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd8:	40008000 	.word	0x40008000
 8003fdc:	40008400 	.word	0x40008400
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	08004ca0 	.word	0x08004ca0

08003fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d00b      	beq.n	8004012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4a4a      	ldr	r2, [pc, #296]	@ (800412c <UART_AdvFeatureConfig+0x144>)
 8004002:	4013      	ands	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	2201      	movs	r2, #1
 8004018:	4013      	ands	r3, r2
 800401a:	d00b      	beq.n	8004034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4a43      	ldr	r2, [pc, #268]	@ (8004130 <UART_AdvFeatureConfig+0x148>)
 8004024:	4013      	ands	r3, r2
 8004026:	0019      	movs	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004038:	2202      	movs	r2, #2
 800403a:	4013      	ands	r3, r2
 800403c:	d00b      	beq.n	8004056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4a3b      	ldr	r2, [pc, #236]	@ (8004134 <UART_AdvFeatureConfig+0x14c>)
 8004046:	4013      	ands	r3, r2
 8004048:	0019      	movs	r1, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	2204      	movs	r2, #4
 800405c:	4013      	ands	r3, r2
 800405e:	d00b      	beq.n	8004078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4a34      	ldr	r2, [pc, #208]	@ (8004138 <UART_AdvFeatureConfig+0x150>)
 8004068:	4013      	ands	r3, r2
 800406a:	0019      	movs	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	2210      	movs	r2, #16
 800407e:	4013      	ands	r3, r2
 8004080:	d00b      	beq.n	800409a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4a2c      	ldr	r2, [pc, #176]	@ (800413c <UART_AdvFeatureConfig+0x154>)
 800408a:	4013      	ands	r3, r2
 800408c:	0019      	movs	r1, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409e:	2220      	movs	r2, #32
 80040a0:	4013      	ands	r3, r2
 80040a2:	d00b      	beq.n	80040bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4a25      	ldr	r2, [pc, #148]	@ (8004140 <UART_AdvFeatureConfig+0x158>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c0:	2240      	movs	r2, #64	@ 0x40
 80040c2:	4013      	ands	r3, r2
 80040c4:	d01d      	beq.n	8004102 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004144 <UART_AdvFeatureConfig+0x15c>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040e2:	2380      	movs	r3, #128	@ 0x80
 80040e4:	035b      	lsls	r3, r3, #13
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d10b      	bne.n	8004102 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a15      	ldr	r2, [pc, #84]	@ (8004148 <UART_AdvFeatureConfig+0x160>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	0019      	movs	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	2280      	movs	r2, #128	@ 0x80
 8004108:	4013      	ands	r3, r2
 800410a:	d00b      	beq.n	8004124 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4a0e      	ldr	r2, [pc, #56]	@ (800414c <UART_AdvFeatureConfig+0x164>)
 8004114:	4013      	ands	r3, r2
 8004116:	0019      	movs	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }
}
 8004124:	46c0      	nop			@ (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b002      	add	sp, #8
 800412a:	bd80      	pop	{r7, pc}
 800412c:	ffff7fff 	.word	0xffff7fff
 8004130:	fffdffff 	.word	0xfffdffff
 8004134:	fffeffff 	.word	0xfffeffff
 8004138:	fffbffff 	.word	0xfffbffff
 800413c:	ffffefff 	.word	0xffffefff
 8004140:	ffffdfff 	.word	0xffffdfff
 8004144:	ffefffff 	.word	0xffefffff
 8004148:	ff9fffff 	.word	0xff9fffff
 800414c:	fff7ffff 	.word	0xfff7ffff

08004150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b092      	sub	sp, #72	@ 0x48
 8004154:	af02      	add	r7, sp, #8
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2290      	movs	r2, #144	@ 0x90
 800415c:	2100      	movs	r1, #0
 800415e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004160:	f7fd fafc 	bl	800175c <HAL_GetTick>
 8004164:	0003      	movs	r3, r0
 8004166:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2208      	movs	r2, #8
 8004170:	4013      	ands	r3, r2
 8004172:	2b08      	cmp	r3, #8
 8004174:	d12d      	bne.n	80041d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004178:	2280      	movs	r2, #128	@ 0x80
 800417a:	0391      	lsls	r1, r2, #14
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4a47      	ldr	r2, [pc, #284]	@ (800429c <UART_CheckIdleState+0x14c>)
 8004180:	9200      	str	r2, [sp, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	f000 f88e 	bl	80042a4 <UART_WaitOnFlagUntilTimeout>
 8004188:	1e03      	subs	r3, r0, #0
 800418a:	d022      	beq.n	80041d2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800418c:	f3ef 8310 	mrs	r3, PRIMASK
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004194:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004196:	2301      	movs	r3, #1
 8004198:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	f383 8810 	msr	PRIMASK, r3
}
 80041a0:	46c0      	nop			@ (mov r8, r8)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2180      	movs	r1, #128	@ 0x80
 80041ae:	438a      	bics	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b8:	f383 8810 	msr	PRIMASK, r3
}
 80041bc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2288      	movs	r2, #136	@ 0x88
 80041c2:	2120      	movs	r1, #32
 80041c4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2284      	movs	r2, #132	@ 0x84
 80041ca:	2100      	movs	r1, #0
 80041cc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e060      	b.n	8004294 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2204      	movs	r2, #4
 80041da:	4013      	ands	r3, r2
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d146      	bne.n	800426e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e2:	2280      	movs	r2, #128	@ 0x80
 80041e4:	03d1      	lsls	r1, r2, #15
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4a2c      	ldr	r2, [pc, #176]	@ (800429c <UART_CheckIdleState+0x14c>)
 80041ea:	9200      	str	r2, [sp, #0]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f000 f859 	bl	80042a4 <UART_WaitOnFlagUntilTimeout>
 80041f2:	1e03      	subs	r3, r0, #0
 80041f4:	d03b      	beq.n	800426e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f6:	f3ef 8310 	mrs	r3, PRIMASK
 80041fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80041fc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004200:	2301      	movs	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f383 8810 	msr	PRIMASK, r3
}
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4922      	ldr	r1, [pc, #136]	@ (80042a0 <UART_CheckIdleState+0x150>)
 8004218:	400a      	ands	r2, r1
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f383 8810 	msr	PRIMASK, r3
}
 8004226:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004228:	f3ef 8310 	mrs	r3, PRIMASK
 800422c:	61bb      	str	r3, [r7, #24]
  return(result);
 800422e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	633b      	str	r3, [r7, #48]	@ 0x30
 8004232:	2301      	movs	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f383 8810 	msr	PRIMASK, r3
}
 800423c:	46c0      	nop			@ (mov r8, r8)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2101      	movs	r1, #1
 800424a:	438a      	bics	r2, r1
 800424c:	609a      	str	r2, [r3, #8]
 800424e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004250:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	f383 8810 	msr	PRIMASK, r3
}
 8004258:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	228c      	movs	r2, #140	@ 0x8c
 800425e:	2120      	movs	r1, #32
 8004260:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2284      	movs	r2, #132	@ 0x84
 8004266:	2100      	movs	r1, #0
 8004268:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e012      	b.n	8004294 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2288      	movs	r2, #136	@ 0x88
 8004272:	2120      	movs	r1, #32
 8004274:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	228c      	movs	r2, #140	@ 0x8c
 800427a:	2120      	movs	r1, #32
 800427c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2284      	movs	r2, #132	@ 0x84
 800428e:	2100      	movs	r1, #0
 8004290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b010      	add	sp, #64	@ 0x40
 800429a:	bd80      	pop	{r7, pc}
 800429c:	01ffffff 	.word	0x01ffffff
 80042a0:	fffffedf 	.word	0xfffffedf

080042a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	1dfb      	adds	r3, r7, #7
 80042b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b4:	e051      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	3301      	adds	r3, #1
 80042ba:	d04e      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042bc:	f7fd fa4e 	bl	800175c <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d302      	bcc.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e051      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2204      	movs	r2, #4
 80042de:	4013      	ands	r3, r2
 80042e0:	d03b      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb6>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b80      	cmp	r3, #128	@ 0x80
 80042e6:	d038      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb6>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b40      	cmp	r3, #64	@ 0x40
 80042ec:	d035      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	2208      	movs	r2, #8
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d111      	bne.n	8004320 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2208      	movs	r2, #8
 8004302:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	0018      	movs	r0, r3
 8004308:	f000 f922 	bl	8004550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2290      	movs	r2, #144	@ 0x90
 8004310:	2108      	movs	r1, #8
 8004312:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2284      	movs	r2, #132	@ 0x84
 8004318:	2100      	movs	r1, #0
 800431a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e02c      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	2380      	movs	r3, #128	@ 0x80
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	401a      	ands	r2, r3
 800432c:	2380      	movs	r3, #128	@ 0x80
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	429a      	cmp	r2, r3
 8004332:	d112      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2280      	movs	r2, #128	@ 0x80
 800433a:	0112      	lsls	r2, r2, #4
 800433c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	0018      	movs	r0, r3
 8004342:	f000 f905 	bl	8004550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2290      	movs	r2, #144	@ 0x90
 800434a:	2120      	movs	r1, #32
 800434c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2284      	movs	r2, #132	@ 0x84
 8004352:	2100      	movs	r1, #0
 8004354:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e00f      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	425a      	negs	r2, r3
 800436a:	4153      	adcs	r3, r2
 800436c:	b2db      	uxtb	r3, r3
 800436e:	001a      	movs	r2, r3
 8004370:	1dfb      	adds	r3, r7, #7
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d09e      	beq.n	80042b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b090      	sub	sp, #64	@ 0x40
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	1dbb      	adds	r3, r7, #6
 8004390:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1dba      	adds	r2, r7, #6
 800439c:	215c      	movs	r1, #92	@ 0x5c
 800439e:	8812      	ldrh	r2, [r2, #0]
 80043a0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2290      	movs	r2, #144	@ 0x90
 80043a6:	2100      	movs	r1, #0
 80043a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	228c      	movs	r2, #140	@ 0x8c
 80043ae:	2122      	movs	r1, #34	@ 0x22
 80043b0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2280      	movs	r2, #128	@ 0x80
 80043b6:	589b      	ldr	r3, [r3, r2]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02d      	beq.n	8004418 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2280      	movs	r2, #128	@ 0x80
 80043c0:	589b      	ldr	r3, [r3, r2]
 80043c2:	4a40      	ldr	r2, [pc, #256]	@ (80044c4 <UART_Start_Receive_DMA+0x140>)
 80043c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2280      	movs	r2, #128	@ 0x80
 80043ca:	589b      	ldr	r3, [r3, r2]
 80043cc:	4a3e      	ldr	r2, [pc, #248]	@ (80044c8 <UART_Start_Receive_DMA+0x144>)
 80043ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2280      	movs	r2, #128	@ 0x80
 80043d4:	589b      	ldr	r3, [r3, r2]
 80043d6:	4a3d      	ldr	r2, [pc, #244]	@ (80044cc <UART_Start_Receive_DMA+0x148>)
 80043d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2280      	movs	r2, #128	@ 0x80
 80043de:	589b      	ldr	r3, [r3, r2]
 80043e0:	2200      	movs	r2, #0
 80043e2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2280      	movs	r2, #128	@ 0x80
 80043e8:	5898      	ldr	r0, [r3, r2]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3324      	adds	r3, #36	@ 0x24
 80043f0:	0019      	movs	r1, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	001a      	movs	r2, r3
 80043f8:	1dbb      	adds	r3, r7, #6
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	f7fd fb58 	bl	8001ab0 <HAL_DMA_Start_IT>
 8004400:	1e03      	subs	r3, r0, #0
 8004402:	d009      	beq.n	8004418 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2290      	movs	r2, #144	@ 0x90
 8004408:	2110      	movs	r1, #16
 800440a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	228c      	movs	r2, #140	@ 0x8c
 8004410:	2120      	movs	r1, #32
 8004412:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e050      	b.n	80044ba <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d019      	beq.n	8004454 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004420:	f3ef 8310 	mrs	r3, PRIMASK
 8004424:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800442a:	2301      	movs	r3, #1
 800442c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004430:	f383 8810 	msr	PRIMASK, r3
}
 8004434:	46c0      	nop			@ (mov r8, r8)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2180      	movs	r1, #128	@ 0x80
 8004442:	0049      	lsls	r1, r1, #1
 8004444:	430a      	orrs	r2, r1
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444e:	f383 8810 	msr	PRIMASK, r3
}
 8004452:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004454:	f3ef 8310 	mrs	r3, PRIMASK
 8004458:	613b      	str	r3, [r7, #16]
  return(result);
 800445a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800445e:	2301      	movs	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f383 8810 	msr	PRIMASK, r3
}
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	430a      	orrs	r2, r1
 8004478:	609a      	str	r2, [r3, #8]
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f383 8810 	msr	PRIMASK, r3
}
 8004484:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004486:	f3ef 8310 	mrs	r3, PRIMASK
 800448a:	61fb      	str	r3, [r7, #28]
  return(result);
 800448c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004490:	2301      	movs	r3, #1
 8004492:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	f383 8810 	msr	PRIMASK, r3
}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2140      	movs	r1, #64	@ 0x40
 80044a8:	430a      	orrs	r2, r1
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b2:	f383 8810 	msr	PRIMASK, r3
}
 80044b6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b010      	add	sp, #64	@ 0x40
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	0800461d 	.word	0x0800461d
 80044c8:	0800474d 	.word	0x0800474d
 80044cc:	0800478f 	.word	0x0800478f

080044d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	@ 0x28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d8:	f3ef 8310 	mrs	r3, PRIMASK
 80044dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80044de:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e2:	2301      	movs	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f383 8810 	msr	PRIMASK, r3
}
 80044ec:	46c0      	nop			@ (mov r8, r8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	21c0      	movs	r1, #192	@ 0xc0
 80044fa:	438a      	bics	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450a:	f3ef 8310 	mrs	r3, PRIMASK
 800450e:	617b      	str	r3, [r7, #20]
  return(result);
 8004510:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004512:	623b      	str	r3, [r7, #32]
 8004514:	2301      	movs	r3, #1
 8004516:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f383 8810 	msr	PRIMASK, r3
}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4908      	ldr	r1, [pc, #32]	@ (800454c <UART_EndTxTransfer+0x7c>)
 800452c:	400a      	ands	r2, r1
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f383 8810 	msr	PRIMASK, r3
}
 800453a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2288      	movs	r2, #136	@ 0x88
 8004540:	2120      	movs	r1, #32
 8004542:	5099      	str	r1, [r3, r2]
}
 8004544:	46c0      	nop			@ (mov r8, r8)
 8004546:	46bd      	mov	sp, r7
 8004548:	b00a      	add	sp, #40	@ 0x28
 800454a:	bd80      	pop	{r7, pc}
 800454c:	ff7fffff 	.word	0xff7fffff

08004550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08e      	sub	sp, #56	@ 0x38
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004558:	f3ef 8310 	mrs	r3, PRIMASK
 800455c:	617b      	str	r3, [r7, #20]
  return(result);
 800455e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004560:	637b      	str	r3, [r7, #52]	@ 0x34
 8004562:	2301      	movs	r3, #1
 8004564:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f383 8810 	msr	PRIMASK, r3
}
 800456c:	46c0      	nop			@ (mov r8, r8)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4926      	ldr	r1, [pc, #152]	@ (8004614 <UART_EndRxTransfer+0xc4>)
 800457a:	400a      	ands	r2, r1
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004580:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f383 8810 	msr	PRIMASK, r3
}
 8004588:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458a:	f3ef 8310 	mrs	r3, PRIMASK
 800458e:	623b      	str	r3, [r7, #32]
  return(result);
 8004590:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004592:	633b      	str	r3, [r7, #48]	@ 0x30
 8004594:	2301      	movs	r3, #1
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459a:	f383 8810 	msr	PRIMASK, r3
}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	491b      	ldr	r1, [pc, #108]	@ (8004618 <UART_EndRxTransfer+0xc8>)
 80045ac:	400a      	ands	r2, r1
 80045ae:	609a      	str	r2, [r3, #8]
 80045b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b6:	f383 8810 	msr	PRIMASK, r3
}
 80045ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d118      	bne.n	80045f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c4:	f3ef 8310 	mrs	r3, PRIMASK
 80045c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ce:	2301      	movs	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f383 8810 	msr	PRIMASK, r3
}
 80045d8:	46c0      	nop			@ (mov r8, r8)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2110      	movs	r1, #16
 80045e6:	438a      	bics	r2, r1
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f383 8810 	msr	PRIMASK, r3
}
 80045f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	228c      	movs	r2, #140	@ 0x8c
 80045fa:	2120      	movs	r1, #32
 80045fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	b00e      	add	sp, #56	@ 0x38
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	fffffedf 	.word	0xfffffedf
 8004618:	effffffe 	.word	0xeffffffe

0800461c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b094      	sub	sp, #80	@ 0x50
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004628:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2220      	movs	r2, #32
 8004632:	4013      	ands	r3, r2
 8004634:	d16f      	bne.n	8004716 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004638:	225e      	movs	r2, #94	@ 0x5e
 800463a:	2100      	movs	r1, #0
 800463c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463e:	f3ef 8310 	mrs	r3, PRIMASK
 8004642:	61bb      	str	r3, [r7, #24]
  return(result);
 8004644:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004646:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004648:	2301      	movs	r3, #1
 800464a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f383 8810 	msr	PRIMASK, r3
}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	493a      	ldr	r1, [pc, #232]	@ (8004748 <UART_DMAReceiveCplt+0x12c>)
 8004660:	400a      	ands	r2, r1
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004666:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	f383 8810 	msr	PRIMASK, r3
}
 800466e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004670:	f3ef 8310 	mrs	r3, PRIMASK
 8004674:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004678:	647b      	str	r3, [r7, #68]	@ 0x44
 800467a:	2301      	movs	r3, #1
 800467c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	f383 8810 	msr	PRIMASK, r3
}
 8004684:	46c0      	nop			@ (mov r8, r8)
 8004686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2101      	movs	r1, #1
 8004692:	438a      	bics	r2, r1
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469c:	f383 8810 	msr	PRIMASK, r3
}
 80046a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a2:	f3ef 8310 	mrs	r3, PRIMASK
 80046a6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80046a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80046ac:	2301      	movs	r3, #1
 80046ae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2140      	movs	r1, #64	@ 0x40
 80046c4:	438a      	bics	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ce:	f383 8810 	msr	PRIMASK, r3
}
 80046d2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d6:	228c      	movs	r2, #140	@ 0x8c
 80046d8:	2120      	movs	r1, #32
 80046da:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d118      	bne.n	8004716 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e4:	f3ef 8310 	mrs	r3, PRIMASK
 80046e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80046ea:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046ee:	2301      	movs	r3, #1
 80046f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f383 8810 	msr	PRIMASK, r3
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2110      	movs	r1, #16
 8004706:	438a      	bics	r2, r1
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800470c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f383 8810 	msr	PRIMASK, r3
}
 8004714:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004718:	2200      	movs	r2, #0
 800471a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800471e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d108      	bne.n	8004736 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004726:	225c      	movs	r2, #92	@ 0x5c
 8004728:	5a9a      	ldrh	r2, [r3, r2]
 800472a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f7fc f95c 	bl	80009ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004734:	e003      	b.n	800473e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004738:	0018      	movs	r0, r3
 800473a:	f7fc f937 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	46bd      	mov	sp, r7
 8004742:	b014      	add	sp, #80	@ 0x50
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	fffffeff 	.word	0xfffffeff

0800474c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d10a      	bne.n	800477e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	225c      	movs	r2, #92	@ 0x5c
 800476c:	5a9b      	ldrh	r3, [r3, r2]
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	0011      	movs	r1, r2
 8004776:	0018      	movs	r0, r3
 8004778:	f7fc f938 	bl	80009ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800477c:	e003      	b.n	8004786 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	0018      	movs	r0, r3
 8004782:	f7fc f923 	bl	80009cc <HAL_UART_RxHalfCpltCallback>
}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	46bd      	mov	sp, r7
 800478a:	b004      	add	sp, #16
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b086      	sub	sp, #24
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2288      	movs	r2, #136	@ 0x88
 80047a0:	589b      	ldr	r3, [r3, r2]
 80047a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	228c      	movs	r2, #140	@ 0x8c
 80047a8:	589b      	ldr	r3, [r3, r2]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2280      	movs	r2, #128	@ 0x80
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b80      	cmp	r3, #128	@ 0x80
 80047b8:	d10a      	bne.n	80047d0 <UART_DMAError+0x42>
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b21      	cmp	r3, #33	@ 0x21
 80047be:	d107      	bne.n	80047d0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2256      	movs	r2, #86	@ 0x56
 80047c4:	2100      	movs	r1, #0
 80047c6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7ff fe80 	bl	80044d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2240      	movs	r2, #64	@ 0x40
 80047d8:	4013      	ands	r3, r2
 80047da:	2b40      	cmp	r3, #64	@ 0x40
 80047dc:	d10a      	bne.n	80047f4 <UART_DMAError+0x66>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b22      	cmp	r3, #34	@ 0x22
 80047e2:	d107      	bne.n	80047f4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	225e      	movs	r2, #94	@ 0x5e
 80047e8:	2100      	movs	r1, #0
 80047ea:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7ff feae 	bl	8004550 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2290      	movs	r2, #144	@ 0x90
 80047f8:	589b      	ldr	r3, [r3, r2]
 80047fa:	2210      	movs	r2, #16
 80047fc:	431a      	orrs	r2, r3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2190      	movs	r1, #144	@ 0x90
 8004802:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	0018      	movs	r0, r3
 8004808:	f7ff f890 	bl	800392c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800480c:	46c0      	nop			@ (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	b006      	add	sp, #24
 8004812:	bd80      	pop	{r7, pc}

08004814 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	225e      	movs	r2, #94	@ 0x5e
 8004826:	2100      	movs	r1, #0
 8004828:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2256      	movs	r2, #86	@ 0x56
 800482e:	2100      	movs	r1, #0
 8004830:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	0018      	movs	r0, r3
 8004836:	f7ff f879 	bl	800392c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	46bd      	mov	sp, r7
 800483e:	b004      	add	sp, #16
 8004840:	bd80      	pop	{r7, pc}

08004842 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484a:	f3ef 8310 	mrs	r3, PRIMASK
 800484e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004850:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	2301      	movs	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f383 8810 	msr	PRIMASK, r3
}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2140      	movs	r1, #64	@ 0x40
 800486c:	438a      	bics	r2, r1
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f383 8810 	msr	PRIMASK, r3
}
 800487a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2288      	movs	r2, #136	@ 0x88
 8004880:	2120      	movs	r1, #32
 8004882:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f7ff f845 	bl	800391c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004892:	46c0      	nop			@ (mov r8, r8)
 8004894:	46bd      	mov	sp, r7
 8004896:	b006      	add	sp, #24
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	46bd      	mov	sp, r7
 80048a6:	b002      	add	sp, #8
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b002      	add	sp, #8
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2284      	movs	r2, #132	@ 0x84
 80048d8:	5c9b      	ldrb	r3, [r3, r2]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80048de:	2302      	movs	r3, #2
 80048e0:	e027      	b.n	8004932 <HAL_UARTEx_DisableFifoMode+0x66>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2284      	movs	r2, #132	@ 0x84
 80048e6:	2101      	movs	r1, #1
 80048e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2288      	movs	r2, #136	@ 0x88
 80048ee:	2124      	movs	r1, #36	@ 0x24
 80048f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2101      	movs	r1, #1
 8004906:	438a      	bics	r2, r1
 8004908:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a0b      	ldr	r2, [pc, #44]	@ (800493c <HAL_UARTEx_DisableFifoMode+0x70>)
 800490e:	4013      	ands	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2288      	movs	r2, #136	@ 0x88
 8004924:	2120      	movs	r1, #32
 8004926:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2284      	movs	r2, #132	@ 0x84
 800492c:	2100      	movs	r1, #0
 800492e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b004      	add	sp, #16
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	dfffffff 	.word	0xdfffffff

08004940 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2284      	movs	r2, #132	@ 0x84
 800494e:	5c9b      	ldrb	r3, [r3, r2]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004954:	2302      	movs	r3, #2
 8004956:	e02e      	b.n	80049b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2284      	movs	r2, #132	@ 0x84
 800495c:	2101      	movs	r1, #1
 800495e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2288      	movs	r2, #136	@ 0x88
 8004964:	2124      	movs	r1, #36	@ 0x24
 8004966:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2101      	movs	r1, #1
 800497c:	438a      	bics	r2, r1
 800497e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	08d9      	lsrs	r1, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	0018      	movs	r0, r3
 8004998:	f000 f8bc 	bl	8004b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2288      	movs	r2, #136	@ 0x88
 80049a8:	2120      	movs	r1, #32
 80049aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2284      	movs	r2, #132	@ 0x84
 80049b0:	2100      	movs	r1, #0
 80049b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b004      	add	sp, #16
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2284      	movs	r2, #132	@ 0x84
 80049ce:	5c9b      	ldrb	r3, [r3, r2]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e02f      	b.n	8004a38 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2284      	movs	r2, #132	@ 0x84
 80049dc:	2101      	movs	r1, #1
 80049de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2288      	movs	r2, #136	@ 0x88
 80049e4:	2124      	movs	r1, #36	@ 0x24
 80049e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2101      	movs	r1, #1
 80049fc:	438a      	bics	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	4a0e      	ldr	r2, [pc, #56]	@ (8004a40 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f000 f87b 	bl	8004b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2288      	movs	r2, #136	@ 0x88
 8004a2a:	2120      	movs	r1, #32
 8004a2c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2284      	movs	r2, #132	@ 0x84
 8004a32:	2100      	movs	r1, #0
 8004a34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b004      	add	sp, #16
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	f1ffffff 	.word	0xf1ffffff

08004a44 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a44:	b5b0      	push	{r4, r5, r7, lr}
 8004a46:	b08a      	sub	sp, #40	@ 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	1dbb      	adds	r3, r7, #6
 8004a50:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	228c      	movs	r2, #140	@ 0x8c
 8004a56:	589b      	ldr	r3, [r3, r2]
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d156      	bne.n	8004b0a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004a62:	1dbb      	adds	r3, r7, #6
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e04e      	b.n	8004b0c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	2380      	movs	r3, #128	@ 0x80
 8004a74:	015b      	lsls	r3, r3, #5
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d109      	bne.n	8004a8e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d105      	bne.n	8004a8e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2201      	movs	r2, #1
 8004a86:	4013      	ands	r3, r2
 8004a88:	d001      	beq.n	8004a8e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e03e      	b.n	8004b0c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004a9a:	2527      	movs	r5, #39	@ 0x27
 8004a9c:	197c      	adds	r4, r7, r5
 8004a9e:	1dbb      	adds	r3, r7, #6
 8004aa0:	881a      	ldrh	r2, [r3, #0]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f7ff fc6c 	bl	8004384 <UART_Start_Receive_DMA>
 8004aac:	0003      	movs	r3, r0
 8004aae:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004ab0:	197b      	adds	r3, r7, r5
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d124      	bne.n	8004b02 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d11c      	bne.n	8004afa <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2210      	movs	r2, #16
 8004ac6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8004acc:	617b      	str	r3, [r7, #20]
  return(result);
 8004ace:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad0:	623b      	str	r3, [r7, #32]
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	f383 8810 	msr	PRIMASK, r3
}
 8004adc:	46c0      	nop			@ (mov r8, r8)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2110      	movs	r1, #16
 8004aea:	430a      	orrs	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	e003      	b.n	8004b02 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004afa:	2327      	movs	r3, #39	@ 0x27
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004b02:	2327      	movs	r3, #39	@ 0x27
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	e000      	b.n	8004b0c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b00a      	add	sp, #40	@ 0x28
 8004b12:	bdb0      	pop	{r4, r5, r7, pc}

08004b14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d108      	bne.n	8004b36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	226a      	movs	r2, #106	@ 0x6a
 8004b28:	2101      	movs	r1, #1
 8004b2a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2268      	movs	r2, #104	@ 0x68
 8004b30:	2101      	movs	r1, #1
 8004b32:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b34:	e043      	b.n	8004bbe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b36:	260f      	movs	r6, #15
 8004b38:	19bb      	adds	r3, r7, r6
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b3e:	200e      	movs	r0, #14
 8004b40:	183b      	adds	r3, r7, r0
 8004b42:	2208      	movs	r2, #8
 8004b44:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	0e5b      	lsrs	r3, r3, #25
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	240d      	movs	r4, #13
 8004b52:	193b      	adds	r3, r7, r4
 8004b54:	2107      	movs	r1, #7
 8004b56:	400a      	ands	r2, r1
 8004b58:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	0f5b      	lsrs	r3, r3, #29
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	250c      	movs	r5, #12
 8004b66:	197b      	adds	r3, r7, r5
 8004b68:	2107      	movs	r1, #7
 8004b6a:	400a      	ands	r2, r1
 8004b6c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b6e:	183b      	adds	r3, r7, r0
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	197a      	adds	r2, r7, r5
 8004b74:	7812      	ldrb	r2, [r2, #0]
 8004b76:	4914      	ldr	r1, [pc, #80]	@ (8004bc8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004b78:	5c8a      	ldrb	r2, [r1, r2]
 8004b7a:	435a      	muls	r2, r3
 8004b7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b7e:	197b      	adds	r3, r7, r5
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	4a12      	ldr	r2, [pc, #72]	@ (8004bcc <UARTEx_SetNbDataToProcess+0xb8>)
 8004b84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b86:	0019      	movs	r1, r3
 8004b88:	f7fb fb46 	bl	8000218 <__divsi3>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	b299      	uxth	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	226a      	movs	r2, #106	@ 0x6a
 8004b94:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b96:	19bb      	adds	r3, r7, r6
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	193a      	adds	r2, r7, r4
 8004b9c:	7812      	ldrb	r2, [r2, #0]
 8004b9e:	490a      	ldr	r1, [pc, #40]	@ (8004bc8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ba0:	5c8a      	ldrb	r2, [r1, r2]
 8004ba2:	435a      	muls	r2, r3
 8004ba4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ba6:	193b      	adds	r3, r7, r4
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	4a08      	ldr	r2, [pc, #32]	@ (8004bcc <UARTEx_SetNbDataToProcess+0xb8>)
 8004bac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bae:	0019      	movs	r1, r3
 8004bb0:	f7fb fb32 	bl	8000218 <__divsi3>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	b299      	uxth	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2268      	movs	r2, #104	@ 0x68
 8004bbc:	5299      	strh	r1, [r3, r2]
}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b005      	add	sp, #20
 8004bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc6:	46c0      	nop			@ (mov r8, r8)
 8004bc8:	08004cb8 	.word	0x08004cb8
 8004bcc:	08004cc0 	.word	0x08004cc0

08004bd0 <memset>:
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	1882      	adds	r2, r0, r2
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d100      	bne.n	8004bda <memset+0xa>
 8004bd8:	4770      	bx	lr
 8004bda:	7019      	strb	r1, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	e7f9      	b.n	8004bd4 <memset+0x4>

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	2600      	movs	r6, #0
 8004be4:	4c0c      	ldr	r4, [pc, #48]	@ (8004c18 <__libc_init_array+0x38>)
 8004be6:	4d0d      	ldr	r5, [pc, #52]	@ (8004c1c <__libc_init_array+0x3c>)
 8004be8:	1b64      	subs	r4, r4, r5
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	42a6      	cmp	r6, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	f000 f819 	bl	8004c28 <_init>
 8004bf6:	4c0a      	ldr	r4, [pc, #40]	@ (8004c20 <__libc_init_array+0x40>)
 8004bf8:	4d0a      	ldr	r5, [pc, #40]	@ (8004c24 <__libc_init_array+0x44>)
 8004bfa:	1b64      	subs	r4, r4, r5
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	42a6      	cmp	r6, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	00b3      	lsls	r3, r6, #2
 8004c06:	58eb      	ldr	r3, [r5, r3]
 8004c08:	4798      	blx	r3
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	00b3      	lsls	r3, r6, #2
 8004c10:	58eb      	ldr	r3, [r5, r3]
 8004c12:	4798      	blx	r3
 8004c14:	3601      	adds	r6, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	08004cd0 	.word	0x08004cd0
 8004c1c:	08004cd0 	.word	0x08004cd0
 8004c20:	08004cd4 	.word	0x08004cd4
 8004c24:	08004cd0 	.word	0x08004cd0

08004c28 <_init>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2e:	bc08      	pop	{r3}
 8004c30:	469e      	mov	lr, r3
 8004c32:	4770      	bx	lr

08004c34 <_fini>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr
