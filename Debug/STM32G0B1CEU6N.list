
STM32G0B1CEU6N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004f60  08004f60  00005f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005038  08005038  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005038  08005038  00006038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005040  08005040  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005040  08005040  00006040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005044  08005044  00006044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005048  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec4  2000000c  08005054  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed0  08005054  00007ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d52d  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e3  00000000  00000000  00014561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  00016848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c9  00000000  00000000  00017278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0eb  00000000  00000000  00017a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7d3  00000000  00000000  00032b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad5eb  00000000  00000000  000412ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee8ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002264  00000000  00000000  000ee930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f0b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004f48 	.word	0x08004f48

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004f48 	.word	0x08004f48

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MapTx_Start>:

// -----------------------------------------------------
// Start map execution
// -----------------------------------------------------
void MapTx_Start(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	map_index = 0;
 8000620:	4b03      	ldr	r3, [pc, #12]	@ (8000630 <MapTx_Start+0x14>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
	MapTx_Setup();
 8000626:	f000 f805 	bl	8000634 <MapTx_Setup>
}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200002e4 	.word	0x200002e4

08000634 <MapTx_Setup>:

// -----------------------------------------------------
// Advance to next entry
// -----------------------------------------------------
void MapTx_Setup(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
    if (map_index >= module_tx_map_len) {
 800063a:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <MapTx_Setup+0xbc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2204      	movs	r2, #4
 8000640:	4293      	cmp	r3, r2
 8000642:	d24e      	bcs.n	80006e2 <MapTx_Setup+0xae>
        // Done
        return;
    }

    const map_entry_t *e = &module_tx_map[map_index];
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <MapTx_Setup+0xbc>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	0013      	movs	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	189b      	adds	r3, r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4a28      	ldr	r2, [pc, #160]	@ (80006f4 <MapTx_Setup+0xc0>)
 8000652:	189b      	adds	r3, r3, r2
 8000654:	607b      	str	r3, [r7, #4]

    switch (e->type) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d036      	beq.n	80006cc <MapTx_Setup+0x98>
 800065e:	dc42      	bgt.n	80006e6 <MapTx_Setup+0xb2>
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <MapTx_Setup+0x36>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d019      	beq.n	800069c <MapTx_Setup+0x68>
    case MEM_TO_PORT:
        HAL_UART_Transmit_DMA(e->dst, e->mem, e->size);
        break;

    default:
        break;
 8000668:	e03d      	b.n	80006e6 <MapTx_Setup+0xb2>
        HAL_UARTEx_ReceiveToIdle_DMA(e->src, e->mem, e->size);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6858      	ldr	r0, [r3, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6919      	ldr	r1, [r3, #16]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	b29b      	uxth	r3, r3
 8000678:	001a      	movs	r2, r3
 800067a:	f004 fb73 	bl	8004d64 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(e->src->hdmarx, DMA_IT_HT);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	2280      	movs	r2, #128	@ 0x80
 8000684:	589b      	ldr	r3, [r3, r2]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	2180      	movs	r1, #128	@ 0x80
 8000690:	585b      	ldr	r3, [r3, r1]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2104      	movs	r1, #4
 8000696:	438a      	bics	r2, r1
 8000698:	601a      	str	r2, [r3, #0]
        break;
 800069a:	e025      	b.n	80006e8 <MapTx_Setup+0xb4>
        HAL_UARTEx_ReceiveToIdle_DMA(e->src, staging_buf, e->size);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6858      	ldr	r0, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MapTx_Setup+0xc4>)
 80006a8:	0019      	movs	r1, r3
 80006aa:	f004 fb5b 	bl	8004d64 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(e->src->hdmarx, DMA_IT_HT);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	589b      	ldr	r3, [r3, r2]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	2180      	movs	r1, #128	@ 0x80
 80006c0:	585b      	ldr	r3, [r3, r1]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	438a      	bics	r2, r1
 80006c8:	601a      	str	r2, [r3, #0]
        break;
 80006ca:	e00d      	b.n	80006e8 <MapTx_Setup+0xb4>
        HAL_UART_Transmit_DMA(e->dst, e->mem, e->size);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6898      	ldr	r0, [r3, #8]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6919      	ldr	r1, [r3, #16]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	001a      	movs	r2, r3
 80006dc:	f002 fe92 	bl	8003404 <HAL_UART_Transmit_DMA>
        break;
 80006e0:	e002      	b.n	80006e8 <MapTx_Setup+0xb4>
        return;
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	e000      	b.n	80006e8 <MapTx_Setup+0xb4>
        break;
 80006e6:	46c0      	nop			@ (mov r8, r8)
    }
}
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	200002e4 	.word	0x200002e4
 80006f4:	08004f60 	.word	0x08004f60
 80006f8:	20000028 	.word	0x20000028

080006fc <HAL_UARTEx_RxEventCallback>:

// -------------------------------------------------
// IDLE Line Event Callback
// -------------------------------------------------
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	000a      	movs	r2, r1
 8000706:	1cbb      	adds	r3, r7, #2
 8000708:	801a      	strh	r2, [r3, #0]
    const map_entry_t *e = &module_tx_map[map_index];
 800070a:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <HAL_UARTEx_RxEventCallback+0x6c>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	0013      	movs	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	189b      	adds	r3, r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4a15      	ldr	r2, [pc, #84]	@ (800076c <HAL_UARTEx_RxEventCallback+0x70>)
 8000718:	189b      	adds	r3, r3, r2
 800071a:	60fb      	str	r3, [r7, #12]

    if (e->type == PORT_TO_MEM && e->src == huart) {
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d104      	bne.n	800072e <HAL_UARTEx_RxEventCallback+0x32>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	429a      	cmp	r2, r3
 800072c:	d010      	beq.n	8000750 <HAL_UARTEx_RxEventCallback+0x54>
        // Already in e->mem
    }
    else if (e->type == FWD_TO_PORT && e->src == huart) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10c      	bne.n	8000750 <HAL_UARTEx_RxEventCallback+0x54>
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	429a      	cmp	r2, r3
 800073e:	d107      	bne.n	8000750 <HAL_UARTEx_RxEventCallback+0x54>
        HAL_UART_Transmit_DMA(e->dst, staging_buf, Size);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	6898      	ldr	r0, [r3, #8]
 8000744:	1cbb      	adds	r3, r7, #2
 8000746:	881a      	ldrh	r2, [r3, #0]
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <HAL_UARTEx_RxEventCallback+0x74>)
 800074a:	0019      	movs	r1, r3
 800074c:	f002 fe5a 	bl	8003404 <HAL_UART_Transmit_DMA>
    }

    // Move to next entry
    map_index++;
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000758:	601a      	str	r2, [r3, #0]
    MapTx_Setup();
 800075a:	f7ff ff6b 	bl	8000634 <MapTx_Setup>
}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b004      	add	sp, #16
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	200002e4 	.word	0x200002e4
 800076c:	08004f60 	.word	0x08004f60
 8000770:	20000028 	.word	0x20000028

08000774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_DMA_Init+0x70>)
 800077c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800077e:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <MX_DMA_Init+0x70>)
 8000780:	2101      	movs	r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	639a      	str	r2, [r3, #56]	@ 0x38
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_DMA_Init+0x70>)
 8000788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800078a:	2201      	movs	r2, #1
 800078c:	4013      	ands	r3, r2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_DMA_Init+0x70>)
 8000794:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_DMA_Init+0x70>)
 8000798:	2102      	movs	r1, #2
 800079a:	430a      	orrs	r2, r1
 800079c:	639a      	str	r2, [r3, #56]	@ 0x38
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_DMA_Init+0x70>)
 80007a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007a2:	2202      	movs	r2, #2
 80007a4:	4013      	ands	r3, r2
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2009      	movs	r0, #9
 80007b0:	f001 f93a 	bl	8001a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007b4:	2009      	movs	r0, #9
 80007b6:	f001 f94c 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	200a      	movs	r0, #10
 80007c0:	f001 f932 	bl	8001a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f001 f944 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	200b      	movs	r0, #11
 80007d0:	f001 f92a 	bl	8001a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 80007d4:	200b      	movs	r0, #11
 80007d6:	f001 f93c 	bl	8001a52 <HAL_NVIC_EnableIRQ>

}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	40021000 	.word	0x40021000

080007e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_GPIO_Init+0x70>)
 80007f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007f2:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <MX_GPIO_Init+0x70>)
 80007f4:	2120      	movs	r1, #32
 80007f6:	430a      	orrs	r2, r1
 80007f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_GPIO_Init+0x70>)
 80007fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007fe:	2220      	movs	r2, #32
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_GPIO_Init+0x70>)
 8000808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_GPIO_Init+0x70>)
 800080c:	2101      	movs	r1, #1
 800080e:	430a      	orrs	r2, r1
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_GPIO_Init+0x70>)
 8000814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000816:	2201      	movs	r2, #1
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_GPIO_Init+0x70>)
 8000820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <MX_GPIO_Init+0x70>)
 8000824:	2102      	movs	r1, #2
 8000826:	430a      	orrs	r2, r1
 8000828:	635a      	str	r2, [r3, #52]	@ 0x34
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_GPIO_Init+0x70>)
 800082c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800082e:	2202      	movs	r2, #2
 8000830:	4013      	ands	r3, r2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_GPIO_Init+0x70>)
 8000838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800083a:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_GPIO_Init+0x70>)
 800083c:	2108      	movs	r1, #8
 800083e:	430a      	orrs	r2, r1
 8000840:	635a      	str	r2, [r3, #52]	@ 0x34
 8000842:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <MX_GPIO_Init+0x70>)
 8000844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000846:	2208      	movs	r2, #8
 8000848:	4013      	ands	r3, r2
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b004      	add	sp, #16
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	40021000 	.word	0x40021000

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000860:	f000 ff9a 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 f820 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f7ff ffbe 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800086c:	f7ff ff82 	bl	8000774 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000870:	f000 f970 	bl	8000b54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000874:	f000 f9c0 	bl	8000bf8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000878:	f000 fa10 	bl	8000c9c <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800087c:	f000 fa60 	bl	8000d40 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 8000880:	f000 fa92 	bl	8000da8 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 8000884:	f000 fac4 	bl	8000e10 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuffer, 1000);
 8000888:	23fa      	movs	r3, #250	@ 0xfa
 800088a:	009a      	lsls	r2, r3, #2
 800088c:	4904      	ldr	r1, [pc, #16]	@ (80008a0 <main+0x44>)
 800088e:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <main+0x48>)
 8000890:	0018      	movs	r0, r3
 8000892:	f004 fa67 	bl	8004d64 <HAL_UARTEx_ReceiveToIdle_DMA>
//  HAL_UART_Receive_DMA(&huart2, RxBuffer, 1000);

    // Start the TX phase
    MapTx_Start();
 8000896:	f7ff fec1 	bl	800061c <MapTx_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	e7fd      	b.n	800089a <main+0x3e>
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	200002e8 	.word	0x200002e8
 80008a4:	20000768 	.word	0x20000768

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b095      	sub	sp, #84	@ 0x54
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	2414      	movs	r4, #20
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	233c      	movs	r3, #60	@ 0x3c
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f004 fb19 	bl	8004ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	0018      	movs	r0, r3
 80008c2:	2310      	movs	r3, #16
 80008c4:	001a      	movs	r2, r3
 80008c6:	2100      	movs	r1, #0
 80008c8:	f004 fb12 	bl	8004ef0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fdaf 	bl	8002434 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	2201      	movs	r2, #1
 80008da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2280      	movs	r2, #128	@ 0x80
 80008e0:	0252      	lsls	r2, r2, #9
 80008e2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	0021      	movs	r1, r4
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2202      	movs	r2, #2
 80008ea:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2203      	movs	r2, #3
 80008f0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2210      	movs	r2, #16
 80008fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	0292      	lsls	r2, r2, #10
 8000904:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	0492      	lsls	r2, r2, #18
 800090c:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	0592      	lsls	r2, r2, #22
 8000914:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000916:	187b      	adds	r3, r7, r1
 8000918:	0018      	movs	r0, r3
 800091a:	f001 fdd7 	bl	80024cc <HAL_RCC_OscConfig>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000922:	f000 f819 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2207      	movs	r2, #7
 800092a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2202      	movs	r2, #2
 8000930:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2102      	movs	r1, #2
 8000942:	0018      	movs	r0, r3
 8000944:	f002 f922 	bl	8002b8c <HAL_RCC_ClockConfig>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800094c:	f000 f804 	bl	8000958 <Error_Handler>
  }
}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b015      	add	sp, #84	@ 0x54
 8000956:	bd90      	pop	{r4, r7, pc}

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <HAL_MspInit+0x4c>)
 800096c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000970:	2101      	movs	r1, #1
 8000972:	430a      	orrs	r2, r1
 8000974:	641a      	str	r2, [r3, #64]	@ 0x40
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	2201      	movs	r2, #1
 800097c:	4013      	ands	r3, r2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	0549      	lsls	r1, r1, #21
 800098c:	430a      	orrs	r2, r1
 800098e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000992:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000994:	2380      	movs	r3, #128	@ 0x80
 8000996:	055b      	lsls	r3, r3, #21
 8000998:	4013      	ands	r3, r2
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800099e:	23c0      	movs	r3, #192	@ 0xc0
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 ff7e 	bl	80018a4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000

080009b4 <NMI_Handler>:
/*           Cortex-M0+ Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	e7fd      	b.n	80009b8 <NMI_Handler+0x4>

080009bc <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	e7fd      	b.n	80009c0 <HardFault_Handler+0x4>

080009c4 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80009dc:	f000 ff46 	bl	800186c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel 1 interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009ec:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <DMA1_Channel1_IRQHandler+0x14>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 fa46 	bl	8001e80 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	20000a4c 	.word	0x20000a4c

08000a00 <DMA1_Channel2_3_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
 */
void DMA1_Channel2_3_IRQHandler(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

	/* USER CODE END DMA1_Channel2_3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f001 fa3a 	bl	8001e80 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 fa36 	bl	8001e80 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

	/* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	20000aac 	.word	0x20000aac
 8000a20:	20000b0c 	.word	0x20000b0c

08000a24 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
 * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
 */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

	/* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x54>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 fa28 	bl	8001e80 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x58>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f001 fa24 	bl	8001e80 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x5c>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 fa20 	bl	8001e80 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8000a40:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x60>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f001 fa1c 	bl	8001e80 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x64>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fa18 	bl	8001e80 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart5_rx);
 8000a50:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x68>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f001 fa14 	bl	8001e80 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart5_tx);
 8000a58:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x6c>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f001 fa10 	bl	8001e80 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x70>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 fa0c 	bl	8001e80 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x74>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f001 fa08 	bl	8001e80 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

	/* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	20000b6c 	.word	0x20000b6c
 8000a7c:	20000bcc 	.word	0x20000bcc
 8000a80:	20000c2c 	.word	0x20000c2c
 8000a84:	20000c8c 	.word	0x20000c8c
 8000a88:	20000cec 	.word	0x20000cec
 8000a8c:	20000d4c 	.word	0x20000d4c
 8000a90:	20000dac 	.word	0x20000dac
 8000a94:	20000e0c 	.word	0x20000e0c
 8000a98:	20000e6c 	.word	0x20000e6c

08000a9c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <USART1_IRQHandler+0x14>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 fd40 	bl	8003528 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	200006d4 	.word	0x200006d4

08000ab4 <USART2_LPUART2_IRQHandler>:

/**
 * @brief This function handles USART2 + LPUART2 Interrupt.
 */
void USART2_LPUART2_IRQHandler(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

	/* USER CODE END USART2_LPUART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <USART2_LPUART2_IRQHandler+0x14>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f002 fd34 	bl	8003528 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

	/* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	20000768 	.word	0x20000768

08000acc <USART3_4_5_6_LPUART1_IRQHandler>:

/**
 * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
 */
void USART3_4_5_6_LPUART1_IRQHandler(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

	/* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <USART3_4_5_6_LPUART1_IRQHandler+0x2c>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f002 fd28 	bl	8003528 <HAL_UART_IRQHandler>
	HAL_UART_IRQHandler(&huart4);
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <USART3_4_5_6_LPUART1_IRQHandler+0x30>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 fd24 	bl	8003528 <HAL_UART_IRQHandler>
	HAL_UART_IRQHandler(&huart5);
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <USART3_4_5_6_LPUART1_IRQHandler+0x34>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f002 fd20 	bl	8003528 <HAL_UART_IRQHandler>
	HAL_UART_IRQHandler(&huart6);
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <USART3_4_5_6_LPUART1_IRQHandler+0x38>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 fd1c 	bl	8003528 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

	/* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	200007fc 	.word	0x200007fc
 8000afc:	20000890 	.word	0x20000890
 8000b00:	20000924 	.word	0x20000924
 8000b04:	200009b8 	.word	0x200009b8

08000b08 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

	FullInit++;
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <HAL_UART_RxCpltCallback+0x1c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b02      	ldr	r3, [pc, #8]	@ (8000b24 <HAL_UART_RxCpltCallback+0x1c>)
 8000b1a:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(huart, pData, 10, 10);

}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200006d0 	.word	0x200006d0

08000b28 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	HalfInit++;
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b02      	ldr	r3, [pc, #8]	@ (8000b44 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b3a:	701a      	strb	r2, [r3, #0]

}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200006d1 	.word	0x200006d1

08000b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b58:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b5a:	4a25      	ldr	r2, [pc, #148]	@ (8000bf0 <MX_USART1_UART_Init+0x9c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8000b5e:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b60:	4a24      	ldr	r2, [pc, #144]	@ (8000bf4 <MX_USART1_UART_Init+0xa0>)
 8000b62:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b64:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b78:	220c      	movs	r2, #12
 8000b7a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b88:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f002 fbdb 	bl	8003358 <HAL_UART_Init>
 8000ba2:	1e03      	subs	r3, r0, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000ba6:	f7ff fed7 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000baa:	2380      	movs	r3, #128	@ 0x80
 8000bac:	05da      	lsls	r2, r3, #23
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f004 f854 	bl	8004c60 <HAL_UARTEx_SetTxFifoThreshold>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000bbc:	f7ff fecc 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000bc0:	2380      	movs	r3, #128	@ 0x80
 8000bc2:	04da      	lsls	r2, r3, #19
 8000bc4:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f004 f889 	bl	8004ce0 <HAL_UARTEx_SetRxFifoThreshold>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000bd2:	f7ff fec1 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bd6:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f004 f807 	bl	8004bec <HAL_UARTEx_DisableFifoMode>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000be2:	f7ff feb9 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200006d4 	.word	0x200006d4
 8000bf0:	40013800 	.word	0x40013800
 8000bf4:	001e8480 	.word	0x001e8480

08000bf8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bfc:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000bfe:	4a25      	ldr	r2, [pc, #148]	@ (8000c94 <MX_USART2_UART_Init+0x9c>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8000c02:	4b23      	ldr	r3, [pc, #140]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c04:	4a24      	ldr	r2, [pc, #144]	@ (8000c98 <MX_USART2_UART_Init+0xa0>)
 8000c06:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c08:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0e:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c40:	0018      	movs	r0, r3
 8000c42:	f002 fb89 	bl	8003358 <HAL_UART_Init>
 8000c46:	1e03      	subs	r3, r0, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000c4a:	f7ff fe85 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000c4e:	2380      	movs	r3, #128	@ 0x80
 8000c50:	05da      	lsls	r2, r3, #23
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c54:	0011      	movs	r1, r2
 8000c56:	0018      	movs	r0, r3
 8000c58:	f004 f802 	bl	8004c60 <HAL_UARTEx_SetTxFifoThreshold>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c60:	f7ff fe7a 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	04da      	lsls	r2, r3, #19
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f004 f837 	bl	8004ce0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 8000c76:	f7ff fe6f 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c7a:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f003 ffb5 	bl	8004bec <HAL_UARTEx_DisableFifoMode>
 8000c82:	1e03      	subs	r3, r0, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 8000c86:	f7ff fe67 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000768 	.word	0x20000768
 8000c94:	40004400 	.word	0x40004400
 8000c98:	001e8480 	.word	0x001e8480

08000c9c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000ca2:	4a25      	ldr	r2, [pc, #148]	@ (8000d38 <MX_USART3_UART_Init+0x9c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000ca6:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000ca8:	4a24      	ldr	r2, [pc, #144]	@ (8000d3c <MX_USART3_UART_Init+0xa0>)
 8000caa:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cac:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f002 fb37 	bl	8003358 <HAL_UART_Init>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000cee:	f7ff fe33 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000cf2:	2380      	movs	r3, #128	@ 0x80
 8000cf4:	05da      	lsls	r2, r3, #23
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f003 ffb0 	bl	8004c60 <HAL_UARTEx_SetTxFifoThreshold>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d001      	beq.n	8000d08 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8000d04:	f7ff fe28 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8000d08:	2380      	movs	r3, #128	@ 0x80
 8000d0a:	04da      	lsls	r2, r3, #19
 8000d0c:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f003 ffe5 	bl	8004ce0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000d1a:	f7ff fe1d 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d1e:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <MX_USART3_UART_Init+0x98>)
 8000d20:	0018      	movs	r0, r3
 8000d22:	f003 ff63 	bl	8004bec <HAL_UARTEx_DisableFifoMode>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000d2a:	f7ff fe15 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200007fc 	.word	0x200007fc
 8000d38:	40004800 	.word	0x40004800
 8000d3c:	001e8480 	.word	0x001e8480

08000d40 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000d44:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d46:	4a16      	ldr	r2, [pc, #88]	@ (8000da0 <MX_USART4_UART_Init+0x60>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d4c:	4a15      	ldr	r2, [pc, #84]	@ (8000da4 <MX_USART4_UART_Init+0x64>)
 8000d4e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d64:	220c      	movs	r2, #12
 8000d66:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d86:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <MX_USART4_UART_Init+0x5c>)
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f002 fae5 	bl	8003358 <HAL_UART_Init>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART4_UART_Init+0x56>
  {
    Error_Handler();
 8000d92:	f7ff fde1 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000890 	.word	0x20000890
 8000da0:	40004c00 	.word	0x40004c00
 8000da4:	001e8480 	.word	0x001e8480

08000da8 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000dac:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000dae:	4a16      	ldr	r2, [pc, #88]	@ (8000e08 <MX_USART5_UART_Init+0x60>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 2000000;
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000db4:	4a15      	ldr	r2, [pc, #84]	@ (8000e0c <MX_USART5_UART_Init+0x64>)
 8000db6:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000dcc:	220c      	movs	r2, #12
 8000dce:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000dee:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f002 fab1 	bl	8003358 <HAL_UART_Init>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART5_UART_Init+0x56>
  {
    Error_Handler();
 8000dfa:	f7ff fdad 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000924 	.word	0x20000924
 8000e08:	40005000 	.word	0x40005000
 8000e0c:	001e8480 	.word	0x001e8480

08000e10 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e14:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e16:	4a16      	ldr	r2, [pc, #88]	@ (8000e70 <MX_USART6_UART_Init+0x60>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 2000000;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e1c:	4a15      	ldr	r2, [pc, #84]	@ (8000e74 <MX_USART6_UART_Init+0x64>)
 8000e1e:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e34:	220c      	movs	r2, #12
 8000e36:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e44:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e56:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <MX_USART6_UART_Init+0x5c>)
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f002 fa7d 	bl	8003358 <HAL_UART_Init>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART6_UART_Init+0x56>
  {
    Error_Handler();
 8000e62:	f7ff fd79 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200009b8 	.word	0x200009b8
 8000e70:	40013c00 	.word	0x40013c00
 8000e74:	001e8480 	.word	0x001e8480

08000e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b0ab      	sub	sp, #172	@ 0xac
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	2394      	movs	r3, #148	@ 0x94
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	0018      	movs	r0, r3
 8000e86:	2314      	movs	r3, #20
 8000e88:	001a      	movs	r2, r3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f004 f830 	bl	8004ef0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	2448      	movs	r4, #72	@ 0x48
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	0018      	movs	r0, r3
 8000e96:	234c      	movs	r3, #76	@ 0x4c
 8000e98:	001a      	movs	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f004 f828 	bl	8004ef0 <memset>
  if(uartHandle->Instance==USART1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4aa0      	ldr	r2, [pc, #640]	@ (8001128 <HAL_UART_MspInit+0x2b0>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d000      	beq.n	8000eac <HAL_UART_MspInit+0x34>
 8000eaa:	e09b      	b.n	8000fe4 <HAL_UART_MspInit+0x16c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f002 f810 	bl	8002ee0 <HAL_RCCEx_PeriphCLKConfig>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000ec4:	f7ff fd48 	bl	8000958 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ec8:	4b98      	ldr	r3, [pc, #608]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 8000eca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ecc:	4b97      	ldr	r3, [pc, #604]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 8000ece:	2180      	movs	r1, #128	@ 0x80
 8000ed0:	01c9      	lsls	r1, r1, #7
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ed6:	4b95      	ldr	r3, [pc, #596]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 8000ed8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000eda:	2380      	movs	r3, #128	@ 0x80
 8000edc:	01db      	lsls	r3, r3, #7
 8000ede:	4013      	ands	r3, r2
 8000ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b91      	ldr	r3, [pc, #580]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 8000ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ee8:	4b90      	ldr	r3, [pc, #576]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	430a      	orrs	r2, r1
 8000eee:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ef0:	4b8e      	ldr	r3, [pc, #568]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 8000ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	643b      	str	r3, [r7, #64]	@ 0x40
 8000efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000efc:	2194      	movs	r1, #148	@ 0x94
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	22c0      	movs	r2, #192	@ 0xc0
 8000f02:	00d2      	lsls	r2, r2, #3
 8000f04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2202      	movs	r2, #2
 8000f0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	187a      	adds	r2, r7, r1
 8000f20:	23a0      	movs	r3, #160	@ 0xa0
 8000f22:	05db      	lsls	r3, r3, #23
 8000f24:	0011      	movs	r1, r2
 8000f26:	0018      	movs	r0, r3
 8000f28:	f001 f918 	bl	800215c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000f2c:	4b80      	ldr	r3, [pc, #512]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f2e:	4a81      	ldr	r2, [pc, #516]	@ (8001134 <HAL_UART_MspInit+0x2bc>)
 8000f30:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000f32:	4b7f      	ldr	r3, [pc, #508]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f34:	2232      	movs	r2, #50	@ 0x32
 8000f36:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f38:	4b7d      	ldr	r3, [pc, #500]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3e:	4b7c      	ldr	r3, [pc, #496]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f44:	4b7a      	ldr	r3, [pc, #488]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f46:	2280      	movs	r2, #128	@ 0x80
 8000f48:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f4a:	4b79      	ldr	r3, [pc, #484]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f50:	4b77      	ldr	r3, [pc, #476]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f56:	4b76      	ldr	r3, [pc, #472]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f58:	2220      	movs	r2, #32
 8000f5a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f5c:	4b74      	ldr	r3, [pc, #464]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f62:	4b73      	ldr	r3, [pc, #460]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fd91 	bl	8001a8c <HAL_DMA_Init>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000f6e:	f7ff fcf3 	bl	8000958 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2180      	movs	r1, #128	@ 0x80
 8000f76:	4a6e      	ldr	r2, [pc, #440]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f78:	505a      	str	r2, [r3, r1]
 8000f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001130 <HAL_UART_MspInit+0x2b8>)
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000f80:	4b6d      	ldr	r3, [pc, #436]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000f82:	4a6e      	ldr	r2, [pc, #440]	@ (800113c <HAL_UART_MspInit+0x2c4>)
 8000f84:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000f86:	4b6c      	ldr	r3, [pc, #432]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000f88:	2233      	movs	r2, #51	@ 0x33
 8000f8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000f8e:	2210      	movs	r2, #16
 8000f90:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f92:	4b69      	ldr	r3, [pc, #420]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f98:	4b67      	ldr	r3, [pc, #412]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000f9a:	2280      	movs	r2, #128	@ 0x80
 8000f9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f9e:	4b66      	ldr	r3, [pc, #408]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa4:	4b64      	ldr	r3, [pc, #400]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000faa:	4b63      	ldr	r3, [pc, #396]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000fac:	2220      	movs	r2, #32
 8000fae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fb0:	4b61      	ldr	r3, [pc, #388]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000fb6:	4b60      	ldr	r3, [pc, #384]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f000 fd67 	bl	8001a8c <HAL_DMA_Init>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8000fc2:	f7ff fcc9 	bl	8000958 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a5b      	ldr	r2, [pc, #364]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000fca:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8001138 <HAL_UART_MspInit+0x2c0>)
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	201b      	movs	r0, #27
 8000fd8:	f000 fd26 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fdc:	201b      	movs	r0, #27
 8000fde:	f000 fd38 	bl	8001a52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000fe2:	e390      	b.n	8001706 <HAL_UART_MspInit+0x88e>
  else if(uartHandle->Instance==USART2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a55      	ldr	r2, [pc, #340]	@ (8001140 <HAL_UART_MspInit+0x2c8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d000      	beq.n	8000ff0 <HAL_UART_MspInit+0x178>
 8000fee:	e0b1      	b.n	8001154 <HAL_UART_MspInit+0x2dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff0:	2148      	movs	r1, #72	@ 0x48
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	0018      	movs	r0, r3
 8001002:	f001 ff6d 	bl	8002ee0 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d001      	beq.n	800100e <HAL_UART_MspInit+0x196>
      Error_Handler();
 800100a:	f7ff fca5 	bl	8000958 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800100e:	4b47      	ldr	r3, [pc, #284]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 8001010:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001012:	4b46      	ldr	r3, [pc, #280]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	0289      	lsls	r1, r1, #10
 8001018:	430a      	orrs	r2, r1
 800101a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800101c:	4b43      	ldr	r3, [pc, #268]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 800101e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001020:	2380      	movs	r3, #128	@ 0x80
 8001022:	029b      	lsls	r3, r3, #10
 8001024:	4013      	ands	r3, r2
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b40      	ldr	r3, [pc, #256]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 800102c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800102e:	4b3f      	ldr	r3, [pc, #252]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	@ 0x34
 8001036:	4b3d      	ldr	r3, [pc, #244]	@ (800112c <HAL_UART_MspInit+0x2b4>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800103a:	2201      	movs	r2, #1
 800103c:	4013      	ands	r3, r2
 800103e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001042:	2194      	movs	r1, #148	@ 0x94
 8001044:	187b      	adds	r3, r7, r1
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2202      	movs	r2, #2
 800104e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2201      	movs	r2, #1
 8001060:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	187a      	adds	r2, r7, r1
 8001064:	23a0      	movs	r3, #160	@ 0xa0
 8001066:	05db      	lsls	r3, r3, #23
 8001068:	0011      	movs	r1, r2
 800106a:	0018      	movs	r0, r3
 800106c:	f001 f876 	bl	800215c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8001070:	4b34      	ldr	r3, [pc, #208]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 8001072:	4a35      	ldr	r2, [pc, #212]	@ (8001148 <HAL_UART_MspInit+0x2d0>)
 8001074:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001076:	4b33      	ldr	r3, [pc, #204]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 8001078:	2234      	movs	r2, #52	@ 0x34
 800107a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107c:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001082:	4b30      	ldr	r3, [pc, #192]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001088:	4b2e      	ldr	r3, [pc, #184]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 800108a:	2280      	movs	r2, #128	@ 0x80
 800108c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800108e:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001094:	4b2b      	ldr	r3, [pc, #172]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800109a:	4b2a      	ldr	r3, [pc, #168]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 800109c:	2220      	movs	r2, #32
 800109e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010a6:	4b27      	ldr	r3, [pc, #156]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 80010a8:	0018      	movs	r0, r3
 80010aa:	f000 fcef 	bl	8001a8c <HAL_DMA_Init>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_UART_MspInit+0x23e>
      Error_Handler();
 80010b2:	f7ff fc51 	bl	8000958 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	4a22      	ldr	r2, [pc, #136]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 80010bc:	505a      	str	r2, [r3, r1]
 80010be:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <HAL_UART_MspInit+0x2cc>)
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80010c4:	4b21      	ldr	r3, [pc, #132]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 80010c6:	4a22      	ldr	r2, [pc, #136]	@ (8001150 <HAL_UART_MspInit+0x2d8>)
 80010c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010ca:	4b20      	ldr	r3, [pc, #128]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 80010cc:	2235      	movs	r2, #53	@ 0x35
 80010ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 80010d2:	2210      	movs	r2, #16
 80010d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 80010de:	2280      	movs	r2, #128	@ 0x80
 80010e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 80010f0:	2220      	movs	r2, #32
 80010f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f4:	4b15      	ldr	r3, [pc, #84]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 80010fc:	0018      	movs	r0, r3
 80010fe:	f000 fcc5 	bl	8001a8c <HAL_DMA_Init>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d001      	beq.n	800110a <HAL_UART_MspInit+0x292>
      Error_Handler();
 8001106:	f7ff fc27 	bl	8000958 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a0f      	ldr	r2, [pc, #60]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 800110e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001110:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_UART_MspInit+0x2d4>)
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	201c      	movs	r0, #28
 800111c:	f000 fc84 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8001120:	201c      	movs	r0, #28
 8001122:	f000 fc96 	bl	8001a52 <HAL_NVIC_EnableIRQ>
}
 8001126:	e2ee      	b.n	8001706 <HAL_UART_MspInit+0x88e>
 8001128:	40013800 	.word	0x40013800
 800112c:	40021000 	.word	0x40021000
 8001130:	20000a4c 	.word	0x20000a4c
 8001134:	40020008 	.word	0x40020008
 8001138:	20000aac 	.word	0x20000aac
 800113c:	4002001c 	.word	0x4002001c
 8001140:	40004400 	.word	0x40004400
 8001144:	20000b0c 	.word	0x20000b0c
 8001148:	40020030 	.word	0x40020030
 800114c:	20000b6c 	.word	0x20000b6c
 8001150:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4aaa      	ldr	r2, [pc, #680]	@ (8001404 <HAL_UART_MspInit+0x58c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d000      	beq.n	8001160 <HAL_UART_MspInit+0x2e8>
 800115e:	e0bd      	b.n	80012dc <HAL_UART_MspInit+0x464>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001160:	2148      	movs	r1, #72	@ 0x48
 8001162:	187b      	adds	r3, r7, r1
 8001164:	2204      	movs	r2, #4
 8001166:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001168:	187b      	adds	r3, r7, r1
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116e:	187b      	adds	r3, r7, r1
 8001170:	0018      	movs	r0, r3
 8001172:	f001 feb5 	bl	8002ee0 <HAL_RCCEx_PeriphCLKConfig>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d001      	beq.n	800117e <HAL_UART_MspInit+0x306>
      Error_Handler();
 800117a:	f7ff fbed 	bl	8000958 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800117e:	4ba2      	ldr	r3, [pc, #648]	@ (8001408 <HAL_UART_MspInit+0x590>)
 8001180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001182:	4ba1      	ldr	r3, [pc, #644]	@ (8001408 <HAL_UART_MspInit+0x590>)
 8001184:	2180      	movs	r1, #128	@ 0x80
 8001186:	02c9      	lsls	r1, r1, #11
 8001188:	430a      	orrs	r2, r1
 800118a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800118c:	4b9e      	ldr	r3, [pc, #632]	@ (8001408 <HAL_UART_MspInit+0x590>)
 800118e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	02db      	lsls	r3, r3, #11
 8001194:	4013      	ands	r3, r2
 8001196:	637b      	str	r3, [r7, #52]	@ 0x34
 8001198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b9b      	ldr	r3, [pc, #620]	@ (8001408 <HAL_UART_MspInit+0x590>)
 800119c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800119e:	4b9a      	ldr	r3, [pc, #616]	@ (8001408 <HAL_UART_MspInit+0x590>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011a6:	4b98      	ldr	r3, [pc, #608]	@ (8001408 <HAL_UART_MspInit+0x590>)
 80011a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011aa:	2201      	movs	r2, #1
 80011ac:	4013      	ands	r3, r2
 80011ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80011b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b95      	ldr	r3, [pc, #596]	@ (8001408 <HAL_UART_MspInit+0x590>)
 80011b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011b6:	4b94      	ldr	r3, [pc, #592]	@ (8001408 <HAL_UART_MspInit+0x590>)
 80011b8:	2102      	movs	r1, #2
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80011be:	4b92      	ldr	r3, [pc, #584]	@ (8001408 <HAL_UART_MspInit+0x590>)
 80011c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c2:	2202      	movs	r2, #2
 80011c4:	4013      	ands	r3, r2
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ca:	2494      	movs	r4, #148	@ 0x94
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	2220      	movs	r2, #32
 80011d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	193b      	adds	r3, r7, r4
 80011d4:	2202      	movs	r2, #2
 80011d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80011e4:	193b      	adds	r3, r7, r4
 80011e6:	2204      	movs	r2, #4
 80011e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	193a      	adds	r2, r7, r4
 80011ec:	23a0      	movs	r3, #160	@ 0xa0
 80011ee:	05db      	lsls	r3, r3, #23
 80011f0:	0011      	movs	r1, r2
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 ffb2 	bl	800215c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f8:	0021      	movs	r1, r4
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2202      	movs	r2, #2
 8001204:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2204      	movs	r2, #4
 8001216:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	187b      	adds	r3, r7, r1
 800121a:	4a7c      	ldr	r2, [pc, #496]	@ (800140c <HAL_UART_MspInit+0x594>)
 800121c:	0019      	movs	r1, r3
 800121e:	0010      	movs	r0, r2
 8001220:	f000 ff9c 	bl	800215c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel5;
 8001224:	4b7a      	ldr	r3, [pc, #488]	@ (8001410 <HAL_UART_MspInit+0x598>)
 8001226:	4a7b      	ldr	r2, [pc, #492]	@ (8001414 <HAL_UART_MspInit+0x59c>)
 8001228:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800122a:	4b79      	ldr	r3, [pc, #484]	@ (8001410 <HAL_UART_MspInit+0x598>)
 800122c:	2236      	movs	r2, #54	@ 0x36
 800122e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001230:	4b77      	ldr	r3, [pc, #476]	@ (8001410 <HAL_UART_MspInit+0x598>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001236:	4b76      	ldr	r3, [pc, #472]	@ (8001410 <HAL_UART_MspInit+0x598>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800123c:	4b74      	ldr	r3, [pc, #464]	@ (8001410 <HAL_UART_MspInit+0x598>)
 800123e:	2280      	movs	r2, #128	@ 0x80
 8001240:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001242:	4b73      	ldr	r3, [pc, #460]	@ (8001410 <HAL_UART_MspInit+0x598>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001248:	4b71      	ldr	r3, [pc, #452]	@ (8001410 <HAL_UART_MspInit+0x598>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800124e:	4b70      	ldr	r3, [pc, #448]	@ (8001410 <HAL_UART_MspInit+0x598>)
 8001250:	2220      	movs	r2, #32
 8001252:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001254:	4b6e      	ldr	r3, [pc, #440]	@ (8001410 <HAL_UART_MspInit+0x598>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800125a:	4b6d      	ldr	r3, [pc, #436]	@ (8001410 <HAL_UART_MspInit+0x598>)
 800125c:	0018      	movs	r0, r3
 800125e:	f000 fc15 	bl	8001a8c <HAL_DMA_Init>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <HAL_UART_MspInit+0x3f2>
      Error_Handler();
 8001266:	f7ff fb77 	bl	8000958 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2180      	movs	r1, #128	@ 0x80
 800126e:	4a68      	ldr	r2, [pc, #416]	@ (8001410 <HAL_UART_MspInit+0x598>)
 8001270:	505a      	str	r2, [r3, r1]
 8001272:	4b67      	ldr	r3, [pc, #412]	@ (8001410 <HAL_UART_MspInit+0x598>)
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_tx.Instance = DMA1_Channel6;
 8001278:	4b67      	ldr	r3, [pc, #412]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 800127a:	4a68      	ldr	r2, [pc, #416]	@ (800141c <HAL_UART_MspInit+0x5a4>)
 800127c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800127e:	4b66      	ldr	r3, [pc, #408]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 8001280:	2237      	movs	r2, #55	@ 0x37
 8001282:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001284:	4b64      	ldr	r3, [pc, #400]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 8001286:	2210      	movs	r2, #16
 8001288:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800128a:	4b63      	ldr	r3, [pc, #396]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001290:	4b61      	ldr	r3, [pc, #388]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 8001292:	2280      	movs	r2, #128	@ 0x80
 8001294:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001296:	4b60      	ldr	r3, [pc, #384]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129c:	4b5e      	ldr	r3, [pc, #376]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 80012a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 80012a4:	2220      	movs	r2, #32
 80012a6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80012ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 80012b0:	0018      	movs	r0, r3
 80012b2:	f000 fbeb 	bl	8001a8c <HAL_DMA_Init>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d001      	beq.n	80012be <HAL_UART_MspInit+0x446>
      Error_Handler();
 80012ba:	f7ff fb4d 	bl	8000958 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a55      	ldr	r2, [pc, #340]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 80012c2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80012c4:	4b54      	ldr	r3, [pc, #336]	@ (8001418 <HAL_UART_MspInit+0x5a0>)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	201d      	movs	r0, #29
 80012d0:	f000 fbaa 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 80012d4:	201d      	movs	r0, #29
 80012d6:	f000 fbbc 	bl	8001a52 <HAL_NVIC_EnableIRQ>
}
 80012da:	e214      	b.n	8001706 <HAL_UART_MspInit+0x88e>
  else if(uartHandle->Instance==USART4)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001420 <HAL_UART_MspInit+0x5a8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d000      	beq.n	80012e8 <HAL_UART_MspInit+0x470>
 80012e6:	e0a5      	b.n	8001434 <HAL_UART_MspInit+0x5bc>
    __HAL_RCC_USART4_CLK_ENABLE();
 80012e8:	4b47      	ldr	r3, [pc, #284]	@ (8001408 <HAL_UART_MspInit+0x590>)
 80012ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012ec:	4b46      	ldr	r3, [pc, #280]	@ (8001408 <HAL_UART_MspInit+0x590>)
 80012ee:	2180      	movs	r1, #128	@ 0x80
 80012f0:	0309      	lsls	r1, r1, #12
 80012f2:	430a      	orrs	r2, r1
 80012f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012f6:	4b44      	ldr	r3, [pc, #272]	@ (8001408 <HAL_UART_MspInit+0x590>)
 80012f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012fa:	2380      	movs	r3, #128	@ 0x80
 80012fc:	031b      	lsls	r3, r3, #12
 80012fe:	4013      	ands	r3, r2
 8001300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <HAL_UART_MspInit+0x590>)
 8001306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001308:	4b3f      	ldr	r3, [pc, #252]	@ (8001408 <HAL_UART_MspInit+0x590>)
 800130a:	2101      	movs	r1, #1
 800130c:	430a      	orrs	r2, r1
 800130e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001310:	4b3d      	ldr	r3, [pc, #244]	@ (8001408 <HAL_UART_MspInit+0x590>)
 8001312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001314:	2201      	movs	r2, #1
 8001316:	4013      	ands	r3, r2
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800131c:	2194      	movs	r1, #148	@ 0x94
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2203      	movs	r2, #3
 8001322:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2202      	movs	r2, #2
 8001328:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2204      	movs	r2, #4
 800133a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	187a      	adds	r2, r7, r1
 800133e:	23a0      	movs	r3, #160	@ 0xa0
 8001340:	05db      	lsls	r3, r3, #23
 8001342:	0011      	movs	r1, r2
 8001344:	0018      	movs	r0, r3
 8001346:	f000 ff09 	bl	800215c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel7;
 800134a:	4b36      	ldr	r3, [pc, #216]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 800134c:	4a36      	ldr	r2, [pc, #216]	@ (8001428 <HAL_UART_MspInit+0x5b0>)
 800134e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 8001350:	4b34      	ldr	r3, [pc, #208]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 8001352:	2238      	movs	r2, #56	@ 0x38
 8001354:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001356:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135c:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001362:	4b30      	ldr	r3, [pc, #192]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 8001364:	2280      	movs	r2, #128	@ 0x80
 8001366:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001368:	4b2e      	ldr	r3, [pc, #184]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800136e:	4b2d      	ldr	r3, [pc, #180]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8001374:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 8001376:	2220      	movs	r2, #32
 8001378:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800137a:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8001380:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 8001382:	0018      	movs	r0, r3
 8001384:	f000 fb82 	bl	8001a8c <HAL_DMA_Init>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d001      	beq.n	8001390 <HAL_UART_MspInit+0x518>
      Error_Handler();
 800138c:	f7ff fae4 	bl	8000958 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2180      	movs	r1, #128	@ 0x80
 8001394:	4a23      	ldr	r2, [pc, #140]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 8001396:	505a      	str	r2, [r3, r1]
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <HAL_UART_MspInit+0x5ac>)
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA2_Channel1;
 800139e:	4b23      	ldr	r3, [pc, #140]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013a0:	4a23      	ldr	r2, [pc, #140]	@ (8001430 <HAL_UART_MspInit+0x5b8>)
 80013a2:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 80013a4:	4b21      	ldr	r3, [pc, #132]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013a6:	2239      	movs	r2, #57	@ 0x39
 80013a8:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013ac:	2210      	movs	r2, #16
 80013ae:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013b8:	2280      	movs	r2, #128	@ 0x80
 80013ba:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_CIRCULAR;
 80013c8:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013ca:	2220      	movs	r2, #32
 80013cc:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013d6:	0018      	movs	r0, r3
 80013d8:	f000 fb58 	bl	8001a8c <HAL_DMA_Init>
 80013dc:	1e03      	subs	r3, r0, #0
 80013de:	d001      	beq.n	80013e4 <HAL_UART_MspInit+0x56c>
      Error_Handler();
 80013e0:	f7ff faba 	bl	8000958 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a11      	ldr	r2, [pc, #68]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013e8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <HAL_UART_MspInit+0x5b4>)
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	201d      	movs	r0, #29
 80013f6:	f000 fb17 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 80013fa:	201d      	movs	r0, #29
 80013fc:	f000 fb29 	bl	8001a52 <HAL_NVIC_EnableIRQ>
}
 8001400:	e181      	b.n	8001706 <HAL_UART_MspInit+0x88e>
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	40004800 	.word	0x40004800
 8001408:	40021000 	.word	0x40021000
 800140c:	50000400 	.word	0x50000400
 8001410:	20000bcc 	.word	0x20000bcc
 8001414:	40020058 	.word	0x40020058
 8001418:	20000c2c 	.word	0x20000c2c
 800141c:	4002006c 	.word	0x4002006c
 8001420:	40004c00 	.word	0x40004c00
 8001424:	20000c8c 	.word	0x20000c8c
 8001428:	40020080 	.word	0x40020080
 800142c:	20000cec 	.word	0x20000cec
 8001430:	40020408 	.word	0x40020408
  else if(uartHandle->Instance==USART5)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4ab5      	ldr	r2, [pc, #724]	@ (8001710 <HAL_UART_MspInit+0x898>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d000      	beq.n	8001440 <HAL_UART_MspInit+0x5c8>
 800143e:	e0ad      	b.n	800159c <HAL_UART_MspInit+0x724>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001440:	4bb4      	ldr	r3, [pc, #720]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 8001442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001444:	4bb3      	ldr	r3, [pc, #716]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 8001446:	2180      	movs	r1, #128	@ 0x80
 8001448:	0049      	lsls	r1, r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800144e:	4bb1      	ldr	r3, [pc, #708]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 8001450:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4013      	ands	r3, r2
 8001458:	623b      	str	r3, [r7, #32]
 800145a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	4bad      	ldr	r3, [pc, #692]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 800145e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001460:	4bac      	ldr	r3, [pc, #688]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 8001462:	2102      	movs	r1, #2
 8001464:	430a      	orrs	r2, r1
 8001466:	635a      	str	r2, [r3, #52]	@ 0x34
 8001468:	4baa      	ldr	r3, [pc, #680]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 800146a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800146c:	2202      	movs	r2, #2
 800146e:	4013      	ands	r3, r2
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001474:	4ba7      	ldr	r3, [pc, #668]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 8001476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001478:	4ba6      	ldr	r3, [pc, #664]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 800147a:	2108      	movs	r1, #8
 800147c:	430a      	orrs	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001480:	4ba4      	ldr	r3, [pc, #656]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 8001482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001484:	2208      	movs	r2, #8
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800148c:	2494      	movs	r4, #148	@ 0x94
 800148e:	193b      	adds	r3, r7, r4
 8001490:	2202      	movs	r2, #2
 8001492:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	193b      	adds	r3, r7, r4
 8001496:	2202      	movs	r2, #2
 8001498:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	193b      	adds	r3, r7, r4
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	193b      	adds	r3, r7, r4
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART5;
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	2208      	movs	r2, #8
 80014aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	4a9a      	ldr	r2, [pc, #616]	@ (8001718 <HAL_UART_MspInit+0x8a0>)
 80014b0:	0019      	movs	r1, r3
 80014b2:	0010      	movs	r0, r2
 80014b4:	f000 fe52 	bl	800215c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014b8:	0021      	movs	r1, r4
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	2208      	movs	r2, #8
 80014be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	2202      	movs	r2, #2
 80014c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	187b      	adds	r3, r7, r1
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	2203      	movs	r2, #3
 80014d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	4a90      	ldr	r2, [pc, #576]	@ (800171c <HAL_UART_MspInit+0x8a4>)
 80014dc:	0019      	movs	r1, r3
 80014de:	0010      	movs	r0, r2
 80014e0:	f000 fe3c 	bl	800215c <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA2_Channel2;
 80014e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 80014e6:	4a8f      	ldr	r2, [pc, #572]	@ (8001724 <HAL_UART_MspInit+0x8ac>)
 80014e8:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_USART5_RX;
 80014ea:	4b8d      	ldr	r3, [pc, #564]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 80014ec:	224a      	movs	r2, #74	@ 0x4a
 80014ee:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f0:	4b8b      	ldr	r3, [pc, #556]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f6:	4b8a      	ldr	r3, [pc, #552]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014fc:	4b88      	ldr	r3, [pc, #544]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 80014fe:	2280      	movs	r2, #128	@ 0x80
 8001500:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001502:	4b87      	ldr	r3, [pc, #540]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001508:	4b85      	ldr	r3, [pc, #532]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_CIRCULAR;
 800150e:	4b84      	ldr	r3, [pc, #528]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 8001510:	2220      	movs	r2, #32
 8001512:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001514:	4b82      	ldr	r3, [pc, #520]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 800151a:	4b81      	ldr	r3, [pc, #516]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 800151c:	0018      	movs	r0, r3
 800151e:	f000 fab5 	bl	8001a8c <HAL_DMA_Init>
 8001522:	1e03      	subs	r3, r0, #0
 8001524:	d001      	beq.n	800152a <HAL_UART_MspInit+0x6b2>
      Error_Handler();
 8001526:	f7ff fa17 	bl	8000958 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart5_rx);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2180      	movs	r1, #128	@ 0x80
 800152e:	4a7c      	ldr	r2, [pc, #496]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 8001530:	505a      	str	r2, [r3, r1]
 8001532:	4b7b      	ldr	r3, [pc, #492]	@ (8001720 <HAL_UART_MspInit+0x8a8>)
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart5_tx.Instance = DMA2_Channel3;
 8001538:	4b7b      	ldr	r3, [pc, #492]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 800153a:	4a7c      	ldr	r2, [pc, #496]	@ (800172c <HAL_UART_MspInit+0x8b4>)
 800153c:	601a      	str	r2, [r3, #0]
    hdma_usart5_tx.Init.Request = DMA_REQUEST_USART5_TX;
 800153e:	4b7a      	ldr	r3, [pc, #488]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 8001540:	224b      	movs	r2, #75	@ 0x4b
 8001542:	605a      	str	r2, [r3, #4]
    hdma_usart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001544:	4b78      	ldr	r3, [pc, #480]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 8001546:	2210      	movs	r2, #16
 8001548:	609a      	str	r2, [r3, #8]
    hdma_usart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154a:	4b77      	ldr	r3, [pc, #476]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
    hdma_usart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001550:	4b75      	ldr	r3, [pc, #468]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	611a      	str	r2, [r3, #16]
    hdma_usart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001556:	4b74      	ldr	r3, [pc, #464]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
    hdma_usart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155c:	4b72      	ldr	r3, [pc, #456]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
    hdma_usart5_tx.Init.Mode = DMA_CIRCULAR;
 8001562:	4b71      	ldr	r3, [pc, #452]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 8001564:	2220      	movs	r2, #32
 8001566:	61da      	str	r2, [r3, #28]
    hdma_usart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001568:	4b6f      	ldr	r3, [pc, #444]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_tx) != HAL_OK)
 800156e:	4b6e      	ldr	r3, [pc, #440]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 8001570:	0018      	movs	r0, r3
 8001572:	f000 fa8b 	bl	8001a8c <HAL_DMA_Init>
 8001576:	1e03      	subs	r3, r0, #0
 8001578:	d001      	beq.n	800157e <HAL_UART_MspInit+0x706>
      Error_Handler();
 800157a:	f7ff f9ed 	bl	8000958 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart5_tx);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a69      	ldr	r2, [pc, #420]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 8001582:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001584:	4b68      	ldr	r3, [pc, #416]	@ (8001728 <HAL_UART_MspInit+0x8b0>)
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	201d      	movs	r0, #29
 8001590:	f000 fa4a 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8001594:	201d      	movs	r0, #29
 8001596:	f000 fa5c 	bl	8001a52 <HAL_NVIC_EnableIRQ>
}
 800159a:	e0b4      	b.n	8001706 <HAL_UART_MspInit+0x88e>
  else if(uartHandle->Instance==USART6)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a63      	ldr	r2, [pc, #396]	@ (8001730 <HAL_UART_MspInit+0x8b8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d000      	beq.n	80015a8 <HAL_UART_MspInit+0x730>
 80015a6:	e0ae      	b.n	8001706 <HAL_UART_MspInit+0x88e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 80015aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015ac:	4b59      	ldr	r3, [pc, #356]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 80015ae:	2180      	movs	r1, #128	@ 0x80
 80015b0:	0089      	lsls	r1, r1, #2
 80015b2:	430a      	orrs	r2, r1
 80015b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015b6:	4b57      	ldr	r3, [pc, #348]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 80015b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015ba:	2380      	movs	r3, #128	@ 0x80
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b53      	ldr	r3, [pc, #332]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 80015c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015c8:	4b52      	ldr	r3, [pc, #328]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80015d0:	4b50      	ldr	r3, [pc, #320]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 80015d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d4:	2201      	movs	r2, #1
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 80015de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 80015e2:	2102      	movs	r1, #2
 80015e4:	430a      	orrs	r2, r1
 80015e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80015e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001714 <HAL_UART_MspInit+0x89c>)
 80015ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ec:	2202      	movs	r2, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015f4:	2494      	movs	r4, #148	@ 0x94
 80015f6:	193b      	adds	r3, r7, r4
 80015f8:	2210      	movs	r2, #16
 80015fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	2202      	movs	r2, #2
 8001600:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	193b      	adds	r3, r7, r4
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	193b      	adds	r3, r7, r4
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART6;
 800160e:	193b      	adds	r3, r7, r4
 8001610:	2203      	movs	r2, #3
 8001612:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	193a      	adds	r2, r7, r4
 8001616:	23a0      	movs	r3, #160	@ 0xa0
 8001618:	05db      	lsls	r3, r3, #23
 800161a:	0011      	movs	r1, r2
 800161c:	0018      	movs	r0, r3
 800161e:	f000 fd9d 	bl	800215c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001622:	0021      	movs	r1, r4
 8001624:	187b      	adds	r3, r7, r1
 8001626:	2280      	movs	r2, #128	@ 0x80
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2202      	movs	r2, #2
 8001630:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	187b      	adds	r3, r7, r1
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800163e:	187b      	adds	r3, r7, r1
 8001640:	2208      	movs	r2, #8
 8001642:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	187b      	adds	r3, r7, r1
 8001646:	4a34      	ldr	r2, [pc, #208]	@ (8001718 <HAL_UART_MspInit+0x8a0>)
 8001648:	0019      	movs	r1, r3
 800164a:	0010      	movs	r0, r2
 800164c:	f000 fd86 	bl	800215c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Channel4;
 8001650:	4b38      	ldr	r3, [pc, #224]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 8001652:	4a39      	ldr	r2, [pc, #228]	@ (8001738 <HAL_UART_MspInit+0x8c0>)
 8001654:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8001656:	4b37      	ldr	r3, [pc, #220]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 8001658:	224c      	movs	r2, #76	@ 0x4c
 800165a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165c:	4b35      	ldr	r3, [pc, #212]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001662:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001668:	4b32      	ldr	r3, [pc, #200]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 800166a:	2280      	movs	r2, #128	@ 0x80
 800166c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800166e:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001674:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800167a:	4b2e      	ldr	r3, [pc, #184]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 800167c:	2220      	movs	r2, #32
 800167e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001680:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001686:	4b2b      	ldr	r3, [pc, #172]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 8001688:	0018      	movs	r0, r3
 800168a:	f000 f9ff 	bl	8001a8c <HAL_DMA_Init>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <HAL_UART_MspInit+0x81e>
      Error_Handler();
 8001692:	f7ff f961 	bl	8000958 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	4a26      	ldr	r2, [pc, #152]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 800169c:	505a      	str	r2, [r3, r1]
 800169e:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <HAL_UART_MspInit+0x8bc>)
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart6_tx.Instance = DMA2_Channel5;
 80016a4:	4b25      	ldr	r3, [pc, #148]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016a6:	4a26      	ldr	r2, [pc, #152]	@ (8001740 <HAL_UART_MspInit+0x8c8>)
 80016a8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 80016aa:	4b24      	ldr	r3, [pc, #144]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016ac:	224d      	movs	r2, #77	@ 0x4d
 80016ae:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b0:	4b22      	ldr	r3, [pc, #136]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016b2:	2210      	movs	r2, #16
 80016b4:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b6:	4b21      	ldr	r3, [pc, #132]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016be:	2280      	movs	r2, #128	@ 0x80
 80016c0:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016d0:	2220      	movs	r2, #32
 80016d2:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016d4:	4b19      	ldr	r3, [pc, #100]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80016da:	4b18      	ldr	r3, [pc, #96]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 f9d5 	bl	8001a8c <HAL_DMA_Init>
 80016e2:	1e03      	subs	r3, r0, #0
 80016e4:	d001      	beq.n	80016ea <HAL_UART_MspInit+0x872>
      Error_Handler();
 80016e6:	f7ff f937 	bl	8000958 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a13      	ldr	r2, [pc, #76]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016ee:	67da      	str	r2, [r3, #124]	@ 0x7c
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <HAL_UART_MspInit+0x8c4>)
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	201d      	movs	r0, #29
 80016fc:	f000 f994 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8001700:	201d      	movs	r0, #29
 8001702:	f000 f9a6 	bl	8001a52 <HAL_NVIC_EnableIRQ>
}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b02b      	add	sp, #172	@ 0xac
 800170c:	bd90      	pop	{r4, r7, pc}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	40005000 	.word	0x40005000
 8001714:	40021000 	.word	0x40021000
 8001718:	50000400 	.word	0x50000400
 800171c:	50000c00 	.word	0x50000c00
 8001720:	20000d4c 	.word	0x20000d4c
 8001724:	4002041c 	.word	0x4002041c
 8001728:	20000dac 	.word	0x20000dac
 800172c:	40020430 	.word	0x40020430
 8001730:	40013c00 	.word	0x40013c00
 8001734:	20000e0c 	.word	0x20000e0c
 8001738:	40020444 	.word	0x40020444
 800173c:	20000e6c 	.word	0x20000e6c
 8001740:	40020458 	.word	0x40020458

08001744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001744:	480d      	ldr	r0, [pc, #52]	@ (800177c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001746:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001748:	f7ff f9fe 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480c      	ldr	r0, [pc, #48]	@ (8001780 <LoopForever+0x6>)
  ldr r1, =_edata
 800174e:	490d      	ldr	r1, [pc, #52]	@ (8001784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001750:	4a0d      	ldr	r2, [pc, #52]	@ (8001788 <LoopForever+0xe>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001764:	4c0a      	ldr	r4, [pc, #40]	@ (8001790 <LoopForever+0x16>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001772:	f003 fbc5 	bl	8004f00 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001776:	f7ff f871 	bl	800085c <main>

0800177a <LoopForever>:

LoopForever:
  b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   r0, =_estack
 800177c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001788:	08005048 	.word	0x08005048
  ldr r2, =_sbss
 800178c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001790:	20000ed0 	.word	0x20000ed0

08001794 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_COMP_IRQHandler>
	...

08001798 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_Init+0x3c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <HAL_Init+0x3c>)
 80017aa:	2180      	movs	r1, #128	@ 0x80
 80017ac:	0049      	lsls	r1, r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b2:	2003      	movs	r0, #3
 80017b4:	f000 f810 	bl	80017d8 <HAL_InitTick>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	e001      	b.n	80017c8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80017c4:	f7ff f8ce 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017c8:	1dfb      	adds	r3, r7, #7
 80017ca:	781b      	ldrb	r3, [r3, #0]
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e0:	230f      	movs	r3, #15
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <HAL_InitTick+0x88>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d02b      	beq.n	8001848 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80017f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <HAL_InitTick+0x8c>)
 80017f2:	681c      	ldr	r4, [r3, #0]
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <HAL_InitTick+0x88>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	0019      	movs	r1, r3
 80017fa:	23fa      	movs	r3, #250	@ 0xfa
 80017fc:	0098      	lsls	r0, r3, #2
 80017fe:	f7fe fc81 	bl	8000104 <__udivsi3>
 8001802:	0003      	movs	r3, r0
 8001804:	0019      	movs	r1, r3
 8001806:	0020      	movs	r0, r4
 8001808:	f7fe fc7c 	bl	8000104 <__udivsi3>
 800180c:	0003      	movs	r3, r0
 800180e:	0018      	movs	r0, r3
 8001810:	f000 f92f 	bl	8001a72 <HAL_SYSTICK_Config>
 8001814:	1e03      	subs	r3, r0, #0
 8001816:	d112      	bne.n	800183e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d80a      	bhi.n	8001834 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	2301      	movs	r3, #1
 8001822:	425b      	negs	r3, r3
 8001824:	2200      	movs	r2, #0
 8001826:	0018      	movs	r0, r3
 8001828:	f000 f8fe 	bl	8001a28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <HAL_InitTick+0x90>)
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e00d      	b.n	8001850 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001834:	230f      	movs	r3, #15
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e008      	b.n	8001850 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800183e:	230f      	movs	r3, #15
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e003      	b.n	8001850 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001848:	230f      	movs	r3, #15
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	2201      	movs	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001850:	230f      	movs	r3, #15
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	781b      	ldrb	r3, [r3, #0]
}
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b005      	add	sp, #20
 800185c:	bd90      	pop	{r4, r7, pc}
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	20000008 	.word	0x20000008
 8001864:	20000000 	.word	0x20000000
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <HAL_IncTick+0x1c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	001a      	movs	r2, r3
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_IncTick+0x20>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	18d2      	adds	r2, r2, r3
 800187c:	4b03      	ldr	r3, [pc, #12]	@ (800188c <HAL_IncTick+0x20>)
 800187e:	601a      	str	r2, [r3, #0]
}
 8001880:	46c0      	nop			@ (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	20000008 	.word	0x20000008
 800188c:	20000ecc 	.word	0x20000ecc

08001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b02      	ldr	r3, [pc, #8]	@ (80018a0 <HAL_GetTick+0x10>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	20000ecc 	.word	0x20000ecc

080018a4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b002      	add	sp, #8
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	40010000 	.word	0x40010000
 80018cc:	fffff9ff 	.word	0xfffff9ff

080018d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	0002      	movs	r2, r0
 80018d8:	1dfb      	adds	r3, r7, #7
 80018da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80018e2:	d809      	bhi.n	80018f8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e4:	1dfb      	adds	r3, r7, #7
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	001a      	movs	r2, r3
 80018ea:	231f      	movs	r3, #31
 80018ec:	401a      	ands	r2, r3
 80018ee:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <__NVIC_EnableIRQ+0x30>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	4091      	lsls	r1, r2
 80018f4:	000a      	movs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80018f8:	46c0      	nop			@ (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b002      	add	sp, #8
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	0002      	movs	r2, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b7f      	cmp	r3, #127	@ 0x7f
 8001918:	d828      	bhi.n	800196c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800191a:	4a2f      	ldr	r2, [pc, #188]	@ (80019d8 <__NVIC_SetPriority+0xd4>)
 800191c:	1dfb      	adds	r3, r7, #7
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b25b      	sxtb	r3, r3
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	33c0      	adds	r3, #192	@ 0xc0
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	589b      	ldr	r3, [r3, r2]
 800192a:	1dfa      	adds	r2, r7, #7
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	0011      	movs	r1, r2
 8001930:	2203      	movs	r2, #3
 8001932:	400a      	ands	r2, r1
 8001934:	00d2      	lsls	r2, r2, #3
 8001936:	21ff      	movs	r1, #255	@ 0xff
 8001938:	4091      	lsls	r1, r2
 800193a:	000a      	movs	r2, r1
 800193c:	43d2      	mvns	r2, r2
 800193e:	401a      	ands	r2, r3
 8001940:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	019b      	lsls	r3, r3, #6
 8001946:	22ff      	movs	r2, #255	@ 0xff
 8001948:	401a      	ands	r2, r3
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	0018      	movs	r0, r3
 8001950:	2303      	movs	r3, #3
 8001952:	4003      	ands	r3, r0
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001958:	481f      	ldr	r0, [pc, #124]	@ (80019d8 <__NVIC_SetPriority+0xd4>)
 800195a:	1dfb      	adds	r3, r7, #7
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b25b      	sxtb	r3, r3
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	430a      	orrs	r2, r1
 8001964:	33c0      	adds	r3, #192	@ 0xc0
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800196a:	e031      	b.n	80019d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800196c:	4a1b      	ldr	r2, [pc, #108]	@ (80019dc <__NVIC_SetPriority+0xd8>)
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	0019      	movs	r1, r3
 8001974:	230f      	movs	r3, #15
 8001976:	400b      	ands	r3, r1
 8001978:	3b08      	subs	r3, #8
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3306      	adds	r3, #6
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	18d3      	adds	r3, r2, r3
 8001982:	3304      	adds	r3, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1dfa      	adds	r2, r7, #7
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	0011      	movs	r1, r2
 800198c:	2203      	movs	r2, #3
 800198e:	400a      	ands	r2, r1
 8001990:	00d2      	lsls	r2, r2, #3
 8001992:	21ff      	movs	r1, #255	@ 0xff
 8001994:	4091      	lsls	r1, r2
 8001996:	000a      	movs	r2, r1
 8001998:	43d2      	mvns	r2, r2
 800199a:	401a      	ands	r2, r3
 800199c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	019b      	lsls	r3, r3, #6
 80019a2:	22ff      	movs	r2, #255	@ 0xff
 80019a4:	401a      	ands	r2, r3
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	0018      	movs	r0, r3
 80019ac:	2303      	movs	r3, #3
 80019ae:	4003      	ands	r3, r0
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b4:	4809      	ldr	r0, [pc, #36]	@ (80019dc <__NVIC_SetPriority+0xd8>)
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	001c      	movs	r4, r3
 80019bc:	230f      	movs	r3, #15
 80019be:	4023      	ands	r3, r4
 80019c0:	3b08      	subs	r3, #8
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	430a      	orrs	r2, r1
 80019c6:	3306      	adds	r3, #6
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	18c3      	adds	r3, r0, r3
 80019cc:	3304      	adds	r3, #4
 80019ce:	601a      	str	r2, [r3, #0]
}
 80019d0:	46c0      	nop			@ (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b003      	add	sp, #12
 80019d6:	bd90      	pop	{r4, r7, pc}
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	1e5a      	subs	r2, r3, #1
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	045b      	lsls	r3, r3, #17
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d301      	bcc.n	80019f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f4:	2301      	movs	r3, #1
 80019f6:	e010      	b.n	8001a1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <SysTick_Config+0x44>)
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	3a01      	subs	r2, #1
 80019fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a00:	2301      	movs	r3, #1
 8001a02:	425b      	negs	r3, r3
 8001a04:	2103      	movs	r1, #3
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7ff ff7c 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <SysTick_Config+0x44>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <SysTick_Config+0x44>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	210f      	movs	r1, #15
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	1c02      	adds	r2, r0, #0
 8001a38:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	0011      	movs	r1, r2
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <__NVIC_SetPriority>
}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b004      	add	sp, #16
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	0002      	movs	r2, r0
 8001a5a:	1dfb      	adds	r3, r7, #7
 8001a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7ff ff33 	bl	80018d0 <__NVIC_EnableIRQ>
}
 8001a6a:	46c0      	nop			@ (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b002      	add	sp, #8
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff ffaf 	bl	80019e0 <SysTick_Config>
 8001a82:	0003      	movs	r3, r0
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e091      	b.n	8001bc2 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	001a      	movs	r2, r3
 8001aa4:	4b49      	ldr	r3, [pc, #292]	@ (8001bcc <HAL_DMA_Init+0x140>)
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d810      	bhi.n	8001acc <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a48      	ldr	r2, [pc, #288]	@ (8001bd0 <HAL_DMA_Init+0x144>)
 8001ab0:	4694      	mov	ip, r2
 8001ab2:	4463      	add	r3, ip
 8001ab4:	2114      	movs	r1, #20
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7fe fb24 	bl	8000104 <__udivsi3>
 8001abc:	0003      	movs	r3, r0
 8001abe:	009a      	lsls	r2, r3, #2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a43      	ldr	r2, [pc, #268]	@ (8001bd4 <HAL_DMA_Init+0x148>)
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aca:	e00f      	b.n	8001aec <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a41      	ldr	r2, [pc, #260]	@ (8001bd8 <HAL_DMA_Init+0x14c>)
 8001ad2:	4694      	mov	ip, r2
 8001ad4:	4463      	add	r3, ip
 8001ad6:	2114      	movs	r1, #20
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7fe fb13 	bl	8000104 <__udivsi3>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	009a      	lsls	r2, r3, #2
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a3c      	ldr	r2, [pc, #240]	@ (8001bdc <HAL_DMA_Init+0x150>)
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2225      	movs	r2, #37	@ 0x25
 8001af0:	2102      	movs	r1, #2
 8001af2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4938      	ldr	r1, [pc, #224]	@ (8001be0 <HAL_DMA_Init+0x154>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6819      	ldr	r1, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f000 fa9f 	bl	8002080 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	2380      	movs	r3, #128	@ 0x80
 8001b48:	01db      	lsls	r3, r3, #7
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d102      	bne.n	8001b54 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5c:	217f      	movs	r1, #127	@ 0x7f
 8001b5e:	400a      	ands	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b6a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d011      	beq.n	8001b98 <HAL_DMA_Init+0x10c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d80d      	bhi.n	8001b98 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f000 fac8 	bl	8002114 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	e008      	b.n	8001baa <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2225      	movs	r2, #37	@ 0x25
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2224      	movs	r2, #36	@ 0x24
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	40020407 	.word	0x40020407
 8001bd0:	bffdfff8 	.word	0xbffdfff8
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	bffdfbf8 	.word	0xbffdfbf8
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	ffff800f 	.word	0xffff800f

08001be4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf2:	2317      	movs	r3, #23
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2224      	movs	r2, #36	@ 0x24
 8001bfe:	5c9b      	ldrb	r3, [r3, r2]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_DMA_Start_IT+0x24>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e06f      	b.n	8001ce8 <HAL_DMA_Start_IT+0x104>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2224      	movs	r2, #36	@ 0x24
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2225      	movs	r2, #37	@ 0x25
 8001c14:	5c9b      	ldrb	r3, [r3, r2]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d157      	bne.n	8001ccc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2225      	movs	r2, #37	@ 0x25
 8001c20:	2102      	movs	r1, #2
 8001c22:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2101      	movs	r1, #1
 8001c36:	438a      	bics	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f9e1 	bl	8002008 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	210e      	movs	r1, #14
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e00f      	b.n	8001c80 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	210a      	movs	r1, #10
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	025b      	lsls	r3, r3, #9
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d008      	beq.n	8001ca0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c98:	2180      	movs	r1, #128	@ 0x80
 8001c9a:	0049      	lsls	r1, r1, #1
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb2:	2180      	movs	r1, #128	@ 0x80
 8001cb4:	0049      	lsls	r1, r1, #1
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e00a      	b.n	8001ce2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2280      	movs	r2, #128	@ 0x80
 8001cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2224      	movs	r2, #36	@ 0x24
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001cda:	2317      	movs	r3, #23
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001ce2:	2317      	movs	r3, #23
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	781b      	ldrb	r3, [r3, #0]
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b006      	add	sp, #24
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e04f      	b.n	8001da2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2225      	movs	r2, #37	@ 0x25
 8001d06:	5c9b      	ldrb	r3, [r3, r2]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d008      	beq.n	8001d20 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2204      	movs	r2, #4
 8001d12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2224      	movs	r2, #36	@ 0x24
 8001d18:	2100      	movs	r1, #0
 8001d1a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e040      	b.n	8001da2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	210e      	movs	r1, #14
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3a:	491c      	ldr	r1, [pc, #112]	@ (8001dac <HAL_DMA_Abort+0xbc>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	438a      	bics	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d54:	221c      	movs	r2, #28
 8001d56:	401a      	ands	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	4091      	lsls	r1, r2
 8001d60:	000a      	movs	r2, r1
 8001d62:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00c      	beq.n	8001d90 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d80:	490a      	ldr	r1, [pc, #40]	@ (8001dac <HAL_DMA_Abort+0xbc>)
 8001d82:	400a      	ands	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d8e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2225      	movs	r2, #37	@ 0x25
 8001d94:	2101      	movs	r1, #1
 8001d96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2224      	movs	r2, #36	@ 0x24
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b002      	add	sp, #8
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	fffffeff 	.word	0xfffffeff

08001db0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db8:	210f      	movs	r1, #15
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2225      	movs	r2, #37	@ 0x25
 8001dc4:	5c9b      	ldrb	r3, [r3, r2]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d006      	beq.n	8001dda <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001dd2:	187b      	adds	r3, r7, r1
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e048      	b.n	8001e6c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	210e      	movs	r1, #14
 8001de6:	438a      	bics	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	438a      	bics	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e04:	491d      	ldr	r1, [pc, #116]	@ (8001e7c <HAL_DMA_Abort_IT+0xcc>)
 8001e06:	400a      	ands	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	221c      	movs	r2, #28
 8001e10:	401a      	ands	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	2101      	movs	r1, #1
 8001e18:	4091      	lsls	r1, r2
 8001e1a:	000a      	movs	r2, r1
 8001e1c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e26:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00c      	beq.n	8001e4a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3a:	4910      	ldr	r1, [pc, #64]	@ (8001e7c <HAL_DMA_Abort_IT+0xcc>)
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e48:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2225      	movs	r2, #37	@ 0x25
 8001e4e:	2101      	movs	r1, #1
 8001e50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2224      	movs	r2, #36	@ 0x24
 8001e56:	2100      	movs	r1, #0
 8001e58:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	0010      	movs	r0, r2
 8001e6a:	4798      	blx	r3
    }
  }
  return status;
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	781b      	ldrb	r3, [r3, #0]
}
 8001e72:	0018      	movs	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b004      	add	sp, #16
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	fffffeff 	.word	0xfffffeff

08001e80 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9c:	221c      	movs	r2, #28
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d026      	beq.n	8001efa <HAL_DMA_IRQHandler+0x7a>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d022      	beq.n	8001efa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d107      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2104      	movs	r1, #4
 8001ecc:	438a      	bics	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	221c      	movs	r2, #28
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	2104      	movs	r1, #4
 8001ede:	4091      	lsls	r1, r2
 8001ee0:	000a      	movs	r2, r1
 8001ee2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d100      	bne.n	8001eee <HAL_DMA_IRQHandler+0x6e>
 8001eec:	e080      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	0010      	movs	r0, r2
 8001ef6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001ef8:	e07a      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	221c      	movs	r2, #28
 8001f00:	4013      	ands	r3, r2
 8001f02:	2202      	movs	r2, #2
 8001f04:	409a      	lsls	r2, r3
 8001f06:	0013      	movs	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d03c      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x108>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2202      	movs	r2, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	d038      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d10b      	bne.n	8001f3a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	210a      	movs	r1, #10
 8001f2e:	438a      	bics	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2225      	movs	r2, #37	@ 0x25
 8001f36:	2101      	movs	r1, #1
 8001f38:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	001a      	movs	r2, r3
 8001f40:	4b2e      	ldr	r3, [pc, #184]	@ (8001ffc <HAL_DMA_IRQHandler+0x17c>)
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d909      	bls.n	8001f5a <HAL_DMA_IRQHandler+0xda>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	221c      	movs	r2, #28
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002000 <HAL_DMA_IRQHandler+0x180>)
 8001f50:	2102      	movs	r1, #2
 8001f52:	4091      	lsls	r1, r2
 8001f54:	000a      	movs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	e008      	b.n	8001f6c <HAL_DMA_IRQHandler+0xec>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	221c      	movs	r2, #28
 8001f60:	401a      	ands	r2, r3
 8001f62:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <HAL_DMA_IRQHandler+0x184>)
 8001f64:	2102      	movs	r1, #2
 8001f66:	4091      	lsls	r1, r2
 8001f68:	000a      	movs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2224      	movs	r2, #36	@ 0x24
 8001f70:	2100      	movs	r1, #0
 8001f72:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d039      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	0010      	movs	r0, r2
 8001f84:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001f86:	e033      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8c:	221c      	movs	r2, #28
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2208      	movs	r2, #8
 8001f92:	409a      	lsls	r2, r3
 8001f94:	0013      	movs	r3, r2
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d02a      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x172>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d026      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	210e      	movs	r1, #14
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb8:	221c      	movs	r2, #28
 8001fba:	401a      	ands	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4091      	lsls	r1, r2
 8001fc4:	000a      	movs	r2, r1
 8001fc6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2225      	movs	r2, #37	@ 0x25
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2224      	movs	r2, #36	@ 0x24
 8001fda:	2100      	movs	r1, #0
 8001fdc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	0010      	movs	r0, r2
 8001fee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ff0:	46c0      	nop			@ (mov r8, r8)
 8001ff2:	46c0      	nop			@ (mov r8, r8)
}
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b004      	add	sp, #16
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	40020080 	.word	0x40020080
 8002000:	40020400 	.word	0x40020400
 8002004:	40020000 	.word	0x40020000

08002008 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800201e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002030:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	221c      	movs	r2, #28
 8002038:	401a      	ands	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	2101      	movs	r1, #1
 8002040:	4091      	lsls	r1, r2
 8002042:	000a      	movs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b10      	cmp	r3, #16
 8002054:	d108      	bne.n	8002068 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002066:	e007      	b.n	8002078 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	60da      	str	r2, [r3, #12]
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b004      	add	sp, #16
 800207e:	bd80      	pop	{r7, pc}

08002080 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	001a      	movs	r2, r3
 800208e:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002090:	429a      	cmp	r2, r3
 8002092:	d814      	bhi.n	80020be <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4a1a      	ldr	r2, [pc, #104]	@ (8002108 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800209e:	189a      	adds	r2, r3, r2
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	001a      	movs	r2, r3
 80020aa:	23ff      	movs	r3, #255	@ 0xff
 80020ac:	4013      	ands	r3, r2
 80020ae:	3b08      	subs	r3, #8
 80020b0:	2114      	movs	r1, #20
 80020b2:	0018      	movs	r0, r3
 80020b4:	f7fe f826 	bl	8000104 <__udivsi3>
 80020b8:	0003      	movs	r3, r0
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	e014      	b.n	80020e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4a11      	ldr	r2, [pc, #68]	@ (800210c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80020c8:	189a      	adds	r2, r3, r2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	001a      	movs	r2, r3
 80020d4:	23ff      	movs	r3, #255	@ 0xff
 80020d6:	4013      	ands	r3, r2
 80020d8:	3b08      	subs	r3, #8
 80020da:	2114      	movs	r1, #20
 80020dc:	0018      	movs	r0, r3
 80020de:	f7fe f811 	bl	8000104 <__udivsi3>
 80020e2:	0003      	movs	r3, r0
 80020e4:	3307      	adds	r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a09      	ldr	r2, [pc, #36]	@ (8002110 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 80020ec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	221f      	movs	r2, #31
 80020f2:	4013      	ands	r3, r2
 80020f4:	2201      	movs	r2, #1
 80020f6:	409a      	lsls	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80020fc:	46c0      	nop			@ (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b004      	add	sp, #16
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40020407 	.word	0x40020407
 8002108:	40020800 	.word	0x40020800
 800210c:	4002081c 	.word	0x4002081c
 8002110:	40020880 	.word	0x40020880

08002114 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	227f      	movs	r2, #127	@ 0x7f
 8002122:	4013      	ands	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800212a:	4694      	mov	ip, r2
 800212c:	4463      	add	r3, ip
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	001a      	movs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a07      	ldr	r2, [pc, #28]	@ (8002158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800213a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	3b01      	subs	r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	4013      	ands	r3, r2
 8002144:	2201      	movs	r2, #1
 8002146:	409a      	lsls	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800214c:	46c0      	nop			@ (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bd80      	pop	{r7, pc}
 8002154:	1000823f 	.word	0x1000823f
 8002158:	40020940 	.word	0x40020940

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216a:	e14d      	b.n	8002408 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2101      	movs	r1, #1
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4091      	lsls	r1, r2
 8002176:	000a      	movs	r2, r1
 8002178:	4013      	ands	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d100      	bne.n	8002184 <HAL_GPIO_Init+0x28>
 8002182:	e13e      	b.n	8002402 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2203      	movs	r2, #3
 800218a:	4013      	ands	r3, r2
 800218c:	2b01      	cmp	r3, #1
 800218e:	d005      	beq.n	800219c <HAL_GPIO_Init+0x40>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2203      	movs	r2, #3
 8002196:	4013      	ands	r3, r2
 8002198:	2b02      	cmp	r3, #2
 800219a:	d130      	bne.n	80021fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	409a      	lsls	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	43da      	mvns	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	409a      	lsls	r2, r3
 80021be:	0013      	movs	r3, r2
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021d2:	2201      	movs	r2, #1
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
 80021d8:	0013      	movs	r3, r2
 80021da:	43da      	mvns	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	2201      	movs	r2, #1
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	409a      	lsls	r2, r3
 80021f0:	0013      	movs	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2203      	movs	r2, #3
 8002204:	4013      	ands	r3, r2
 8002206:	2b03      	cmp	r3, #3
 8002208:	d017      	beq.n	800223a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	409a      	lsls	r2, r3
 8002218:	0013      	movs	r3, r2
 800221a:	43da      	mvns	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	409a      	lsls	r2, r3
 800222c:	0013      	movs	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2203      	movs	r2, #3
 8002240:	4013      	ands	r3, r2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d123      	bne.n	800228e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3208      	adds	r2, #8
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	58d3      	ldr	r3, [r2, r3]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2207      	movs	r2, #7
 8002258:	4013      	ands	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	220f      	movs	r2, #15
 800225e:	409a      	lsls	r2, r3
 8002260:	0013      	movs	r3, r2
 8002262:	43da      	mvns	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2107      	movs	r1, #7
 8002272:	400b      	ands	r3, r1
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	409a      	lsls	r2, r3
 8002278:	0013      	movs	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	08da      	lsrs	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3208      	adds	r2, #8
 8002288:	0092      	lsls	r2, r2, #2
 800228a:	6939      	ldr	r1, [r7, #16]
 800228c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	409a      	lsls	r2, r3
 800229c:	0013      	movs	r3, r2
 800229e:	43da      	mvns	r2, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2203      	movs	r2, #3
 80022ac:	401a      	ands	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	409a      	lsls	r2, r3
 80022b4:	0013      	movs	r3, r2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	23c0      	movs	r3, #192	@ 0xc0
 80022c8:	029b      	lsls	r3, r3, #10
 80022ca:	4013      	ands	r3, r2
 80022cc:	d100      	bne.n	80022d0 <HAL_GPIO_Init+0x174>
 80022ce:	e098      	b.n	8002402 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80022d0:	4a53      	ldr	r2, [pc, #332]	@ (8002420 <HAL_GPIO_Init+0x2c4>)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3318      	adds	r3, #24
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	589b      	ldr	r3, [r3, r2]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2203      	movs	r2, #3
 80022e2:	4013      	ands	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	220f      	movs	r2, #15
 80022e8:	409a      	lsls	r2, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	43da      	mvns	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	23a0      	movs	r3, #160	@ 0xa0
 80022f8:	05db      	lsls	r3, r3, #23
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d019      	beq.n	8002332 <HAL_GPIO_Init+0x1d6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a48      	ldr	r2, [pc, #288]	@ (8002424 <HAL_GPIO_Init+0x2c8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0x1d2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a47      	ldr	r2, [pc, #284]	@ (8002428 <HAL_GPIO_Init+0x2cc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_Init+0x1ce>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a46      	ldr	r2, [pc, #280]	@ (800242c <HAL_GPIO_Init+0x2d0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x1ca>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a45      	ldr	r2, [pc, #276]	@ (8002430 <HAL_GPIO_Init+0x2d4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_Init+0x1c6>
 800231e:	2304      	movs	r3, #4
 8002320:	e008      	b.n	8002334 <HAL_GPIO_Init+0x1d8>
 8002322:	2305      	movs	r3, #5
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x1d8>
 8002326:	2303      	movs	r3, #3
 8002328:	e004      	b.n	8002334 <HAL_GPIO_Init+0x1d8>
 800232a:	2302      	movs	r3, #2
 800232c:	e002      	b.n	8002334 <HAL_GPIO_Init+0x1d8>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x1d8>
 8002332:	2300      	movs	r3, #0
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	2103      	movs	r1, #3
 8002338:	400a      	ands	r2, r1
 800233a:	00d2      	lsls	r2, r2, #3
 800233c:	4093      	lsls	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002344:	4936      	ldr	r1, [pc, #216]	@ (8002420 <HAL_GPIO_Init+0x2c4>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3318      	adds	r3, #24
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002352:	4b33      	ldr	r3, [pc, #204]	@ (8002420 <HAL_GPIO_Init+0x2c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43da      	mvns	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	035b      	lsls	r3, r3, #13
 800236a:	4013      	ands	r3, r2
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002376:	4b2a      	ldr	r3, [pc, #168]	@ (8002420 <HAL_GPIO_Init+0x2c4>)
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800237c:	4b28      	ldr	r3, [pc, #160]	@ (8002420 <HAL_GPIO_Init+0x2c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	43da      	mvns	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	039b      	lsls	r3, r3, #14
 8002394:	4013      	ands	r3, r2
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <HAL_GPIO_Init+0x2c4>)
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002420 <HAL_GPIO_Init+0x2c4>)
 80023a8:	2384      	movs	r3, #132	@ 0x84
 80023aa:	58d3      	ldr	r3, [r2, r3]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	43da      	mvns	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	029b      	lsls	r3, r3, #10
 80023c0:	4013      	ands	r3, r2
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023cc:	4914      	ldr	r1, [pc, #80]	@ (8002420 <HAL_GPIO_Init+0x2c4>)
 80023ce:	2284      	movs	r2, #132	@ 0x84
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80023d4:	4a12      	ldr	r2, [pc, #72]	@ (8002420 <HAL_GPIO_Init+0x2c4>)
 80023d6:	2380      	movs	r3, #128	@ 0x80
 80023d8:	58d3      	ldr	r3, [r2, r3]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43da      	mvns	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	025b      	lsls	r3, r3, #9
 80023ee:	4013      	ands	r3, r2
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023fa:	4909      	ldr	r1, [pc, #36]	@ (8002420 <HAL_GPIO_Init+0x2c4>)
 80023fc:	2280      	movs	r2, #128	@ 0x80
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3301      	adds	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	40da      	lsrs	r2, r3
 8002410:	1e13      	subs	r3, r2, #0
 8002412:	d000      	beq.n	8002416 <HAL_GPIO_Init+0x2ba>
 8002414:	e6aa      	b.n	800216c <HAL_GPIO_Init+0x10>
  }
}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	46c0      	nop			@ (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b006      	add	sp, #24
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021800 	.word	0x40021800
 8002424:	50000400 	.word	0x50000400
 8002428:	50000800 	.word	0x50000800
 800242c:	50000c00 	.word	0x50000c00
 8002430:	50001000 	.word	0x50001000

08002434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a19      	ldr	r2, [pc, #100]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d11f      	bne.n	8002498 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002458:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	0013      	movs	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	189b      	adds	r3, r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4912      	ldr	r1, [pc, #72]	@ (80024b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002466:	0018      	movs	r0, r3
 8002468:	f7fd fe4c 	bl	8000104 <__udivsi3>
 800246c:	0003      	movs	r3, r0
 800246e:	3301      	adds	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002472:	e008      	b.n	8002486 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3b01      	subs	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e001      	b.n	8002486 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e009      	b.n	800249a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002486:	4b07      	ldr	r3, [pc, #28]	@ (80024a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	2380      	movs	r3, #128	@ 0x80
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	401a      	ands	r2, r3
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	429a      	cmp	r2, r3
 8002496:	d0ed      	beq.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	40007000 	.word	0x40007000
 80024a8:	fffff9ff 	.word	0xfffff9ff
 80024ac:	20000000 	.word	0x20000000
 80024b0:	000f4240 	.word	0x000f4240

080024b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80024b8:	4b03      	ldr	r3, [pc, #12]	@ (80024c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	23e0      	movs	r3, #224	@ 0xe0
 80024be:	01db      	lsls	r3, r3, #7
 80024c0:	4013      	ands	r3, r2
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f000 fb50 	bl	8002b80 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2201      	movs	r2, #1
 80024e6:	4013      	ands	r3, r2
 80024e8:	d100      	bne.n	80024ec <HAL_RCC_OscConfig+0x20>
 80024ea:	e07c      	b.n	80025e6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ec:	4bc3      	ldr	r3, [pc, #780]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2238      	movs	r2, #56	@ 0x38
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f6:	4bc1      	ldr	r3, [pc, #772]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2203      	movs	r2, #3
 80024fc:	4013      	ands	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d102      	bne.n	800250c <HAL_RCC_OscConfig+0x40>
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d002      	beq.n	8002512 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b08      	cmp	r3, #8
 8002510:	d10b      	bne.n	800252a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002512:	4bba      	ldr	r3, [pc, #744]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	029b      	lsls	r3, r3, #10
 800251a:	4013      	ands	r3, r2
 800251c:	d062      	beq.n	80025e4 <HAL_RCC_OscConfig+0x118>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d15e      	bne.n	80025e4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e32a      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	025b      	lsls	r3, r3, #9
 8002532:	429a      	cmp	r2, r3
 8002534:	d107      	bne.n	8002546 <HAL_RCC_OscConfig+0x7a>
 8002536:	4bb1      	ldr	r3, [pc, #708]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4bb0      	ldr	r3, [pc, #704]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 800253c:	2180      	movs	r1, #128	@ 0x80
 800253e:	0249      	lsls	r1, r1, #9
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e020      	b.n	8002588 <HAL_RCC_OscConfig+0xbc>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	23a0      	movs	r3, #160	@ 0xa0
 800254c:	02db      	lsls	r3, r3, #11
 800254e:	429a      	cmp	r2, r3
 8002550:	d10e      	bne.n	8002570 <HAL_RCC_OscConfig+0xa4>
 8002552:	4baa      	ldr	r3, [pc, #680]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4ba9      	ldr	r3, [pc, #676]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002558:	2180      	movs	r1, #128	@ 0x80
 800255a:	02c9      	lsls	r1, r1, #11
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	4ba6      	ldr	r3, [pc, #664]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4ba5      	ldr	r3, [pc, #660]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002566:	2180      	movs	r1, #128	@ 0x80
 8002568:	0249      	lsls	r1, r1, #9
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0xbc>
 8002570:	4ba2      	ldr	r3, [pc, #648]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4ba1      	ldr	r3, [pc, #644]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002576:	49a2      	ldr	r1, [pc, #648]	@ (8002800 <HAL_RCC_OscConfig+0x334>)
 8002578:	400a      	ands	r2, r1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	4b9f      	ldr	r3, [pc, #636]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b9e      	ldr	r3, [pc, #632]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002582:	49a0      	ldr	r1, [pc, #640]	@ (8002804 <HAL_RCC_OscConfig+0x338>)
 8002584:	400a      	ands	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d014      	beq.n	80025ba <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7ff f97e 	bl	8001890 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259a:	f7ff f979 	bl	8001890 <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	@ 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e2e9      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ac:	4b93      	ldr	r3, [pc, #588]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	4013      	ands	r3, r2
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0xce>
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7ff f969 	bl	8001890 <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7ff f964 	bl	8001890 <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e2d4      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d6:	4b89      	ldr	r3, [pc, #548]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	029b      	lsls	r3, r3, #10
 80025de:	4013      	ands	r3, r2
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0xf8>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2202      	movs	r2, #2
 80025ec:	4013      	ands	r3, r2
 80025ee:	d100      	bne.n	80025f2 <HAL_RCC_OscConfig+0x126>
 80025f0:	e099      	b.n	8002726 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f2:	4b82      	ldr	r3, [pc, #520]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2238      	movs	r2, #56	@ 0x38
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025fc:	4b7f      	ldr	r3, [pc, #508]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2203      	movs	r2, #3
 8002602:	4013      	ands	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b10      	cmp	r3, #16
 800260a:	d102      	bne.n	8002612 <HAL_RCC_OscConfig+0x146>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d002      	beq.n	8002618 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d135      	bne.n	8002684 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002618:	4b78      	ldr	r3, [pc, #480]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	@ 0x80
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4013      	ands	r3, r2
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x164>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e2a7      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b72      	ldr	r3, [pc, #456]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a74      	ldr	r2, [pc, #464]	@ (8002808 <HAL_RCC_OscConfig+0x33c>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	021a      	lsls	r2, r3, #8
 8002640:	4b6e      	ldr	r3, [pc, #440]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d112      	bne.n	8002672 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800264c:	4b6b      	ldr	r3, [pc, #428]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a6e      	ldr	r2, [pc, #440]	@ (800280c <HAL_RCC_OscConfig+0x340>)
 8002652:	4013      	ands	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	4b68      	ldr	r3, [pc, #416]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002660:	4b66      	ldr	r3, [pc, #408]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0adb      	lsrs	r3, r3, #11
 8002666:	2207      	movs	r2, #7
 8002668:	4013      	ands	r3, r2
 800266a:	4a69      	ldr	r2, [pc, #420]	@ (8002810 <HAL_RCC_OscConfig+0x344>)
 800266c:	40da      	lsrs	r2, r3
 800266e:	4b69      	ldr	r3, [pc, #420]	@ (8002814 <HAL_RCC_OscConfig+0x348>)
 8002670:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002672:	4b69      	ldr	r3, [pc, #420]	@ (8002818 <HAL_RCC_OscConfig+0x34c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	0018      	movs	r0, r3
 8002678:	f7ff f8ae 	bl	80017d8 <HAL_InitTick>
 800267c:	1e03      	subs	r3, r0, #0
 800267e:	d051      	beq.n	8002724 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e27d      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d030      	beq.n	80026ee <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800268c:	4b5b      	ldr	r3, [pc, #364]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5e      	ldr	r2, [pc, #376]	@ (800280c <HAL_RCC_OscConfig+0x340>)
 8002692:	4013      	ands	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	4b58      	ldr	r3, [pc, #352]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80026a0:	4b56      	ldr	r3, [pc, #344]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b55      	ldr	r3, [pc, #340]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80026a6:	2180      	movs	r1, #128	@ 0x80
 80026a8:	0049      	lsls	r1, r1, #1
 80026aa:	430a      	orrs	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7ff f8ef 	bl	8001890 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b8:	f7ff f8ea 	bl	8001890 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e25a      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ca:	4b4c      	ldr	r3, [pc, #304]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4013      	ands	r3, r2
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b49      	ldr	r3, [pc, #292]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a4b      	ldr	r2, [pc, #300]	@ (8002808 <HAL_RCC_OscConfig+0x33c>)
 80026dc:	4013      	ands	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	021a      	lsls	r2, r3, #8
 80026e6:	4b45      	ldr	r3, [pc, #276]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	e01b      	b.n	8002726 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b43      	ldr	r3, [pc, #268]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b42      	ldr	r3, [pc, #264]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80026f4:	4949      	ldr	r1, [pc, #292]	@ (800281c <HAL_RCC_OscConfig+0x350>)
 80026f6:	400a      	ands	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7ff f8c9 	bl	8001890 <HAL_GetTick>
 80026fe:	0003      	movs	r3, r0
 8002700:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002704:	f7ff f8c4 	bl	8001890 <HAL_GetTick>
 8002708:	0002      	movs	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e234      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002716:	4b39      	ldr	r3, [pc, #228]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	2380      	movs	r3, #128	@ 0x80
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4013      	ands	r3, r2
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x238>
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2208      	movs	r2, #8
 800272c:	4013      	ands	r3, r2
 800272e:	d047      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002730:	4b32      	ldr	r3, [pc, #200]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2238      	movs	r2, #56	@ 0x38
 8002736:	4013      	ands	r3, r2
 8002738:	2b18      	cmp	r3, #24
 800273a:	d10a      	bne.n	8002752 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800273c:	4b2f      	ldr	r3, [pc, #188]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 800273e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d03c      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2f4>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d138      	bne.n	80027c0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e216      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d019      	beq.n	800278e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800275a:	4b28      	ldr	r3, [pc, #160]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 800275c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800275e:	4b27      	ldr	r3, [pc, #156]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002760:	2101      	movs	r1, #1
 8002762:	430a      	orrs	r2, r1
 8002764:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7ff f893 	bl	8001890 <HAL_GetTick>
 800276a:	0003      	movs	r3, r0
 800276c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7ff f88e 	bl	8001890 <HAL_GetTick>
 8002774:	0002      	movs	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1fe      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002782:	4b1e      	ldr	r3, [pc, #120]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002786:	2202      	movs	r2, #2
 8002788:	4013      	ands	r3, r2
 800278a:	d0f1      	beq.n	8002770 <HAL_RCC_OscConfig+0x2a4>
 800278c:	e018      	b.n	80027c0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800278e:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002790:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002792:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 8002794:	2101      	movs	r1, #1
 8002796:	438a      	bics	r2, r1
 8002798:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7ff f879 	bl	8001890 <HAL_GetTick>
 800279e:	0003      	movs	r3, r0
 80027a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7ff f874 	bl	8001890 <HAL_GetTick>
 80027a8:	0002      	movs	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e1e4      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d1f1      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2204      	movs	r2, #4
 80027c6:	4013      	ands	r3, r2
 80027c8:	d100      	bne.n	80027cc <HAL_RCC_OscConfig+0x300>
 80027ca:	e0c7      	b.n	800295c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027cc:	231f      	movs	r3, #31
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027d4:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2238      	movs	r2, #56	@ 0x38
 80027da:	4013      	ands	r3, r2
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d11f      	bne.n	8002820 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_RCC_OscConfig+0x330>)
 80027e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e4:	2202      	movs	r2, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d100      	bne.n	80027ec <HAL_RCC_OscConfig+0x320>
 80027ea:	e0b7      	b.n	800295c <HAL_RCC_OscConfig+0x490>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d000      	beq.n	80027f6 <HAL_RCC_OscConfig+0x32a>
 80027f4:	e0b2      	b.n	800295c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1c2      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	40021000 	.word	0x40021000
 8002800:	fffeffff 	.word	0xfffeffff
 8002804:	fffbffff 	.word	0xfffbffff
 8002808:	ffff80ff 	.word	0xffff80ff
 800280c:	ffffc7ff 	.word	0xffffc7ff
 8002810:	00f42400 	.word	0x00f42400
 8002814:	20000000 	.word	0x20000000
 8002818:	20000004 	.word	0x20000004
 800281c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002820:	4bb5      	ldr	r3, [pc, #724]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	055b      	lsls	r3, r3, #21
 8002828:	4013      	ands	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_RCC_OscConfig+0x364>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x366>
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d011      	beq.n	800285a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	4bb0      	ldr	r3, [pc, #704]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002838:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800283a:	4baf      	ldr	r3, [pc, #700]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 800283c:	2180      	movs	r1, #128	@ 0x80
 800283e:	0549      	lsls	r1, r1, #21
 8002840:	430a      	orrs	r2, r1
 8002842:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002844:	4bac      	ldr	r3, [pc, #688]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002846:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002848:	2380      	movs	r3, #128	@ 0x80
 800284a:	055b      	lsls	r3, r3, #21
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002852:	231f      	movs	r3, #31
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285a:	4ba8      	ldr	r3, [pc, #672]	@ (8002afc <HAL_RCC_OscConfig+0x630>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2380      	movs	r3, #128	@ 0x80
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4013      	ands	r3, r2
 8002864:	d11a      	bne.n	800289c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002866:	4ba5      	ldr	r3, [pc, #660]	@ (8002afc <HAL_RCC_OscConfig+0x630>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4ba4      	ldr	r3, [pc, #656]	@ (8002afc <HAL_RCC_OscConfig+0x630>)
 800286c:	2180      	movs	r1, #128	@ 0x80
 800286e:	0049      	lsls	r1, r1, #1
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002874:	f7ff f80c 	bl	8001890 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7ff f807 	bl	8001890 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e177      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002890:	4b9a      	ldr	r3, [pc, #616]	@ (8002afc <HAL_RCC_OscConfig+0x630>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	@ 0x80
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4013      	ands	r3, r2
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3e6>
 80028a4:	4b94      	ldr	r3, [pc, #592]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028a8:	4b93      	ldr	r3, [pc, #588]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028aa:	2101      	movs	r1, #1
 80028ac:	430a      	orrs	r2, r1
 80028ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028b0:	e01c      	b.n	80028ec <HAL_RCC_OscConfig+0x420>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x408>
 80028ba:	4b8f      	ldr	r3, [pc, #572]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028be:	4b8e      	ldr	r3, [pc, #568]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028c0:	2104      	movs	r1, #4
 80028c2:	430a      	orrs	r2, r1
 80028c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028c6:	4b8c      	ldr	r3, [pc, #560]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028ca:	4b8b      	ldr	r3, [pc, #556]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0x420>
 80028d4:	4b88      	ldr	r3, [pc, #544]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028d8:	4b87      	ldr	r3, [pc, #540]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028da:	2101      	movs	r1, #1
 80028dc:	438a      	bics	r2, r1
 80028de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028e0:	4b85      	ldr	r3, [pc, #532]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028e4:	4b84      	ldr	r3, [pc, #528]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028e6:	2104      	movs	r1, #4
 80028e8:	438a      	bics	r2, r1
 80028ea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d014      	beq.n	800291e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe ffcc 	bl	8001890 <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fc:	e009      	b.n	8002912 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe ffc7 	bl	8001890 <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	4a7d      	ldr	r2, [pc, #500]	@ (8002b00 <HAL_RCC_OscConfig+0x634>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e136      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002912:	4b79      	ldr	r3, [pc, #484]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002916:	2202      	movs	r2, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x432>
 800291c:	e013      	b.n	8002946 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe ffb7 	bl	8001890 <HAL_GetTick>
 8002922:	0003      	movs	r3, r0
 8002924:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002926:	e009      	b.n	800293c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f7fe ffb2 	bl	8001890 <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	4a73      	ldr	r2, [pc, #460]	@ (8002b00 <HAL_RCC_OscConfig+0x634>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e121      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800293c:	4b6e      	ldr	r3, [pc, #440]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 800293e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002940:	2202      	movs	r2, #2
 8002942:	4013      	ands	r3, r2
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002946:	231f      	movs	r3, #31
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4b69      	ldr	r3, [pc, #420]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002954:	4b68      	ldr	r3, [pc, #416]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002956:	496b      	ldr	r1, [pc, #428]	@ (8002b04 <HAL_RCC_OscConfig+0x638>)
 8002958:	400a      	ands	r2, r1
 800295a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2220      	movs	r2, #32
 8002962:	4013      	ands	r3, r2
 8002964:	d039      	beq.n	80029da <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01b      	beq.n	80029a6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800296e:	4b62      	ldr	r3, [pc, #392]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b61      	ldr	r3, [pc, #388]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002974:	2180      	movs	r1, #128	@ 0x80
 8002976:	03c9      	lsls	r1, r1, #15
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe ff88 	bl	8001890 <HAL_GetTick>
 8002980:	0003      	movs	r3, r0
 8002982:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002986:	f7fe ff83 	bl	8001890 <HAL_GetTick>
 800298a:	0002      	movs	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0f3      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002998:	4b57      	ldr	r3, [pc, #348]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	4013      	ands	r3, r2
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x4ba>
 80029a4:	e019      	b.n	80029da <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029a6:	4b54      	ldr	r3, [pc, #336]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b53      	ldr	r3, [pc, #332]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80029ac:	4956      	ldr	r1, [pc, #344]	@ (8002b08 <HAL_RCC_OscConfig+0x63c>)
 80029ae:	400a      	ands	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe ff6d 	bl	8001890 <HAL_GetTick>
 80029b6:	0003      	movs	r3, r0
 80029b8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029bc:	f7fe ff68 	bl	8001890 <HAL_GetTick>
 80029c0:	0002      	movs	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0d8      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029ce:	4b4a      	ldr	r3, [pc, #296]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	2380      	movs	r3, #128	@ 0x80
 80029d4:	041b      	lsls	r3, r3, #16
 80029d6:	4013      	ands	r3, r2
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d100      	bne.n	80029e4 <HAL_RCC_OscConfig+0x518>
 80029e2:	e0cc      	b.n	8002b7e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e4:	4b44      	ldr	r3, [pc, #272]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2238      	movs	r2, #56	@ 0x38
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d100      	bne.n	80029f2 <HAL_RCC_OscConfig+0x526>
 80029f0:	e07b      	b.n	8002aea <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d156      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b3f      	ldr	r3, [pc, #252]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4b3e      	ldr	r3, [pc, #248]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a00:	4942      	ldr	r1, [pc, #264]	@ (8002b0c <HAL_RCC_OscConfig+0x640>)
 8002a02:	400a      	ands	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7fe ff43 	bl	8001890 <HAL_GetTick>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe ff3e 	bl	8001890 <HAL_GetTick>
 8002a14:	0002      	movs	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e0ae      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a22:	4b35      	ldr	r3, [pc, #212]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	2380      	movs	r3, #128	@ 0x80
 8002a28:	049b      	lsls	r3, r3, #18
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a2e:	4b32      	ldr	r3, [pc, #200]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4a37      	ldr	r2, [pc, #220]	@ (8002b10 <HAL_RCC_OscConfig+0x644>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	4b26      	ldr	r3, [pc, #152]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a62:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b24      	ldr	r3, [pc, #144]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a68:	2180      	movs	r1, #128	@ 0x80
 8002a6a:	0449      	lsls	r1, r1, #17
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a76:	2180      	movs	r1, #128	@ 0x80
 8002a78:	0549      	lsls	r1, r1, #21
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe ff07 	bl	8001890 <HAL_GetTick>
 8002a82:	0003      	movs	r3, r0
 8002a84:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a88:	f7fe ff02 	bl	8001890 <HAL_GetTick>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e072      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9a:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	2380      	movs	r3, #128	@ 0x80
 8002aa0:	049b      	lsls	r3, r3, #18
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x5bc>
 8002aa6:	e06a      	b.n	8002b7e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa8:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002aae:	4917      	ldr	r1, [pc, #92]	@ (8002b0c <HAL_RCC_OscConfig+0x640>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe feec 	bl	8001890 <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fe fee7 	bl	8001890 <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e057      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	049b      	lsls	r3, r3, #18
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d1f0      	bne.n	8002abe <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002adc:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002ae2:	490c      	ldr	r1, [pc, #48]	@ (8002b14 <HAL_RCC_OscConfig+0x648>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	60da      	str	r2, [r3, #12]
 8002ae8:	e049      	b.n	8002b7e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d112      	bne.n	8002b18 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e044      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
 8002b00:	00001388 	.word	0x00001388
 8002b04:	efffffff 	.word	0xefffffff
 8002b08:	ffbfffff 	.word	0xffbfffff
 8002b0c:	feffffff 	.word	0xfeffffff
 8002b10:	11c1808c 	.word	0x11c1808c
 8002b14:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <HAL_RCC_OscConfig+0x6bc>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2203      	movs	r2, #3
 8002b22:	401a      	ands	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d126      	bne.n	8002b7a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2270      	movs	r2, #112	@ 0x70
 8002b30:	401a      	ands	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d11f      	bne.n	8002b7a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	23fe      	movs	r3, #254	@ 0xfe
 8002b3e:	01db      	lsls	r3, r3, #7
 8002b40:	401a      	ands	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d116      	bne.n	8002b7a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	23f8      	movs	r3, #248	@ 0xf8
 8002b50:	039b      	lsls	r3, r3, #14
 8002b52:	401a      	ands	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d10e      	bne.n	8002b7a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	23e0      	movs	r3, #224	@ 0xe0
 8002b60:	051b      	lsls	r3, r3, #20
 8002b62:	401a      	ands	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	0f5b      	lsrs	r3, r3, #29
 8002b70:	075a      	lsls	r2, r3, #29
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b008      	add	sp, #32
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000

08002b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0e9      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b76      	ldr	r3, [pc, #472]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d91e      	bls.n	8002bec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b73      	ldr	r3, [pc, #460]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2207      	movs	r2, #7
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	4b70      	ldr	r3, [pc, #448]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe fe66 	bl	8001890 <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bc8:	e009      	b.n	8002bde <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bca:	f7fe fe61 	bl	8001890 <HAL_GetTick>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	4a6a      	ldr	r2, [pc, #424]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0ca      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bde:	4b67      	ldr	r3, [pc, #412]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2207      	movs	r2, #7
 8002be4:	4013      	ands	r3, r2
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1ee      	bne.n	8002bca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d015      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d006      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c00:	4b60      	ldr	r3, [pc, #384]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	4b5f      	ldr	r3, [pc, #380]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c06:	21e0      	movs	r1, #224	@ 0xe0
 8002c08:	01c9      	lsls	r1, r1, #7
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4a5d      	ldr	r2, [pc, #372]	@ (8002d88 <HAL_RCC_ClockConfig+0x1fc>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	4b59      	ldr	r3, [pc, #356]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2201      	movs	r2, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d057      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c34:	4b53      	ldr	r3, [pc, #332]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	029b      	lsls	r3, r3, #10
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d12b      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e097      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	049b      	lsls	r3, r3, #18
 8002c54:	4013      	ands	r3, r2
 8002c56:	d11f      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e08b      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c64:	4b47      	ldr	r3, [pc, #284]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d113      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e07f      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7c:	4b41      	ldr	r3, [pc, #260]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e074      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e06d      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c98:	4b3a      	ldr	r3, [pc, #232]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	4393      	bics	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	4b37      	ldr	r3, [pc, #220]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cac:	f7fe fdf0 	bl	8001890 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb4:	e009      	b.n	8002cca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb6:	f7fe fdeb 	bl	8001890 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e054      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b2e      	ldr	r3, [pc, #184]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2238      	movs	r2, #56	@ 0x38
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1ec      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b27      	ldr	r3, [pc, #156]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d21e      	bcs.n	8002d28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2207      	movs	r2, #7
 8002cf0:	4393      	bics	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	4b21      	ldr	r3, [pc, #132]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fdc8 	bl	8001890 <HAL_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d04:	e009      	b.n	8002d1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d06:	f7fe fdc3 	bl	8001890 <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	4a1b      	ldr	r2, [pc, #108]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e02c      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d1a:	4b18      	ldr	r3, [pc, #96]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2207      	movs	r2, #7
 8002d20:	4013      	ands	r3, r2
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d1ee      	bne.n	8002d06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d32:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4a15      	ldr	r2, [pc, #84]	@ (8002d8c <HAL_RCC_ClockConfig+0x200>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d46:	f000 f829 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002d4a:	0001      	movs	r1, r0
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	220f      	movs	r2, #15
 8002d54:	401a      	ands	r2, r3
 8002d56:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <HAL_RCC_ClockConfig+0x204>)
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	58d3      	ldr	r3, [r2, r3]
 8002d5c:	221f      	movs	r2, #31
 8002d5e:	4013      	ands	r3, r2
 8002d60:	000a      	movs	r2, r1
 8002d62:	40da      	lsrs	r2, r3
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <HAL_RCC_ClockConfig+0x208>)
 8002d66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <HAL_RCC_ClockConfig+0x20c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7fe fd33 	bl	80017d8 <HAL_InitTick>
 8002d72:	0003      	movs	r3, r0
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b004      	add	sp, #16
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	00001388 	.word	0x00001388
 8002d84:	40021000 	.word	0x40021000
 8002d88:	fffff0ff 	.word	0xfffff0ff
 8002d8c:	ffff8fff 	.word	0xffff8fff
 8002d90:	08004fb0 	.word	0x08004fb0
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000004 	.word	0x20000004

08002d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002da2:	4b3c      	ldr	r3, [pc, #240]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2238      	movs	r2, #56	@ 0x38
 8002da8:	4013      	ands	r3, r2
 8002daa:	d10f      	bne.n	8002dcc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002dac:	4b39      	ldr	r3, [pc, #228]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0adb      	lsrs	r3, r3, #11
 8002db2:	2207      	movs	r2, #7
 8002db4:	4013      	ands	r3, r2
 8002db6:	2201      	movs	r2, #1
 8002db8:	409a      	lsls	r2, r3
 8002dba:	0013      	movs	r3, r2
 8002dbc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002dbe:	6839      	ldr	r1, [r7, #0]
 8002dc0:	4835      	ldr	r0, [pc, #212]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002dc2:	f7fd f99f 	bl	8000104 <__udivsi3>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	e05d      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dcc:	4b31      	ldr	r3, [pc, #196]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2238      	movs	r2, #56	@ 0x38
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d102      	bne.n	8002dde <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dd8:	4b30      	ldr	r3, [pc, #192]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x100>)
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	e054      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dde:	4b2d      	ldr	r3, [pc, #180]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2238      	movs	r2, #56	@ 0x38
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d138      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002dea:	4b2a      	ldr	r3, [pc, #168]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2203      	movs	r2, #3
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002df4:	4b27      	ldr	r3, [pc, #156]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d10d      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	4824      	ldr	r0, [pc, #144]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x100>)
 8002e0c:	f7fd f97a 	bl	8000104 <__udivsi3>
 8002e10:	0003      	movs	r3, r0
 8002e12:	0019      	movs	r1, r3
 8002e14:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	227f      	movs	r2, #127	@ 0x7f
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	434b      	muls	r3, r1
 8002e20:	617b      	str	r3, [r7, #20]
        break;
 8002e22:	e00d      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	481c      	ldr	r0, [pc, #112]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e28:	f7fd f96c 	bl	8000104 <__udivsi3>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	0019      	movs	r1, r3
 8002e30:	4b18      	ldr	r3, [pc, #96]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	227f      	movs	r2, #127	@ 0x7f
 8002e38:	4013      	ands	r3, r2
 8002e3a:	434b      	muls	r3, r1
 8002e3c:	617b      	str	r3, [r7, #20]
        break;
 8002e3e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e40:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0f5b      	lsrs	r3, r3, #29
 8002e46:	2207      	movs	r2, #7
 8002e48:	4013      	ands	r3, r2
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	6978      	ldr	r0, [r7, #20]
 8002e52:	f7fd f957 	bl	8000104 <__udivsi3>
 8002e56:	0003      	movs	r3, r0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e015      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2238      	movs	r2, #56	@ 0x38
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d103      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002e68:	2380      	movs	r3, #128	@ 0x80
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e70:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2238      	movs	r2, #56	@ 0x38
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b18      	cmp	r3, #24
 8002e7a:	d103      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002e7c:	23fa      	movs	r3, #250	@ 0xfa
 8002e7e:	01db      	lsls	r3, r3, #7
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	e001      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e88:	693b      	ldr	r3, [r7, #16]
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b006      	add	sp, #24
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	40021000 	.word	0x40021000
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	007a1200 	.word	0x007a1200

08002ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea4:	4b02      	ldr	r3, [pc, #8]	@ (8002eb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	20000000 	.word	0x20000000

08002eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002eb8:	f7ff fff2 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ebc:	0004      	movs	r4, r0
 8002ebe:	f7ff faf9 	bl	80024b4 <LL_RCC_GetAPB1Prescaler>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	0b1a      	lsrs	r2, r3, #12
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ec8:	0092      	lsls	r2, r2, #2
 8002eca:	58d3      	ldr	r3, [r2, r3]
 8002ecc:	221f      	movs	r2, #31
 8002ece:	4013      	ands	r3, r2
 8002ed0:	40dc      	lsrs	r4, r3
 8002ed2:	0023      	movs	r3, r4
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	08004ff0 	.word	0x08004ff0

08002ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ee8:	2313      	movs	r3, #19
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ef0:	2312      	movs	r3, #18
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	029b      	lsls	r3, r3, #10
 8002f00:	4013      	ands	r3, r2
 8002f02:	d100      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f04:	e0ad      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2011      	movs	r0, #17
 8002f08:	183b      	adds	r3, r7, r0
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b47      	ldr	r3, [pc, #284]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f12:	2380      	movs	r3, #128	@ 0x80
 8002f14:	055b      	lsls	r3, r3, #21
 8002f16:	4013      	ands	r3, r2
 8002f18:	d110      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	4b44      	ldr	r3, [pc, #272]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f1e:	4b43      	ldr	r3, [pc, #268]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f20:	2180      	movs	r1, #128	@ 0x80
 8002f22:	0549      	lsls	r1, r1, #21
 8002f24:	430a      	orrs	r2, r1
 8002f26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f28:	4b40      	ldr	r3, [pc, #256]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f2c:	2380      	movs	r3, #128	@ 0x80
 8002f2e:	055b      	lsls	r3, r3, #21
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	183b      	adds	r3, r7, r0
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b3b      	ldr	r3, [pc, #236]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f42:	2180      	movs	r1, #128	@ 0x80
 8002f44:	0049      	lsls	r1, r1, #1
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f4a:	f7fe fca1 	bl	8001890 <HAL_GetTick>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f52:	e00b      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7fe fc9c 	bl	8001890 <HAL_GetTick>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d904      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002f62:	2313      	movs	r3, #19
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2203      	movs	r2, #3
 8002f68:	701a      	strb	r2, [r3, #0]
        break;
 8002f6a:	e005      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f6c:	4b30      	ldr	r3, [pc, #192]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	2380      	movs	r3, #128	@ 0x80
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4013      	ands	r3, r2
 8002f76:	d0ed      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002f78:	2313      	movs	r3, #19
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d15e      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f82:	4b2a      	ldr	r3, [pc, #168]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f86:	23c0      	movs	r3, #192	@ 0xc0
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d019      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d014      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f9e:	4b23      	ldr	r3, [pc, #140]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	4a24      	ldr	r2, [pc, #144]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fa8:	4b20      	ldr	r3, [pc, #128]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002faa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fac:	4b1f      	ldr	r3, [pc, #124]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fae:	2180      	movs	r1, #128	@ 0x80
 8002fb0:	0249      	lsls	r1, r1, #9
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fba:	4b1c      	ldr	r3, [pc, #112]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fbc:	491e      	ldr	r1, [pc, #120]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d016      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fc5e 	bl	8001890 <HAL_GetTick>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd8:	e00c      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fda:	f7fe fc59 	bl	8001890 <HAL_GetTick>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	4a15      	ldr	r2, [pc, #84]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d904      	bls.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002fea:	2313      	movs	r3, #19
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	2203      	movs	r2, #3
 8002ff0:	701a      	strb	r2, [r3, #0]
            break;
 8002ff2:	e004      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d0ed      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ffe:	2313      	movs	r3, #19
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003008:	4b08      	ldr	r3, [pc, #32]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800300a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300c:	4a09      	ldr	r2, [pc, #36]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800300e:	4013      	ands	r3, r2
 8003010:	0019      	movs	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003016:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003018:	430a      	orrs	r2, r1
 800301a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800301c:	e016      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800301e:	2312      	movs	r3, #18
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	2213      	movs	r2, #19
 8003024:	18ba      	adds	r2, r7, r2
 8003026:	7812      	ldrb	r2, [r2, #0]
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e00f      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800302c:	40021000 	.word	0x40021000
 8003030:	40007000 	.word	0x40007000
 8003034:	fffffcff 	.word	0xfffffcff
 8003038:	fffeffff 	.word	0xfffeffff
 800303c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	2312      	movs	r3, #18
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2213      	movs	r2, #19
 8003046:	18ba      	adds	r2, r7, r2
 8003048:	7812      	ldrb	r2, [r2, #0]
 800304a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800304c:	2311      	movs	r3, #17
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003056:	4bb6      	ldr	r3, [pc, #728]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800305a:	4bb5      	ldr	r3, [pc, #724]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800305c:	49b5      	ldr	r1, [pc, #724]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800305e:	400a      	ands	r2, r1
 8003060:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2201      	movs	r2, #1
 8003068:	4013      	ands	r3, r2
 800306a:	d009      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800306c:	4bb0      	ldr	r3, [pc, #704]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800306e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003070:	2203      	movs	r2, #3
 8003072:	4393      	bics	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	4bad      	ldr	r3, [pc, #692]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800307c:	430a      	orrs	r2, r1
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2202      	movs	r2, #2
 8003086:	4013      	ands	r3, r2
 8003088:	d009      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800308a:	4ba9      	ldr	r3, [pc, #676]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800308c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308e:	220c      	movs	r2, #12
 8003090:	4393      	bics	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	4ba5      	ldr	r3, [pc, #660]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800309a:	430a      	orrs	r2, r1
 800309c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2204      	movs	r2, #4
 80030a4:	4013      	ands	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a8:	4ba1      	ldr	r3, [pc, #644]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ac:	2230      	movs	r2, #48	@ 0x30
 80030ae:	4393      	bics	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	4b9e      	ldr	r3, [pc, #632]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030b8:	430a      	orrs	r2, r1
 80030ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2210      	movs	r2, #16
 80030c2:	4013      	ands	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030c6:	4b9a      	ldr	r3, [pc, #616]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ca:	4a9b      	ldr	r2, [pc, #620]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	4b96      	ldr	r3, [pc, #600]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030d6:	430a      	orrs	r2, r1
 80030d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	2380      	movs	r3, #128	@ 0x80
 80030e0:	015b      	lsls	r3, r3, #5
 80030e2:	4013      	ands	r3, r2
 80030e4:	d009      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80030e6:	4b92      	ldr	r3, [pc, #584]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ea:	4a94      	ldr	r2, [pc, #592]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	0019      	movs	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030f6:	430a      	orrs	r2, r1
 80030f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	2380      	movs	r3, #128	@ 0x80
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4013      	ands	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003106:	4b8a      	ldr	r3, [pc, #552]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310a:	4a8d      	ldr	r2, [pc, #564]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003114:	4b86      	ldr	r3, [pc, #536]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003116:	430a      	orrs	r2, r1
 8003118:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	@ 0x80
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4013      	ands	r3, r2
 8003124:	d009      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003126:	4b82      	ldr	r3, [pc, #520]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312a:	4a86      	ldr	r2, [pc, #536]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800312c:	4013      	ands	r3, r2
 800312e:	0019      	movs	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003134:	4b7e      	ldr	r3, [pc, #504]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003136:	430a      	orrs	r2, r1
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2220      	movs	r2, #32
 8003140:	4013      	ands	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003144:	4b7a      	ldr	r3, [pc, #488]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003148:	4a7f      	ldr	r2, [pc, #508]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	4b77      	ldr	r3, [pc, #476]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003154:	430a      	orrs	r2, r1
 8003156:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2240      	movs	r2, #64	@ 0x40
 800315e:	4013      	ands	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003162:	4b73      	ldr	r3, [pc, #460]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003166:	4a79      	ldr	r2, [pc, #484]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003168:	4013      	ands	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	4b6f      	ldr	r3, [pc, #444]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003172:	430a      	orrs	r2, r1
 8003174:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	2380      	movs	r3, #128	@ 0x80
 800317c:	01db      	lsls	r3, r3, #7
 800317e:	4013      	ands	r3, r2
 8003180:	d015      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003182:	4b6b      	ldr	r3, [pc, #428]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	0899      	lsrs	r1, r3, #2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800318e:	4b68      	ldr	r3, [pc, #416]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003190:	430a      	orrs	r2, r1
 8003192:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003198:	2380      	movs	r3, #128	@ 0x80
 800319a:	05db      	lsls	r3, r3, #23
 800319c:	429a      	cmp	r2, r3
 800319e:	d106      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031a0:	4b63      	ldr	r3, [pc, #396]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	4b62      	ldr	r3, [pc, #392]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a6:	2180      	movs	r1, #128	@ 0x80
 80031a8:	0249      	lsls	r1, r1, #9
 80031aa:	430a      	orrs	r2, r1
 80031ac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	2380      	movs	r3, #128	@ 0x80
 80031b4:	031b      	lsls	r3, r3, #12
 80031b6:	4013      	ands	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031be:	2240      	movs	r2, #64	@ 0x40
 80031c0:	4393      	bics	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031c8:	4b59      	ldr	r3, [pc, #356]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ca:	430a      	orrs	r2, r1
 80031cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	2380      	movs	r3, #128	@ 0x80
 80031d4:	039b      	lsls	r3, r3, #14
 80031d6:	4013      	ands	r3, r2
 80031d8:	d016      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031da:	4b55      	ldr	r3, [pc, #340]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031de:	4a5c      	ldr	r2, [pc, #368]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031e8:	4b51      	ldr	r3, [pc, #324]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ea:	430a      	orrs	r2, r1
 80031ec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031f2:	2380      	movs	r3, #128	@ 0x80
 80031f4:	03db      	lsls	r3, r3, #15
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d106      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003200:	2180      	movs	r1, #128	@ 0x80
 8003202:	0449      	lsls	r1, r1, #17
 8003204:	430a      	orrs	r2, r1
 8003206:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	03db      	lsls	r3, r3, #15
 8003210:	4013      	ands	r3, r2
 8003212:	d016      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003214:	4b46      	ldr	r3, [pc, #280]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003218:	4a4e      	ldr	r2, [pc, #312]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800321a:	4013      	ands	r3, r2
 800321c:	0019      	movs	r1, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003222:	4b43      	ldr	r3, [pc, #268]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003224:	430a      	orrs	r2, r1
 8003226:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800322c:	2380      	movs	r3, #128	@ 0x80
 800322e:	045b      	lsls	r3, r3, #17
 8003230:	429a      	cmp	r2, r3
 8003232:	d106      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003234:	4b3e      	ldr	r3, [pc, #248]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	4b3d      	ldr	r3, [pc, #244]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800323a:	2180      	movs	r1, #128	@ 0x80
 800323c:	0449      	lsls	r1, r1, #17
 800323e:	430a      	orrs	r2, r1
 8003240:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	2380      	movs	r3, #128	@ 0x80
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	4013      	ands	r3, r2
 800324c:	d014      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800324e:	4b38      	ldr	r3, [pc, #224]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	2203      	movs	r2, #3
 8003254:	4393      	bics	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	4b34      	ldr	r3, [pc, #208]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800325e:	430a      	orrs	r2, r1
 8003260:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d106      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800326a:	4b31      	ldr	r3, [pc, #196]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	4b30      	ldr	r3, [pc, #192]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003270:	2180      	movs	r1, #128	@ 0x80
 8003272:	0249      	lsls	r1, r1, #9
 8003274:	430a      	orrs	r2, r1
 8003276:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	019b      	lsls	r3, r3, #6
 8003280:	4013      	ands	r3, r2
 8003282:	d014      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003284:	4b2a      	ldr	r3, [pc, #168]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	220c      	movs	r2, #12
 800328a:	4393      	bics	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003292:	4b27      	ldr	r3, [pc, #156]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003294:	430a      	orrs	r2, r1
 8003296:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	2b04      	cmp	r3, #4
 800329e:	d106      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032a0:	4b23      	ldr	r3, [pc, #140]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	4b22      	ldr	r3, [pc, #136]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032a6:	2180      	movs	r1, #128	@ 0x80
 80032a8:	0249      	lsls	r1, r1, #9
 80032aa:	430a      	orrs	r2, r1
 80032ac:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	@ 0x80
 80032b4:	045b      	lsls	r3, r3, #17
 80032b6:	4013      	ands	r3, r2
 80032b8:	d016      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032be:	4a22      	ldr	r2, [pc, #136]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032c8:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032ca:	430a      	orrs	r2, r1
 80032cc:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	019b      	lsls	r3, r3, #6
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d106      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032da:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	4b14      	ldr	r3, [pc, #80]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032e0:	2180      	movs	r1, #128	@ 0x80
 80032e2:	0449      	lsls	r1, r1, #17
 80032e4:	430a      	orrs	r2, r1
 80032e6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	@ 0x80
 80032ee:	049b      	lsls	r3, r3, #18
 80032f0:	4013      	ands	r3, r2
 80032f2:	d016      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	4a10      	ldr	r2, [pc, #64]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003302:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003304:	430a      	orrs	r2, r1
 8003306:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800330c:	2380      	movs	r3, #128	@ 0x80
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	429a      	cmp	r2, r3
 8003312:	d106      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003314:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800331a:	2180      	movs	r1, #128	@ 0x80
 800331c:	0449      	lsls	r1, r1, #17
 800331e:	430a      	orrs	r2, r1
 8003320:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003322:	2312      	movs	r3, #18
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	781b      	ldrb	r3, [r3, #0]
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b006      	add	sp, #24
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000
 8003334:	efffffff 	.word	0xefffffff
 8003338:	fffff3ff 	.word	0xfffff3ff
 800333c:	fffffcff 	.word	0xfffffcff
 8003340:	fff3ffff 	.word	0xfff3ffff
 8003344:	ffcfffff 	.word	0xffcfffff
 8003348:	ffffcfff 	.word	0xffffcfff
 800334c:	ffff3fff 	.word	0xffff3fff
 8003350:	ffbfffff 	.word	0xffbfffff
 8003354:	feffffff 	.word	0xfeffffff

08003358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e046      	b.n	80033f8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2288      	movs	r2, #136	@ 0x88
 800336e:	589b      	ldr	r3, [r3, r2]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d107      	bne.n	8003384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2284      	movs	r2, #132	@ 0x84
 8003378:	2100      	movs	r1, #0
 800337a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	0018      	movs	r0, r3
 8003380:	f7fd fd7a 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2288      	movs	r2, #136	@ 0x88
 8003388:	2124      	movs	r1, #36	@ 0x24
 800338a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2101      	movs	r1, #1
 8003398:	438a      	bics	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 ff52 	bl	8004250 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 fbf8 	bl	8003ba4 <UART_SetConfig>
 80033b4:	0003      	movs	r3, r0
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e01c      	b.n	80033f8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	490d      	ldr	r1, [pc, #52]	@ (8003400 <HAL_UART_Init+0xa8>)
 80033ca:	400a      	ands	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	212a      	movs	r1, #42	@ 0x2a
 80033da:	438a      	bics	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 ffe1 	bl	80043b8 <UART_CheckIdleState>
 80033f6:	0003      	movs	r3, r0
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	ffffb7ff 	.word	0xffffb7ff

08003404 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	1dbb      	adds	r3, r7, #6
 8003410:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2288      	movs	r2, #136	@ 0x88
 8003416:	589b      	ldr	r3, [r3, r2]
 8003418:	2b20      	cmp	r3, #32
 800341a:	d000      	beq.n	800341e <HAL_UART_Transmit_DMA+0x1a>
 800341c:	e079      	b.n	8003512 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_UART_Transmit_DMA+0x28>
 8003424:	1dbb      	adds	r3, r7, #6
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e071      	b.n	8003514 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	015b      	lsls	r3, r3, #5
 8003438:	429a      	cmp	r2, r3
 800343a:	d109      	bne.n	8003450 <HAL_UART_Transmit_DMA+0x4c>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2201      	movs	r2, #1
 8003448:	4013      	ands	r3, r2
 800344a:	d001      	beq.n	8003450 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e061      	b.n	8003514 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1dba      	adds	r2, r7, #6
 800345a:	2154      	movs	r1, #84	@ 0x54
 800345c:	8812      	ldrh	r2, [r2, #0]
 800345e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1dba      	adds	r2, r7, #6
 8003464:	2156      	movs	r1, #86	@ 0x56
 8003466:	8812      	ldrh	r2, [r2, #0]
 8003468:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2290      	movs	r2, #144	@ 0x90
 800346e:	2100      	movs	r1, #0
 8003470:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2288      	movs	r2, #136	@ 0x88
 8003476:	2121      	movs	r1, #33	@ 0x21
 8003478:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d028      	beq.n	80034d4 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003486:	4a25      	ldr	r2, [pc, #148]	@ (800351c <HAL_UART_Transmit_DMA+0x118>)
 8003488:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800348e:	4a24      	ldr	r2, [pc, #144]	@ (8003520 <HAL_UART_Transmit_DMA+0x11c>)
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003496:	4a23      	ldr	r2, [pc, #140]	@ (8003524 <HAL_UART_Transmit_DMA+0x120>)
 8003498:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800349e:	2200      	movs	r2, #0
 80034a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034aa:	0019      	movs	r1, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3328      	adds	r3, #40	@ 0x28
 80034b2:	001a      	movs	r2, r3
 80034b4:	1dbb      	adds	r3, r7, #6
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	f7fe fb94 	bl	8001be4 <HAL_DMA_Start_IT>
 80034bc:	1e03      	subs	r3, r0, #0
 80034be:	d009      	beq.n	80034d4 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2290      	movs	r2, #144	@ 0x90
 80034c4:	2110      	movs	r1, #16
 80034c6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2288      	movs	r2, #136	@ 0x88
 80034cc:	2120      	movs	r1, #32
 80034ce:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e01f      	b.n	8003514 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2240      	movs	r2, #64	@ 0x40
 80034da:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034dc:	f3ef 8310 	mrs	r3, PRIMASK
 80034e0:	613b      	str	r3, [r7, #16]
  return(result);
 80034e2:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	2301      	movs	r3, #1
 80034e8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f383 8810 	msr	PRIMASK, r3
}
 80034f0:	46c0      	nop			@ (mov r8, r8)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2180      	movs	r1, #128	@ 0x80
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
  }
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b008      	add	sp, #32
 800351a:	bd80      	pop	{r7, pc}
 800351c:	08004885 	.word	0x08004885
 8003520:	0800491d 	.word	0x0800491d
 8003524:	08004aaf 	.word	0x08004aaf

08003528 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003528:	b5b0      	push	{r4, r5, r7, lr}
 800352a:	b0aa      	sub	sp, #168	@ 0xa8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	22a4      	movs	r2, #164	@ 0xa4
 8003538:	18b9      	adds	r1, r7, r2
 800353a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	20a0      	movs	r0, #160	@ 0xa0
 8003544:	1839      	adds	r1, r7, r0
 8003546:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	249c      	movs	r4, #156	@ 0x9c
 8003550:	1939      	adds	r1, r7, r4
 8003552:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003554:	0011      	movs	r1, r2
 8003556:	18bb      	adds	r3, r7, r2
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4aa2      	ldr	r2, [pc, #648]	@ (80037e4 <HAL_UART_IRQHandler+0x2bc>)
 800355c:	4013      	ands	r3, r2
 800355e:	2298      	movs	r2, #152	@ 0x98
 8003560:	18bd      	adds	r5, r7, r2
 8003562:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003564:	18bb      	adds	r3, r7, r2
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11a      	bne.n	80035a2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800356c:	187b      	adds	r3, r7, r1
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2220      	movs	r2, #32
 8003572:	4013      	ands	r3, r2
 8003574:	d015      	beq.n	80035a2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003576:	183b      	adds	r3, r7, r0
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2220      	movs	r2, #32
 800357c:	4013      	ands	r3, r2
 800357e:	d105      	bne.n	800358c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003580:	193b      	adds	r3, r7, r4
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2380      	movs	r3, #128	@ 0x80
 8003586:	055b      	lsls	r3, r3, #21
 8003588:	4013      	ands	r3, r2
 800358a:	d00a      	beq.n	80035a2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003590:	2b00      	cmp	r3, #0
 8003592:	d100      	bne.n	8003596 <HAL_UART_IRQHandler+0x6e>
 8003594:	e2dc      	b.n	8003b50 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	0010      	movs	r0, r2
 800359e:	4798      	blx	r3
      }
      return;
 80035a0:	e2d6      	b.n	8003b50 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035a2:	2398      	movs	r3, #152	@ 0x98
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d100      	bne.n	80035ae <HAL_UART_IRQHandler+0x86>
 80035ac:	e122      	b.n	80037f4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80035ae:	239c      	movs	r3, #156	@ 0x9c
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a8c      	ldr	r2, [pc, #560]	@ (80037e8 <HAL_UART_IRQHandler+0x2c0>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	d106      	bne.n	80035c8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80035ba:	23a0      	movs	r3, #160	@ 0xa0
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a8a      	ldr	r2, [pc, #552]	@ (80037ec <HAL_UART_IRQHandler+0x2c4>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	d100      	bne.n	80035c8 <HAL_UART_IRQHandler+0xa0>
 80035c6:	e115      	b.n	80037f4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035c8:	23a4      	movs	r3, #164	@ 0xa4
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2201      	movs	r2, #1
 80035d0:	4013      	ands	r3, r2
 80035d2:	d012      	beq.n	80035fa <HAL_UART_IRQHandler+0xd2>
 80035d4:	23a0      	movs	r3, #160	@ 0xa0
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	2380      	movs	r3, #128	@ 0x80
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	d00b      	beq.n	80035fa <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2201      	movs	r2, #1
 80035e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2290      	movs	r2, #144	@ 0x90
 80035ee:	589b      	ldr	r3, [r3, r2]
 80035f0:	2201      	movs	r2, #1
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2190      	movs	r1, #144	@ 0x90
 80035f8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035fa:	23a4      	movs	r3, #164	@ 0xa4
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2202      	movs	r2, #2
 8003602:	4013      	ands	r3, r2
 8003604:	d011      	beq.n	800362a <HAL_UART_IRQHandler+0x102>
 8003606:	239c      	movs	r3, #156	@ 0x9c
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	4013      	ands	r3, r2
 8003610:	d00b      	beq.n	800362a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2202      	movs	r2, #2
 8003618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2290      	movs	r2, #144	@ 0x90
 800361e:	589b      	ldr	r3, [r3, r2]
 8003620:	2204      	movs	r2, #4
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2190      	movs	r1, #144	@ 0x90
 8003628:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800362a:	23a4      	movs	r3, #164	@ 0xa4
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2204      	movs	r2, #4
 8003632:	4013      	ands	r3, r2
 8003634:	d011      	beq.n	800365a <HAL_UART_IRQHandler+0x132>
 8003636:	239c      	movs	r3, #156	@ 0x9c
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2201      	movs	r2, #1
 800363e:	4013      	ands	r3, r2
 8003640:	d00b      	beq.n	800365a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2204      	movs	r2, #4
 8003648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2290      	movs	r2, #144	@ 0x90
 800364e:	589b      	ldr	r3, [r3, r2]
 8003650:	2202      	movs	r2, #2
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2190      	movs	r1, #144	@ 0x90
 8003658:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800365a:	23a4      	movs	r3, #164	@ 0xa4
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2208      	movs	r2, #8
 8003662:	4013      	ands	r3, r2
 8003664:	d017      	beq.n	8003696 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003666:	23a0      	movs	r3, #160	@ 0xa0
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2220      	movs	r2, #32
 800366e:	4013      	ands	r3, r2
 8003670:	d105      	bne.n	800367e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003672:	239c      	movs	r3, #156	@ 0x9c
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5b      	ldr	r2, [pc, #364]	@ (80037e8 <HAL_UART_IRQHandler+0x2c0>)
 800367a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800367c:	d00b      	beq.n	8003696 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2208      	movs	r2, #8
 8003684:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2290      	movs	r2, #144	@ 0x90
 800368a:	589b      	ldr	r3, [r3, r2]
 800368c:	2208      	movs	r2, #8
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2190      	movs	r1, #144	@ 0x90
 8003694:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003696:	23a4      	movs	r3, #164	@ 0xa4
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2380      	movs	r3, #128	@ 0x80
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	4013      	ands	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_UART_IRQHandler+0x1a4>
 80036a4:	23a0      	movs	r3, #160	@ 0xa0
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	04db      	lsls	r3, r3, #19
 80036ae:	4013      	ands	r3, r2
 80036b0:	d00c      	beq.n	80036cc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2280      	movs	r2, #128	@ 0x80
 80036b8:	0112      	lsls	r2, r2, #4
 80036ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2290      	movs	r2, #144	@ 0x90
 80036c0:	589b      	ldr	r3, [r3, r2]
 80036c2:	2220      	movs	r2, #32
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2190      	movs	r1, #144	@ 0x90
 80036ca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2290      	movs	r2, #144	@ 0x90
 80036d0:	589b      	ldr	r3, [r3, r2]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d100      	bne.n	80036d8 <HAL_UART_IRQHandler+0x1b0>
 80036d6:	e23d      	b.n	8003b54 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80036d8:	23a4      	movs	r3, #164	@ 0xa4
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2220      	movs	r2, #32
 80036e0:	4013      	ands	r3, r2
 80036e2:	d015      	beq.n	8003710 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80036e4:	23a0      	movs	r3, #160	@ 0xa0
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2220      	movs	r2, #32
 80036ec:	4013      	ands	r3, r2
 80036ee:	d106      	bne.n	80036fe <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80036f0:	239c      	movs	r3, #156	@ 0x9c
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	2380      	movs	r3, #128	@ 0x80
 80036f8:	055b      	lsls	r3, r3, #21
 80036fa:	4013      	ands	r3, r2
 80036fc:	d008      	beq.n	8003710 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	0010      	movs	r0, r2
 800370e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2290      	movs	r2, #144	@ 0x90
 8003714:	589b      	ldr	r3, [r3, r2]
 8003716:	2194      	movs	r1, #148	@ 0x94
 8003718:	187a      	adds	r2, r7, r1
 800371a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2240      	movs	r2, #64	@ 0x40
 8003724:	4013      	ands	r3, r2
 8003726:	2b40      	cmp	r3, #64	@ 0x40
 8003728:	d004      	beq.n	8003734 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800372a:	187b      	adds	r3, r7, r1
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2228      	movs	r2, #40	@ 0x28
 8003730:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003732:	d04c      	beq.n	80037ce <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0018      	movs	r0, r3
 8003738:	f001 f83e 	bl	80047b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2240      	movs	r2, #64	@ 0x40
 8003744:	4013      	ands	r3, r2
 8003746:	2b40      	cmp	r3, #64	@ 0x40
 8003748:	d13c      	bne.n	80037c4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800374a:	f3ef 8310 	mrs	r3, PRIMASK
 800374e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003752:	2090      	movs	r0, #144	@ 0x90
 8003754:	183a      	adds	r2, r7, r0
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	2301      	movs	r3, #1
 800375a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800375e:	f383 8810 	msr	PRIMASK, r3
}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2140      	movs	r1, #64	@ 0x40
 8003770:	438a      	bics	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	183b      	adds	r3, r7, r0
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800377c:	f383 8810 	msr	PRIMASK, r3
}
 8003780:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2280      	movs	r2, #128	@ 0x80
 8003786:	589b      	ldr	r3, [r3, r2]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d016      	beq.n	80037ba <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2280      	movs	r2, #128	@ 0x80
 8003790:	589b      	ldr	r3, [r3, r2]
 8003792:	4a17      	ldr	r2, [pc, #92]	@ (80037f0 <HAL_UART_IRQHandler+0x2c8>)
 8003794:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2280      	movs	r2, #128	@ 0x80
 800379a:	589b      	ldr	r3, [r3, r2]
 800379c:	0018      	movs	r0, r3
 800379e:	f7fe fb07 	bl	8001db0 <HAL_DMA_Abort_IT>
 80037a2:	1e03      	subs	r3, r0, #0
 80037a4:	d01c      	beq.n	80037e0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2280      	movs	r2, #128	@ 0x80
 80037aa:	589b      	ldr	r3, [r3, r2]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	2180      	movs	r1, #128	@ 0x80
 80037b2:	5852      	ldr	r2, [r2, r1]
 80037b4:	0010      	movs	r0, r2
 80037b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b8:	e012      	b.n	80037e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	0018      	movs	r0, r3
 80037be:	f000 f9e9 	bl	8003b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c2:	e00d      	b.n	80037e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 f9e4 	bl	8003b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037cc:	e008      	b.n	80037e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 f9df 	bl	8003b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2290      	movs	r2, #144	@ 0x90
 80037da:	2100      	movs	r1, #0
 80037dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80037de:	e1b9      	b.n	8003b54 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e0:	46c0      	nop			@ (mov r8, r8)
    return;
 80037e2:	e1b7      	b.n	8003b54 <HAL_UART_IRQHandler+0x62c>
 80037e4:	0000080f 	.word	0x0000080f
 80037e8:	10000001 	.word	0x10000001
 80037ec:	04000120 	.word	0x04000120
 80037f0:	08004b35 	.word	0x08004b35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d000      	beq.n	80037fe <HAL_UART_IRQHandler+0x2d6>
 80037fc:	e13e      	b.n	8003a7c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037fe:	23a4      	movs	r3, #164	@ 0xa4
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2210      	movs	r2, #16
 8003806:	4013      	ands	r3, r2
 8003808:	d100      	bne.n	800380c <HAL_UART_IRQHandler+0x2e4>
 800380a:	e137      	b.n	8003a7c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800380c:	23a0      	movs	r3, #160	@ 0xa0
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2210      	movs	r2, #16
 8003814:	4013      	ands	r3, r2
 8003816:	d100      	bne.n	800381a <HAL_UART_IRQHandler+0x2f2>
 8003818:	e130      	b.n	8003a7c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2210      	movs	r2, #16
 8003820:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2240      	movs	r2, #64	@ 0x40
 800382a:	4013      	ands	r3, r2
 800382c:	2b40      	cmp	r3, #64	@ 0x40
 800382e:	d000      	beq.n	8003832 <HAL_UART_IRQHandler+0x30a>
 8003830:	e0a4      	b.n	800397c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2280      	movs	r2, #128	@ 0x80
 8003836:	589b      	ldr	r3, [r3, r2]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	217e      	movs	r1, #126	@ 0x7e
 800383e:	187b      	adds	r3, r7, r1
 8003840:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003842:	187b      	adds	r3, r7, r1
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d100      	bne.n	800384c <HAL_UART_IRQHandler+0x324>
 800384a:	e185      	b.n	8003b58 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	225c      	movs	r2, #92	@ 0x5c
 8003850:	5a9b      	ldrh	r3, [r3, r2]
 8003852:	187a      	adds	r2, r7, r1
 8003854:	8812      	ldrh	r2, [r2, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d300      	bcc.n	800385c <HAL_UART_IRQHandler+0x334>
 800385a:	e17d      	b.n	8003b58 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	187a      	adds	r2, r7, r1
 8003860:	215e      	movs	r1, #94	@ 0x5e
 8003862:	8812      	ldrh	r2, [r2, #0]
 8003864:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2280      	movs	r2, #128	@ 0x80
 800386a:	589b      	ldr	r3, [r3, r2]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2220      	movs	r2, #32
 8003872:	4013      	ands	r3, r2
 8003874:	d170      	bne.n	8003958 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003876:	f3ef 8310 	mrs	r3, PRIMASK
 800387a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800387c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800387e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003880:	2301      	movs	r3, #1
 8003882:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003886:	f383 8810 	msr	PRIMASK, r3
}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	49b4      	ldr	r1, [pc, #720]	@ (8003b68 <HAL_UART_IRQHandler+0x640>)
 8003898:	400a      	ands	r2, r1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800389e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a2:	f383 8810 	msr	PRIMASK, r3
}
 80038a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80038ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80038b2:	2301      	movs	r3, #1
 80038b4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2101      	movs	r1, #1
 80038ca:	438a      	bics	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
 80038ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038d0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d4:	f383 8810 	msr	PRIMASK, r3
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038da:	f3ef 8310 	mrs	r3, PRIMASK
 80038de:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80038e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80038e4:	2301      	movs	r3, #1
 80038e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2140      	movs	r1, #64	@ 0x40
 80038fc:	438a      	bics	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003902:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003906:	f383 8810 	msr	PRIMASK, r3
}
 800390a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	228c      	movs	r2, #140	@ 0x8c
 8003910:	2120      	movs	r1, #32
 8003912:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391a:	f3ef 8310 	mrs	r3, PRIMASK
 800391e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003922:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003924:	2301      	movs	r3, #1
 8003926:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003928:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800392a:	f383 8810 	msr	PRIMASK, r3
}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2110      	movs	r1, #16
 800393c:	438a      	bics	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003942:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003946:	f383 8810 	msr	PRIMASK, r3
}
 800394a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2280      	movs	r2, #128	@ 0x80
 8003950:	589b      	ldr	r3, [r3, r2]
 8003952:	0018      	movs	r0, r3
 8003954:	f7fe f9cc 	bl	8001cf0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	225c      	movs	r2, #92	@ 0x5c
 8003962:	5a9a      	ldrh	r2, [r3, r2]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	215e      	movs	r1, #94	@ 0x5e
 8003968:	5a5b      	ldrh	r3, [r3, r1]
 800396a:	b29b      	uxth	r3, r3
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	0011      	movs	r1, r2
 8003974:	0018      	movs	r0, r3
 8003976:	f7fc fec1 	bl	80006fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800397a:	e0ed      	b.n	8003b58 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	225c      	movs	r2, #92	@ 0x5c
 8003980:	5a99      	ldrh	r1, [r3, r2]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	225e      	movs	r2, #94	@ 0x5e
 8003986:	5a9b      	ldrh	r3, [r3, r2]
 8003988:	b29a      	uxth	r2, r3
 800398a:	208e      	movs	r0, #142	@ 0x8e
 800398c:	183b      	adds	r3, r7, r0
 800398e:	1a8a      	subs	r2, r1, r2
 8003990:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	225e      	movs	r2, #94	@ 0x5e
 8003996:	5a9b      	ldrh	r3, [r3, r2]
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d100      	bne.n	80039a0 <HAL_UART_IRQHandler+0x478>
 800399e:	e0dd      	b.n	8003b5c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80039a0:	183b      	adds	r3, r7, r0
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d100      	bne.n	80039aa <HAL_UART_IRQHandler+0x482>
 80039a8:	e0d8      	b.n	8003b5c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039aa:	f3ef 8310 	mrs	r3, PRIMASK
 80039ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80039b0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039b2:	2488      	movs	r4, #136	@ 0x88
 80039b4:	193a      	adds	r2, r7, r4
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	2301      	movs	r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f383 8810 	msr	PRIMASK, r3
}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4967      	ldr	r1, [pc, #412]	@ (8003b6c <HAL_UART_IRQHandler+0x644>)
 80039d0:	400a      	ands	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	193b      	adds	r3, r7, r4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f383 8810 	msr	PRIMASK, r3
}
 80039e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e2:	f3ef 8310 	mrs	r3, PRIMASK
 80039e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80039e8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039ea:	2484      	movs	r4, #132	@ 0x84
 80039ec:	193a      	adds	r2, r7, r4
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	2301      	movs	r3, #1
 80039f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f383 8810 	msr	PRIMASK, r3
}
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	495a      	ldr	r1, [pc, #360]	@ (8003b70 <HAL_UART_IRQHandler+0x648>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	193b      	adds	r3, r7, r4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f383 8810 	msr	PRIMASK, r3
}
 8003a18:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	228c      	movs	r2, #140	@ 0x8c
 8003a1e:	2120      	movs	r1, #32
 8003a20:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a36:	2480      	movs	r4, #128	@ 0x80
 8003a38:	193a      	adds	r2, r7, r4
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a42:	f383 8810 	msr	PRIMASK, r3
}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2110      	movs	r1, #16
 8003a54:	438a      	bics	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	193b      	adds	r3, r7, r4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a60:	f383 8810 	msr	PRIMASK, r3
}
 8003a64:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a6c:	183b      	adds	r3, r7, r0
 8003a6e:	881a      	ldrh	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0011      	movs	r1, r2
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7fc fe41 	bl	80006fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a7a:	e06f      	b.n	8003b5c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a7c:	23a4      	movs	r3, #164	@ 0xa4
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	035b      	lsls	r3, r3, #13
 8003a86:	4013      	ands	r3, r2
 8003a88:	d010      	beq.n	8003aac <HAL_UART_IRQHandler+0x584>
 8003a8a:	239c      	movs	r3, #156	@ 0x9c
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	03db      	lsls	r3, r3, #15
 8003a94:	4013      	ands	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2280      	movs	r2, #128	@ 0x80
 8003a9e:	0352      	lsls	r2, r2, #13
 8003aa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f001 f888 	bl	8004bba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003aaa:	e05a      	b.n	8003b62 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003aac:	23a4      	movs	r3, #164	@ 0xa4
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2280      	movs	r2, #128	@ 0x80
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d016      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003ab8:	23a0      	movs	r3, #160	@ 0xa0
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2280      	movs	r2, #128	@ 0x80
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d106      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003ac4:	239c      	movs	r3, #156	@ 0x9c
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	041b      	lsls	r3, r3, #16
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d042      	beq.n	8003b60 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	0010      	movs	r0, r2
 8003ae2:	4798      	blx	r3
    }
    return;
 8003ae4:	e03c      	b.n	8003b60 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ae6:	23a4      	movs	r3, #164	@ 0xa4
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2240      	movs	r2, #64	@ 0x40
 8003aee:	4013      	ands	r3, r2
 8003af0:	d00a      	beq.n	8003b08 <HAL_UART_IRQHandler+0x5e0>
 8003af2:	23a0      	movs	r3, #160	@ 0xa0
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2240      	movs	r2, #64	@ 0x40
 8003afa:	4013      	ands	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f001 f82e 	bl	8004b62 <UART_EndTransmit_IT>
    return;
 8003b06:	e02c      	b.n	8003b62 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b08:	23a4      	movs	r3, #164	@ 0xa4
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	2380      	movs	r3, #128	@ 0x80
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	4013      	ands	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <HAL_UART_IRQHandler+0x606>
 8003b16:	23a0      	movs	r3, #160	@ 0xa0
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	@ 0x80
 8003b1e:	05db      	lsls	r3, r3, #23
 8003b20:	4013      	ands	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f001 f857 	bl	8004bda <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b2c:	e019      	b.n	8003b62 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b2e:	23a4      	movs	r3, #164	@ 0xa4
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	@ 0x80
 8003b36:	045b      	lsls	r3, r3, #17
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d012      	beq.n	8003b62 <HAL_UART_IRQHandler+0x63a>
 8003b3c:	23a0      	movs	r3, #160	@ 0xa0
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da0d      	bge.n	8003b62 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f001 f83e 	bl	8004bca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b4e:	e008      	b.n	8003b62 <HAL_UART_IRQHandler+0x63a>
      return;
 8003b50:	46c0      	nop			@ (mov r8, r8)
 8003b52:	e006      	b.n	8003b62 <HAL_UART_IRQHandler+0x63a>
    return;
 8003b54:	46c0      	nop			@ (mov r8, r8)
 8003b56:	e004      	b.n	8003b62 <HAL_UART_IRQHandler+0x63a>
      return;
 8003b58:	46c0      	nop			@ (mov r8, r8)
 8003b5a:	e002      	b.n	8003b62 <HAL_UART_IRQHandler+0x63a>
      return;
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	e000      	b.n	8003b62 <HAL_UART_IRQHandler+0x63a>
    return;
 8003b60:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b02a      	add	sp, #168	@ 0xa8
 8003b66:	bdb0      	pop	{r4, r5, r7, pc}
 8003b68:	fffffeff 	.word	0xfffffeff
 8003b6c:	fffffedf 	.word	0xfffffedf
 8003b70:	effffffe 	.word	0xeffffffe

08003b74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b7c:	46c0      	nop			@ (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b8c:	46c0      	nop			@ (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b002      	add	sp, #8
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba4:	b5b0      	push	{r4, r5, r7, lr}
 8003ba6:	b090      	sub	sp, #64	@ 0x40
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bac:	231a      	movs	r3, #26
 8003bae:	2220      	movs	r2, #32
 8003bb0:	189b      	adds	r3, r3, r2
 8003bb2:	19db      	adds	r3, r3, r7
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4ac1      	ldr	r2, [pc, #772]	@ (8003edc <UART_SetConfig+0x338>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	0019      	movs	r1, r3
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be2:	430b      	orrs	r3, r1
 8003be4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4abc      	ldr	r2, [pc, #752]	@ (8003ee0 <UART_SetConfig+0x33c>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	68d9      	ldr	r1, [r3, #12]
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4ab6      	ldr	r2, [pc, #728]	@ (8003ee4 <UART_SetConfig+0x340>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <UART_SetConfig+0x80>
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4ab4      	ldr	r2, [pc, #720]	@ (8003ee8 <UART_SetConfig+0x344>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c20:	4313      	orrs	r3, r2
 8003c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	4ab0      	ldr	r2, [pc, #704]	@ (8003eec <UART_SetConfig+0x348>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	0019      	movs	r1, r3
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c36:	430b      	orrs	r3, r1
 8003c38:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	220f      	movs	r2, #15
 8003c42:	4393      	bics	r3, r2
 8003c44:	0018      	movs	r0, r3
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	0003      	movs	r3, r0
 8003c50:	430b      	orrs	r3, r1
 8003c52:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4aa5      	ldr	r2, [pc, #660]	@ (8003ef0 <UART_SetConfig+0x34c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d131      	bne.n	8003cc2 <UART_SetConfig+0x11e>
 8003c5e:	4ba5      	ldr	r3, [pc, #660]	@ (8003ef4 <UART_SetConfig+0x350>)
 8003c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c62:	2203      	movs	r2, #3
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d01d      	beq.n	8003ca6 <UART_SetConfig+0x102>
 8003c6a:	d823      	bhi.n	8003cb4 <UART_SetConfig+0x110>
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d00c      	beq.n	8003c8a <UART_SetConfig+0xe6>
 8003c70:	d820      	bhi.n	8003cb4 <UART_SetConfig+0x110>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <UART_SetConfig+0xd8>
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d00e      	beq.n	8003c98 <UART_SetConfig+0xf4>
 8003c7a:	e01b      	b.n	8003cb4 <UART_SetConfig+0x110>
 8003c7c:	231b      	movs	r3, #27
 8003c7e:	2220      	movs	r2, #32
 8003c80:	189b      	adds	r3, r3, r2
 8003c82:	19db      	adds	r3, r3, r7
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	e154      	b.n	8003f34 <UART_SetConfig+0x390>
 8003c8a:	231b      	movs	r3, #27
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	189b      	adds	r3, r3, r2
 8003c90:	19db      	adds	r3, r3, r7
 8003c92:	2202      	movs	r2, #2
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	e14d      	b.n	8003f34 <UART_SetConfig+0x390>
 8003c98:	231b      	movs	r3, #27
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	189b      	adds	r3, r3, r2
 8003c9e:	19db      	adds	r3, r3, r7
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e146      	b.n	8003f34 <UART_SetConfig+0x390>
 8003ca6:	231b      	movs	r3, #27
 8003ca8:	2220      	movs	r2, #32
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	19db      	adds	r3, r3, r7
 8003cae:	2208      	movs	r2, #8
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	e13f      	b.n	8003f34 <UART_SetConfig+0x390>
 8003cb4:	231b      	movs	r3, #27
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	189b      	adds	r3, r3, r2
 8003cba:	19db      	adds	r3, r3, r7
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e138      	b.n	8003f34 <UART_SetConfig+0x390>
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a8c      	ldr	r2, [pc, #560]	@ (8003ef8 <UART_SetConfig+0x354>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d131      	bne.n	8003d30 <UART_SetConfig+0x18c>
 8003ccc:	4b89      	ldr	r3, [pc, #548]	@ (8003ef4 <UART_SetConfig+0x350>)
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	220c      	movs	r2, #12
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d01d      	beq.n	8003d14 <UART_SetConfig+0x170>
 8003cd8:	d823      	bhi.n	8003d22 <UART_SetConfig+0x17e>
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d00c      	beq.n	8003cf8 <UART_SetConfig+0x154>
 8003cde:	d820      	bhi.n	8003d22 <UART_SetConfig+0x17e>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <UART_SetConfig+0x146>
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d00e      	beq.n	8003d06 <UART_SetConfig+0x162>
 8003ce8:	e01b      	b.n	8003d22 <UART_SetConfig+0x17e>
 8003cea:	231b      	movs	r3, #27
 8003cec:	2220      	movs	r2, #32
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	19db      	adds	r3, r3, r7
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	e11d      	b.n	8003f34 <UART_SetConfig+0x390>
 8003cf8:	231b      	movs	r3, #27
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	189b      	adds	r3, r3, r2
 8003cfe:	19db      	adds	r3, r3, r7
 8003d00:	2202      	movs	r2, #2
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e116      	b.n	8003f34 <UART_SetConfig+0x390>
 8003d06:	231b      	movs	r3, #27
 8003d08:	2220      	movs	r2, #32
 8003d0a:	189b      	adds	r3, r3, r2
 8003d0c:	19db      	adds	r3, r3, r7
 8003d0e:	2204      	movs	r2, #4
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e10f      	b.n	8003f34 <UART_SetConfig+0x390>
 8003d14:	231b      	movs	r3, #27
 8003d16:	2220      	movs	r2, #32
 8003d18:	189b      	adds	r3, r3, r2
 8003d1a:	19db      	adds	r3, r3, r7
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	e108      	b.n	8003f34 <UART_SetConfig+0x390>
 8003d22:	231b      	movs	r3, #27
 8003d24:	2220      	movs	r2, #32
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	19db      	adds	r3, r3, r7
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	e101      	b.n	8003f34 <UART_SetConfig+0x390>
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a71      	ldr	r2, [pc, #452]	@ (8003efc <UART_SetConfig+0x358>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d131      	bne.n	8003d9e <UART_SetConfig+0x1fa>
 8003d3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003ef4 <UART_SetConfig+0x350>)
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3e:	2230      	movs	r2, #48	@ 0x30
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b30      	cmp	r3, #48	@ 0x30
 8003d44:	d01d      	beq.n	8003d82 <UART_SetConfig+0x1de>
 8003d46:	d823      	bhi.n	8003d90 <UART_SetConfig+0x1ec>
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d00c      	beq.n	8003d66 <UART_SetConfig+0x1c2>
 8003d4c:	d820      	bhi.n	8003d90 <UART_SetConfig+0x1ec>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <UART_SetConfig+0x1b4>
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d00e      	beq.n	8003d74 <UART_SetConfig+0x1d0>
 8003d56:	e01b      	b.n	8003d90 <UART_SetConfig+0x1ec>
 8003d58:	231b      	movs	r3, #27
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	189b      	adds	r3, r3, r2
 8003d5e:	19db      	adds	r3, r3, r7
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e0e6      	b.n	8003f34 <UART_SetConfig+0x390>
 8003d66:	231b      	movs	r3, #27
 8003d68:	2220      	movs	r2, #32
 8003d6a:	189b      	adds	r3, r3, r2
 8003d6c:	19db      	adds	r3, r3, r7
 8003d6e:	2202      	movs	r2, #2
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	e0df      	b.n	8003f34 <UART_SetConfig+0x390>
 8003d74:	231b      	movs	r3, #27
 8003d76:	2220      	movs	r2, #32
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e0d8      	b.n	8003f34 <UART_SetConfig+0x390>
 8003d82:	231b      	movs	r3, #27
 8003d84:	2220      	movs	r2, #32
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	19db      	adds	r3, r3, r7
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e0d1      	b.n	8003f34 <UART_SetConfig+0x390>
 8003d90:	231b      	movs	r3, #27
 8003d92:	2220      	movs	r2, #32
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	19db      	adds	r3, r3, r7
 8003d98:	2210      	movs	r2, #16
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e0ca      	b.n	8003f34 <UART_SetConfig+0x390>
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a57      	ldr	r2, [pc, #348]	@ (8003f00 <UART_SetConfig+0x35c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d106      	bne.n	8003db6 <UART_SetConfig+0x212>
 8003da8:	231b      	movs	r3, #27
 8003daa:	2220      	movs	r2, #32
 8003dac:	189b      	adds	r3, r3, r2
 8003dae:	19db      	adds	r3, r3, r7
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	e0be      	b.n	8003f34 <UART_SetConfig+0x390>
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a52      	ldr	r2, [pc, #328]	@ (8003f04 <UART_SetConfig+0x360>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d106      	bne.n	8003dce <UART_SetConfig+0x22a>
 8003dc0:	231b      	movs	r3, #27
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	189b      	adds	r3, r3, r2
 8003dc6:	19db      	adds	r3, r3, r7
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e0b2      	b.n	8003f34 <UART_SetConfig+0x390>
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a4d      	ldr	r2, [pc, #308]	@ (8003f08 <UART_SetConfig+0x364>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d106      	bne.n	8003de6 <UART_SetConfig+0x242>
 8003dd8:	231b      	movs	r3, #27
 8003dda:	2220      	movs	r2, #32
 8003ddc:	189b      	adds	r3, r3, r2
 8003dde:	19db      	adds	r3, r3, r7
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	e0a6      	b.n	8003f34 <UART_SetConfig+0x390>
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a3e      	ldr	r2, [pc, #248]	@ (8003ee4 <UART_SetConfig+0x340>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d13e      	bne.n	8003e6e <UART_SetConfig+0x2ca>
 8003df0:	4b40      	ldr	r3, [pc, #256]	@ (8003ef4 <UART_SetConfig+0x350>)
 8003df2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003df4:	23c0      	movs	r3, #192	@ 0xc0
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	4013      	ands	r3, r2
 8003dfa:	22c0      	movs	r2, #192	@ 0xc0
 8003dfc:	0112      	lsls	r2, r2, #4
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d027      	beq.n	8003e52 <UART_SetConfig+0x2ae>
 8003e02:	22c0      	movs	r2, #192	@ 0xc0
 8003e04:	0112      	lsls	r2, r2, #4
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d82a      	bhi.n	8003e60 <UART_SetConfig+0x2bc>
 8003e0a:	2280      	movs	r2, #128	@ 0x80
 8003e0c:	0112      	lsls	r2, r2, #4
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d011      	beq.n	8003e36 <UART_SetConfig+0x292>
 8003e12:	2280      	movs	r2, #128	@ 0x80
 8003e14:	0112      	lsls	r2, r2, #4
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d822      	bhi.n	8003e60 <UART_SetConfig+0x2bc>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <UART_SetConfig+0x284>
 8003e1e:	2280      	movs	r2, #128	@ 0x80
 8003e20:	00d2      	lsls	r2, r2, #3
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00e      	beq.n	8003e44 <UART_SetConfig+0x2a0>
 8003e26:	e01b      	b.n	8003e60 <UART_SetConfig+0x2bc>
 8003e28:	231b      	movs	r3, #27
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	189b      	adds	r3, r3, r2
 8003e2e:	19db      	adds	r3, r3, r7
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	e07e      	b.n	8003f34 <UART_SetConfig+0x390>
 8003e36:	231b      	movs	r3, #27
 8003e38:	2220      	movs	r2, #32
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	19db      	adds	r3, r3, r7
 8003e3e:	2202      	movs	r2, #2
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e077      	b.n	8003f34 <UART_SetConfig+0x390>
 8003e44:	231b      	movs	r3, #27
 8003e46:	2220      	movs	r2, #32
 8003e48:	189b      	adds	r3, r3, r2
 8003e4a:	19db      	adds	r3, r3, r7
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	e070      	b.n	8003f34 <UART_SetConfig+0x390>
 8003e52:	231b      	movs	r3, #27
 8003e54:	2220      	movs	r2, #32
 8003e56:	189b      	adds	r3, r3, r2
 8003e58:	19db      	adds	r3, r3, r7
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	e069      	b.n	8003f34 <UART_SetConfig+0x390>
 8003e60:	231b      	movs	r3, #27
 8003e62:	2220      	movs	r2, #32
 8003e64:	189b      	adds	r3, r3, r2
 8003e66:	19db      	adds	r3, r3, r7
 8003e68:	2210      	movs	r2, #16
 8003e6a:	701a      	strb	r2, [r3, #0]
 8003e6c:	e062      	b.n	8003f34 <UART_SetConfig+0x390>
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee8 <UART_SetConfig+0x344>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d157      	bne.n	8003f28 <UART_SetConfig+0x384>
 8003e78:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef4 <UART_SetConfig+0x350>)
 8003e7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e7c:	23c0      	movs	r3, #192	@ 0xc0
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4013      	ands	r3, r2
 8003e82:	22c0      	movs	r2, #192	@ 0xc0
 8003e84:	0092      	lsls	r2, r2, #2
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d040      	beq.n	8003f0c <UART_SetConfig+0x368>
 8003e8a:	22c0      	movs	r2, #192	@ 0xc0
 8003e8c:	0092      	lsls	r2, r2, #2
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d843      	bhi.n	8003f1a <UART_SetConfig+0x376>
 8003e92:	2280      	movs	r2, #128	@ 0x80
 8003e94:	0092      	lsls	r2, r2, #2
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d011      	beq.n	8003ebe <UART_SetConfig+0x31a>
 8003e9a:	2280      	movs	r2, #128	@ 0x80
 8003e9c:	0092      	lsls	r2, r2, #2
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d83b      	bhi.n	8003f1a <UART_SetConfig+0x376>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <UART_SetConfig+0x30c>
 8003ea6:	2280      	movs	r2, #128	@ 0x80
 8003ea8:	0052      	lsls	r2, r2, #1
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00e      	beq.n	8003ecc <UART_SetConfig+0x328>
 8003eae:	e034      	b.n	8003f1a <UART_SetConfig+0x376>
 8003eb0:	231b      	movs	r3, #27
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	189b      	adds	r3, r3, r2
 8003eb6:	19db      	adds	r3, r3, r7
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e03a      	b.n	8003f34 <UART_SetConfig+0x390>
 8003ebe:	231b      	movs	r3, #27
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	189b      	adds	r3, r3, r2
 8003ec4:	19db      	adds	r3, r3, r7
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e033      	b.n	8003f34 <UART_SetConfig+0x390>
 8003ecc:	231b      	movs	r3, #27
 8003ece:	2220      	movs	r2, #32
 8003ed0:	189b      	adds	r3, r3, r2
 8003ed2:	19db      	adds	r3, r3, r7
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	e02c      	b.n	8003f34 <UART_SetConfig+0x390>
 8003eda:	46c0      	nop			@ (mov r8, r8)
 8003edc:	cfff69f3 	.word	0xcfff69f3
 8003ee0:	ffffcfff 	.word	0xffffcfff
 8003ee4:	40008000 	.word	0x40008000
 8003ee8:	40008400 	.word	0x40008400
 8003eec:	11fff4ff 	.word	0x11fff4ff
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40004400 	.word	0x40004400
 8003efc:	40004800 	.word	0x40004800
 8003f00:	40004c00 	.word	0x40004c00
 8003f04:	40005000 	.word	0x40005000
 8003f08:	40013c00 	.word	0x40013c00
 8003f0c:	231b      	movs	r3, #27
 8003f0e:	2220      	movs	r2, #32
 8003f10:	189b      	adds	r3, r3, r2
 8003f12:	19db      	adds	r3, r3, r7
 8003f14:	2208      	movs	r2, #8
 8003f16:	701a      	strb	r2, [r3, #0]
 8003f18:	e00c      	b.n	8003f34 <UART_SetConfig+0x390>
 8003f1a:	231b      	movs	r3, #27
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	189b      	adds	r3, r3, r2
 8003f20:	19db      	adds	r3, r3, r7
 8003f22:	2210      	movs	r2, #16
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e005      	b.n	8003f34 <UART_SetConfig+0x390>
 8003f28:	231b      	movs	r3, #27
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	189b      	adds	r3, r3, r2
 8003f2e:	19db      	adds	r3, r3, r7
 8003f30:	2210      	movs	r2, #16
 8003f32:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4ac1      	ldr	r2, [pc, #772]	@ (8004240 <UART_SetConfig+0x69c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d005      	beq.n	8003f4a <UART_SetConfig+0x3a6>
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4ac0      	ldr	r2, [pc, #768]	@ (8004244 <UART_SetConfig+0x6a0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d000      	beq.n	8003f4a <UART_SetConfig+0x3a6>
 8003f48:	e093      	b.n	8004072 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f4a:	231b      	movs	r3, #27
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	19db      	adds	r3, r3, r7
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d015      	beq.n	8003f84 <UART_SetConfig+0x3e0>
 8003f58:	dc18      	bgt.n	8003f8c <UART_SetConfig+0x3e8>
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d00d      	beq.n	8003f7a <UART_SetConfig+0x3d6>
 8003f5e:	dc15      	bgt.n	8003f8c <UART_SetConfig+0x3e8>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <UART_SetConfig+0x3c6>
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d005      	beq.n	8003f74 <UART_SetConfig+0x3d0>
 8003f68:	e010      	b.n	8003f8c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f6a:	f7fe ffa3 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f72:	e014      	b.n	8003f9e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f74:	4bb4      	ldr	r3, [pc, #720]	@ (8004248 <UART_SetConfig+0x6a4>)
 8003f76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f78:	e011      	b.n	8003f9e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7a:	f7fe ff0f 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f82:	e00c      	b.n	8003f9e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f84:	2380      	movs	r3, #128	@ 0x80
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f8a:	e008      	b.n	8003f9e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003f90:	231a      	movs	r3, #26
 8003f92:	2220      	movs	r2, #32
 8003f94:	189b      	adds	r3, r3, r2
 8003f96:	19db      	adds	r3, r3, r7
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
        break;
 8003f9c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d100      	bne.n	8003fa6 <UART_SetConfig+0x402>
 8003fa4:	e135      	b.n	8004212 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003faa:	4ba8      	ldr	r3, [pc, #672]	@ (800424c <UART_SetConfig+0x6a8>)
 8003fac:	0052      	lsls	r2, r2, #1
 8003fae:	5ad3      	ldrh	r3, [r2, r3]
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003fb4:	f7fc f8a6 	bl	8000104 <__udivsi3>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	0013      	movs	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	189b      	adds	r3, r3, r2
 8003fc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d305      	bcc.n	8003fd8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d906      	bls.n	8003fe6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003fd8:	231a      	movs	r3, #26
 8003fda:	2220      	movs	r2, #32
 8003fdc:	189b      	adds	r3, r3, r2
 8003fde:	19db      	adds	r3, r3, r7
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	e044      	b.n	8004070 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ff2:	4b96      	ldr	r3, [pc, #600]	@ (800424c <UART_SetConfig+0x6a8>)
 8003ff4:	0052      	lsls	r2, r2, #1
 8003ff6:	5ad3      	ldrh	r3, [r2, r3]
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	69b8      	ldr	r0, [r7, #24]
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	f7fc f9f3 	bl	80003f0 <__aeabi_uldivmod>
 800400a:	0002      	movs	r2, r0
 800400c:	000b      	movs	r3, r1
 800400e:	0e11      	lsrs	r1, r2, #24
 8004010:	021d      	lsls	r5, r3, #8
 8004012:	430d      	orrs	r5, r1
 8004014:	0214      	lsls	r4, r2, #8
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	68b8      	ldr	r0, [r7, #8]
 8004024:	68f9      	ldr	r1, [r7, #12]
 8004026:	1900      	adds	r0, r0, r4
 8004028:	4169      	adcs	r1, r5
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	607b      	str	r3, [r7, #4]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f7fc f9da 	bl	80003f0 <__aeabi_uldivmod>
 800403c:	0002      	movs	r2, r0
 800403e:	000b      	movs	r3, r1
 8004040:	0013      	movs	r3, r2
 8004042:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004046:	23c0      	movs	r3, #192	@ 0xc0
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	429a      	cmp	r2, r3
 800404c:	d309      	bcc.n	8004062 <UART_SetConfig+0x4be>
 800404e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004050:	2380      	movs	r3, #128	@ 0x80
 8004052:	035b      	lsls	r3, r3, #13
 8004054:	429a      	cmp	r2, r3
 8004056:	d204      	bcs.n	8004062 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800405e:	60da      	str	r2, [r3, #12]
 8004060:	e006      	b.n	8004070 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004062:	231a      	movs	r3, #26
 8004064:	2220      	movs	r2, #32
 8004066:	189b      	adds	r3, r3, r2
 8004068:	19db      	adds	r3, r3, r7
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800406e:	e0d0      	b.n	8004212 <UART_SetConfig+0x66e>
 8004070:	e0cf      	b.n	8004212 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	429a      	cmp	r2, r3
 800407c:	d000      	beq.n	8004080 <UART_SetConfig+0x4dc>
 800407e:	e070      	b.n	8004162 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004080:	231b      	movs	r3, #27
 8004082:	2220      	movs	r2, #32
 8004084:	189b      	adds	r3, r3, r2
 8004086:	19db      	adds	r3, r3, r7
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b08      	cmp	r3, #8
 800408c:	d015      	beq.n	80040ba <UART_SetConfig+0x516>
 800408e:	dc18      	bgt.n	80040c2 <UART_SetConfig+0x51e>
 8004090:	2b04      	cmp	r3, #4
 8004092:	d00d      	beq.n	80040b0 <UART_SetConfig+0x50c>
 8004094:	dc15      	bgt.n	80040c2 <UART_SetConfig+0x51e>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <UART_SetConfig+0x4fc>
 800409a:	2b02      	cmp	r3, #2
 800409c:	d005      	beq.n	80040aa <UART_SetConfig+0x506>
 800409e:	e010      	b.n	80040c2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a0:	f7fe ff08 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 80040a4:	0003      	movs	r3, r0
 80040a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040a8:	e014      	b.n	80040d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040aa:	4b67      	ldr	r3, [pc, #412]	@ (8004248 <UART_SetConfig+0x6a4>)
 80040ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040ae:	e011      	b.n	80040d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b0:	f7fe fe74 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 80040b4:	0003      	movs	r3, r0
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040b8:	e00c      	b.n	80040d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ba:	2380      	movs	r3, #128	@ 0x80
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040c0:	e008      	b.n	80040d4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80040c6:	231a      	movs	r3, #26
 80040c8:	2220      	movs	r2, #32
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	19db      	adds	r3, r3, r7
 80040ce:	2201      	movs	r2, #1
 80040d0:	701a      	strb	r2, [r3, #0]
        break;
 80040d2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d100      	bne.n	80040dc <UART_SetConfig+0x538>
 80040da:	e09a      	b.n	8004212 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040e0:	4b5a      	ldr	r3, [pc, #360]	@ (800424c <UART_SetConfig+0x6a8>)
 80040e2:	0052      	lsls	r2, r2, #1
 80040e4:	5ad3      	ldrh	r3, [r2, r3]
 80040e6:	0019      	movs	r1, r3
 80040e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80040ea:	f7fc f80b 	bl	8000104 <__udivsi3>
 80040ee:	0003      	movs	r3, r0
 80040f0:	005a      	lsls	r2, r3, #1
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	085b      	lsrs	r3, r3, #1
 80040f8:	18d2      	adds	r2, r2, r3
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	0019      	movs	r1, r3
 8004100:	0010      	movs	r0, r2
 8004102:	f7fb ffff 	bl	8000104 <__udivsi3>
 8004106:	0003      	movs	r3, r0
 8004108:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	2b0f      	cmp	r3, #15
 800410e:	d921      	bls.n	8004154 <UART_SetConfig+0x5b0>
 8004110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004112:	2380      	movs	r3, #128	@ 0x80
 8004114:	025b      	lsls	r3, r3, #9
 8004116:	429a      	cmp	r2, r3
 8004118:	d21c      	bcs.n	8004154 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800411a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411c:	b29a      	uxth	r2, r3
 800411e:	200e      	movs	r0, #14
 8004120:	2420      	movs	r4, #32
 8004122:	1903      	adds	r3, r0, r4
 8004124:	19db      	adds	r3, r3, r7
 8004126:	210f      	movs	r1, #15
 8004128:	438a      	bics	r2, r1
 800412a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	b29b      	uxth	r3, r3
 8004132:	2207      	movs	r2, #7
 8004134:	4013      	ands	r3, r2
 8004136:	b299      	uxth	r1, r3
 8004138:	1903      	adds	r3, r0, r4
 800413a:	19db      	adds	r3, r3, r7
 800413c:	1902      	adds	r2, r0, r4
 800413e:	19d2      	adds	r2, r2, r7
 8004140:	8812      	ldrh	r2, [r2, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	1902      	adds	r2, r0, r4
 800414c:	19d2      	adds	r2, r2, r7
 800414e:	8812      	ldrh	r2, [r2, #0]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	e05e      	b.n	8004212 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004154:	231a      	movs	r3, #26
 8004156:	2220      	movs	r2, #32
 8004158:	189b      	adds	r3, r3, r2
 800415a:	19db      	adds	r3, r3, r7
 800415c:	2201      	movs	r2, #1
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e057      	b.n	8004212 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004162:	231b      	movs	r3, #27
 8004164:	2220      	movs	r2, #32
 8004166:	189b      	adds	r3, r3, r2
 8004168:	19db      	adds	r3, r3, r7
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d015      	beq.n	800419c <UART_SetConfig+0x5f8>
 8004170:	dc18      	bgt.n	80041a4 <UART_SetConfig+0x600>
 8004172:	2b04      	cmp	r3, #4
 8004174:	d00d      	beq.n	8004192 <UART_SetConfig+0x5ee>
 8004176:	dc15      	bgt.n	80041a4 <UART_SetConfig+0x600>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <UART_SetConfig+0x5de>
 800417c:	2b02      	cmp	r3, #2
 800417e:	d005      	beq.n	800418c <UART_SetConfig+0x5e8>
 8004180:	e010      	b.n	80041a4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004182:	f7fe fe97 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8004186:	0003      	movs	r3, r0
 8004188:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800418a:	e014      	b.n	80041b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800418c:	4b2e      	ldr	r3, [pc, #184]	@ (8004248 <UART_SetConfig+0x6a4>)
 800418e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004190:	e011      	b.n	80041b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004192:	f7fe fe03 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8004196:	0003      	movs	r3, r0
 8004198:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800419a:	e00c      	b.n	80041b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041a2:	e008      	b.n	80041b6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80041a8:	231a      	movs	r3, #26
 80041aa:	2220      	movs	r2, #32
 80041ac:	189b      	adds	r3, r3, r2
 80041ae:	19db      	adds	r3, r3, r7
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
        break;
 80041b4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80041b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d02a      	beq.n	8004212 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041c0:	4b22      	ldr	r3, [pc, #136]	@ (800424c <UART_SetConfig+0x6a8>)
 80041c2:	0052      	lsls	r2, r2, #1
 80041c4:	5ad3      	ldrh	r3, [r2, r3]
 80041c6:	0019      	movs	r1, r3
 80041c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041ca:	f7fb ff9b 	bl	8000104 <__udivsi3>
 80041ce:	0003      	movs	r3, r0
 80041d0:	001a      	movs	r2, r3
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	18d2      	adds	r2, r2, r3
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	0019      	movs	r1, r3
 80041e0:	0010      	movs	r0, r2
 80041e2:	f7fb ff8f 	bl	8000104 <__udivsi3>
 80041e6:	0003      	movs	r3, r0
 80041e8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ec:	2b0f      	cmp	r3, #15
 80041ee:	d90a      	bls.n	8004206 <UART_SetConfig+0x662>
 80041f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f2:	2380      	movs	r3, #128	@ 0x80
 80041f4:	025b      	lsls	r3, r3, #9
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d205      	bcs.n	8004206 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60da      	str	r2, [r3, #12]
 8004204:	e005      	b.n	8004212 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004206:	231a      	movs	r3, #26
 8004208:	2220      	movs	r2, #32
 800420a:	189b      	adds	r3, r3, r2
 800420c:	19db      	adds	r3, r3, r7
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	226a      	movs	r2, #106	@ 0x6a
 8004216:	2101      	movs	r1, #1
 8004218:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	2268      	movs	r2, #104	@ 0x68
 800421e:	2101      	movs	r1, #1
 8004220:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	2200      	movs	r2, #0
 8004226:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	2200      	movs	r2, #0
 800422c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800422e:	231a      	movs	r3, #26
 8004230:	2220      	movs	r2, #32
 8004232:	189b      	adds	r3, r3, r2
 8004234:	19db      	adds	r3, r3, r7
 8004236:	781b      	ldrb	r3, [r3, #0]
}
 8004238:	0018      	movs	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	b010      	add	sp, #64	@ 0x40
 800423e:	bdb0      	pop	{r4, r5, r7, pc}
 8004240:	40008000 	.word	0x40008000
 8004244:	40008400 	.word	0x40008400
 8004248:	00f42400 	.word	0x00f42400
 800424c:	08005010 	.word	0x08005010

08004250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425c:	2208      	movs	r2, #8
 800425e:	4013      	ands	r3, r2
 8004260:	d00b      	beq.n	800427a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a4a      	ldr	r2, [pc, #296]	@ (8004394 <UART_AdvFeatureConfig+0x144>)
 800426a:	4013      	ands	r3, r2
 800426c:	0019      	movs	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427e:	2201      	movs	r2, #1
 8004280:	4013      	ands	r3, r2
 8004282:	d00b      	beq.n	800429c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4a43      	ldr	r2, [pc, #268]	@ (8004398 <UART_AdvFeatureConfig+0x148>)
 800428c:	4013      	ands	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	2202      	movs	r2, #2
 80042a2:	4013      	ands	r3, r2
 80042a4:	d00b      	beq.n	80042be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4a3b      	ldr	r2, [pc, #236]	@ (800439c <UART_AdvFeatureConfig+0x14c>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	0019      	movs	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	2204      	movs	r2, #4
 80042c4:	4013      	ands	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4a34      	ldr	r2, [pc, #208]	@ (80043a0 <UART_AdvFeatureConfig+0x150>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	0019      	movs	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	2210      	movs	r2, #16
 80042e6:	4013      	ands	r3, r2
 80042e8:	d00b      	beq.n	8004302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a2c      	ldr	r2, [pc, #176]	@ (80043a4 <UART_AdvFeatureConfig+0x154>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004306:	2220      	movs	r2, #32
 8004308:	4013      	ands	r3, r2
 800430a:	d00b      	beq.n	8004324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	4a25      	ldr	r2, [pc, #148]	@ (80043a8 <UART_AdvFeatureConfig+0x158>)
 8004314:	4013      	ands	r3, r2
 8004316:	0019      	movs	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	2240      	movs	r2, #64	@ 0x40
 800432a:	4013      	ands	r3, r2
 800432c:	d01d      	beq.n	800436a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <UART_AdvFeatureConfig+0x15c>)
 8004336:	4013      	ands	r3, r2
 8004338:	0019      	movs	r1, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800434a:	2380      	movs	r3, #128	@ 0x80
 800434c:	035b      	lsls	r3, r3, #13
 800434e:	429a      	cmp	r2, r3
 8004350:	d10b      	bne.n	800436a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a15      	ldr	r2, [pc, #84]	@ (80043b0 <UART_AdvFeatureConfig+0x160>)
 800435a:	4013      	ands	r3, r2
 800435c:	0019      	movs	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436e:	2280      	movs	r2, #128	@ 0x80
 8004370:	4013      	ands	r3, r2
 8004372:	d00b      	beq.n	800438c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4a0e      	ldr	r2, [pc, #56]	@ (80043b4 <UART_AdvFeatureConfig+0x164>)
 800437c:	4013      	ands	r3, r2
 800437e:	0019      	movs	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	605a      	str	r2, [r3, #4]
  }
}
 800438c:	46c0      	nop			@ (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b002      	add	sp, #8
 8004392:	bd80      	pop	{r7, pc}
 8004394:	ffff7fff 	.word	0xffff7fff
 8004398:	fffdffff 	.word	0xfffdffff
 800439c:	fffeffff 	.word	0xfffeffff
 80043a0:	fffbffff 	.word	0xfffbffff
 80043a4:	ffffefff 	.word	0xffffefff
 80043a8:	ffffdfff 	.word	0xffffdfff
 80043ac:	ffefffff 	.word	0xffefffff
 80043b0:	ff9fffff 	.word	0xff9fffff
 80043b4:	fff7ffff 	.word	0xfff7ffff

080043b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b092      	sub	sp, #72	@ 0x48
 80043bc:	af02      	add	r7, sp, #8
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2290      	movs	r2, #144	@ 0x90
 80043c4:	2100      	movs	r1, #0
 80043c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043c8:	f7fd fa62 	bl	8001890 <HAL_GetTick>
 80043cc:	0003      	movs	r3, r0
 80043ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2208      	movs	r2, #8
 80043d8:	4013      	ands	r3, r2
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d12d      	bne.n	800443a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e0:	2280      	movs	r2, #128	@ 0x80
 80043e2:	0391      	lsls	r1, r2, #14
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4a47      	ldr	r2, [pc, #284]	@ (8004504 <UART_CheckIdleState+0x14c>)
 80043e8:	9200      	str	r2, [sp, #0]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f000 f88e 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 80043f0:	1e03      	subs	r3, r0, #0
 80043f2:	d022      	beq.n	800443a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f4:	f3ef 8310 	mrs	r3, PRIMASK
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80043fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043fe:	2301      	movs	r3, #1
 8004400:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			@ (mov r8, r8)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2180      	movs	r1, #128	@ 0x80
 8004416:	438a      	bics	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004420:	f383 8810 	msr	PRIMASK, r3
}
 8004424:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2288      	movs	r2, #136	@ 0x88
 800442a:	2120      	movs	r1, #32
 800442c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2284      	movs	r2, #132	@ 0x84
 8004432:	2100      	movs	r1, #0
 8004434:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e060      	b.n	80044fc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2204      	movs	r2, #4
 8004442:	4013      	ands	r3, r2
 8004444:	2b04      	cmp	r3, #4
 8004446:	d146      	bne.n	80044d6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444a:	2280      	movs	r2, #128	@ 0x80
 800444c:	03d1      	lsls	r1, r2, #15
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4a2c      	ldr	r2, [pc, #176]	@ (8004504 <UART_CheckIdleState+0x14c>)
 8004452:	9200      	str	r2, [sp, #0]
 8004454:	2200      	movs	r2, #0
 8004456:	f000 f859 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 800445a:	1e03      	subs	r3, r0, #0
 800445c:	d03b      	beq.n	80044d6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445e:	f3ef 8310 	mrs	r3, PRIMASK
 8004462:	60fb      	str	r3, [r7, #12]
  return(result);
 8004464:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004466:	637b      	str	r3, [r7, #52]	@ 0x34
 8004468:	2301      	movs	r3, #1
 800446a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f383 8810 	msr	PRIMASK, r3
}
 8004472:	46c0      	nop			@ (mov r8, r8)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4922      	ldr	r1, [pc, #136]	@ (8004508 <UART_CheckIdleState+0x150>)
 8004480:	400a      	ands	r2, r1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004486:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f383 8810 	msr	PRIMASK, r3
}
 800448e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004490:	f3ef 8310 	mrs	r3, PRIMASK
 8004494:	61bb      	str	r3, [r7, #24]
  return(result);
 8004496:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004498:	633b      	str	r3, [r7, #48]	@ 0x30
 800449a:	2301      	movs	r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f383 8810 	msr	PRIMASK, r3
}
 80044a4:	46c0      	nop			@ (mov r8, r8)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2101      	movs	r1, #1
 80044b2:	438a      	bics	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f383 8810 	msr	PRIMASK, r3
}
 80044c0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	228c      	movs	r2, #140	@ 0x8c
 80044c6:	2120      	movs	r1, #32
 80044c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2284      	movs	r2, #132	@ 0x84
 80044ce:	2100      	movs	r1, #0
 80044d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e012      	b.n	80044fc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2288      	movs	r2, #136	@ 0x88
 80044da:	2120      	movs	r1, #32
 80044dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	228c      	movs	r2, #140	@ 0x8c
 80044e2:	2120      	movs	r1, #32
 80044e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2284      	movs	r2, #132	@ 0x84
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b010      	add	sp, #64	@ 0x40
 8004502:	bd80      	pop	{r7, pc}
 8004504:	01ffffff 	.word	0x01ffffff
 8004508:	fffffedf 	.word	0xfffffedf

0800450c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	1dfb      	adds	r3, r7, #7
 800451a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451c:	e051      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	3301      	adds	r3, #1
 8004522:	d04e      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004524:	f7fd f9b4 	bl	8001890 <HAL_GetTick>
 8004528:	0002      	movs	r2, r0
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	429a      	cmp	r2, r3
 8004532:	d302      	bcc.n	800453a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e051      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2204      	movs	r2, #4
 8004546:	4013      	ands	r3, r2
 8004548:	d03b      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b80      	cmp	r3, #128	@ 0x80
 800454e:	d038      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b40      	cmp	r3, #64	@ 0x40
 8004554:	d035      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	2208      	movs	r2, #8
 800455e:	4013      	ands	r3, r2
 8004560:	2b08      	cmp	r3, #8
 8004562:	d111      	bne.n	8004588 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2208      	movs	r2, #8
 800456a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	0018      	movs	r0, r3
 8004570:	f000 f922 	bl	80047b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2290      	movs	r2, #144	@ 0x90
 8004578:	2108      	movs	r1, #8
 800457a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2284      	movs	r2, #132	@ 0x84
 8004580:	2100      	movs	r1, #0
 8004582:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e02c      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	2380      	movs	r3, #128	@ 0x80
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	401a      	ands	r2, r3
 8004594:	2380      	movs	r3, #128	@ 0x80
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	429a      	cmp	r2, r3
 800459a:	d112      	bne.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2280      	movs	r2, #128	@ 0x80
 80045a2:	0112      	lsls	r2, r2, #4
 80045a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	0018      	movs	r0, r3
 80045aa:	f000 f905 	bl	80047b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2290      	movs	r2, #144	@ 0x90
 80045b2:	2120      	movs	r1, #32
 80045b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2284      	movs	r2, #132	@ 0x84
 80045ba:	2100      	movs	r1, #0
 80045bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e00f      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	4013      	ands	r3, r2
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	425a      	negs	r2, r3
 80045d2:	4153      	adcs	r3, r2
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	001a      	movs	r2, r3
 80045d8:	1dfb      	adds	r3, r7, #7
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d09e      	beq.n	800451e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	0018      	movs	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b004      	add	sp, #16
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b090      	sub	sp, #64	@ 0x40
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	1dbb      	adds	r3, r7, #6
 80045f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1dba      	adds	r2, r7, #6
 8004604:	215c      	movs	r1, #92	@ 0x5c
 8004606:	8812      	ldrh	r2, [r2, #0]
 8004608:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2290      	movs	r2, #144	@ 0x90
 800460e:	2100      	movs	r1, #0
 8004610:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	228c      	movs	r2, #140	@ 0x8c
 8004616:	2122      	movs	r1, #34	@ 0x22
 8004618:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2280      	movs	r2, #128	@ 0x80
 800461e:	589b      	ldr	r3, [r3, r2]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d02d      	beq.n	8004680 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2280      	movs	r2, #128	@ 0x80
 8004628:	589b      	ldr	r3, [r3, r2]
 800462a:	4a40      	ldr	r2, [pc, #256]	@ (800472c <UART_Start_Receive_DMA+0x140>)
 800462c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2280      	movs	r2, #128	@ 0x80
 8004632:	589b      	ldr	r3, [r3, r2]
 8004634:	4a3e      	ldr	r2, [pc, #248]	@ (8004730 <UART_Start_Receive_DMA+0x144>)
 8004636:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2280      	movs	r2, #128	@ 0x80
 800463c:	589b      	ldr	r3, [r3, r2]
 800463e:	4a3d      	ldr	r2, [pc, #244]	@ (8004734 <UART_Start_Receive_DMA+0x148>)
 8004640:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2280      	movs	r2, #128	@ 0x80
 8004646:	589b      	ldr	r3, [r3, r2]
 8004648:	2200      	movs	r2, #0
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2280      	movs	r2, #128	@ 0x80
 8004650:	5898      	ldr	r0, [r3, r2]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3324      	adds	r3, #36	@ 0x24
 8004658:	0019      	movs	r1, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465e:	001a      	movs	r2, r3
 8004660:	1dbb      	adds	r3, r7, #6
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	f7fd fabe 	bl	8001be4 <HAL_DMA_Start_IT>
 8004668:	1e03      	subs	r3, r0, #0
 800466a:	d009      	beq.n	8004680 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2290      	movs	r2, #144	@ 0x90
 8004670:	2110      	movs	r1, #16
 8004672:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	228c      	movs	r2, #140	@ 0x8c
 8004678:	2120      	movs	r1, #32
 800467a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e050      	b.n	8004722 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d019      	beq.n	80046bc <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004688:	f3ef 8310 	mrs	r3, PRIMASK
 800468c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800468e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004692:	2301      	movs	r3, #1
 8004694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004698:	f383 8810 	msr	PRIMASK, r3
}
 800469c:	46c0      	nop			@ (mov r8, r8)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2180      	movs	r1, #128	@ 0x80
 80046aa:	0049      	lsls	r1, r1, #1
 80046ac:	430a      	orrs	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b6:	f383 8810 	msr	PRIMASK, r3
}
 80046ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046bc:	f3ef 8310 	mrs	r3, PRIMASK
 80046c0:	613b      	str	r3, [r7, #16]
  return(result);
 80046c2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046c6:	2301      	movs	r3, #1
 80046c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f383 8810 	msr	PRIMASK, r3
}
 80046d0:	46c0      	nop			@ (mov r8, r8)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2101      	movs	r1, #1
 80046de:	430a      	orrs	r2, r1
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f383 8810 	msr	PRIMASK, r3
}
 80046ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ee:	f3ef 8310 	mrs	r3, PRIMASK
 80046f2:	61fb      	str	r3, [r7, #28]
  return(result);
 80046f4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f8:	2301      	movs	r3, #1
 80046fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	f383 8810 	msr	PRIMASK, r3
}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2140      	movs	r1, #64	@ 0x40
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	f383 8810 	msr	PRIMASK, r3
}
 800471e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	b010      	add	sp, #64	@ 0x40
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	0800493d 	.word	0x0800493d
 8004730:	08004a6d 	.word	0x08004a6d
 8004734:	08004aaf 	.word	0x08004aaf

08004738 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	@ 0x28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004740:	f3ef 8310 	mrs	r3, PRIMASK
 8004744:	60bb      	str	r3, [r7, #8]
  return(result);
 8004746:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
 800474a:	2301      	movs	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			@ (mov r8, r8)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	21c0      	movs	r1, #192	@ 0xc0
 8004762:	438a      	bics	r2, r1
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004772:	f3ef 8310 	mrs	r3, PRIMASK
 8004776:	617b      	str	r3, [r7, #20]
  return(result);
 8004778:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800477a:	623b      	str	r3, [r7, #32]
 800477c:	2301      	movs	r3, #1
 800477e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f383 8810 	msr	PRIMASK, r3
}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4908      	ldr	r1, [pc, #32]	@ (80047b4 <UART_EndTxTransfer+0x7c>)
 8004794:	400a      	ands	r2, r1
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f383 8810 	msr	PRIMASK, r3
}
 80047a2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2288      	movs	r2, #136	@ 0x88
 80047a8:	2120      	movs	r1, #32
 80047aa:	5099      	str	r1, [r3, r2]
}
 80047ac:	46c0      	nop			@ (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b00a      	add	sp, #40	@ 0x28
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	ff7fffff 	.word	0xff7fffff

080047b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08e      	sub	sp, #56	@ 0x38
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c0:	f3ef 8310 	mrs	r3, PRIMASK
 80047c4:	617b      	str	r3, [r7, #20]
  return(result);
 80047c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ca:	2301      	movs	r3, #1
 80047cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f383 8810 	msr	PRIMASK, r3
}
 80047d4:	46c0      	nop			@ (mov r8, r8)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4926      	ldr	r1, [pc, #152]	@ (800487c <UART_EndRxTransfer+0xc4>)
 80047e2:	400a      	ands	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f383 8810 	msr	PRIMASK, r3
}
 80047f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f2:	f3ef 8310 	mrs	r3, PRIMASK
 80047f6:	623b      	str	r3, [r7, #32]
  return(result);
 80047f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80047fc:	2301      	movs	r3, #1
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	f383 8810 	msr	PRIMASK, r3
}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	491b      	ldr	r1, [pc, #108]	@ (8004880 <UART_EndRxTransfer+0xc8>)
 8004814:	400a      	ands	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	f383 8810 	msr	PRIMASK, r3
}
 8004822:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d118      	bne.n	800485e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800482c:	f3ef 8310 	mrs	r3, PRIMASK
 8004830:	60bb      	str	r3, [r7, #8]
  return(result);
 8004832:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004836:	2301      	movs	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f383 8810 	msr	PRIMASK, r3
}
 8004840:	46c0      	nop			@ (mov r8, r8)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2110      	movs	r1, #16
 800484e:	438a      	bics	r2, r1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f383 8810 	msr	PRIMASK, r3
}
 800485c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	228c      	movs	r2, #140	@ 0x8c
 8004862:	2120      	movs	r1, #32
 8004864:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004872:	46c0      	nop			@ (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	b00e      	add	sp, #56	@ 0x38
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	fffffedf 	.word	0xfffffedf
 8004880:	effffffe 	.word	0xeffffffe

08004884 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	@ 0x30
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2220      	movs	r2, #32
 800489a:	4013      	ands	r3, r2
 800489c:	d135      	bne.n	800490a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800489e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a0:	2256      	movs	r2, #86	@ 0x56
 80048a2:	2100      	movs	r1, #0
 80048a4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a6:	f3ef 8310 	mrs	r3, PRIMASK
 80048aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80048ac:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048b0:	2301      	movs	r3, #1
 80048b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f383 8810 	msr	PRIMASK, r3
}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2180      	movs	r1, #128	@ 0x80
 80048c8:	438a      	bics	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f383 8810 	msr	PRIMASK, r3
}
 80048d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d8:	f3ef 8310 	mrs	r3, PRIMASK
 80048dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80048de:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048e2:	2301      	movs	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f383 8810 	msr	PRIMASK, r3
}
 80048ec:	46c0      	nop			@ (mov r8, r8)
 80048ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2140      	movs	r1, #64	@ 0x40
 80048fa:	430a      	orrs	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f383 8810 	msr	PRIMASK, r3
}
 8004908:	e004      	b.n	8004914 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800490a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490c:	0018      	movs	r0, r3
 800490e:	f7ff f931 	bl	8003b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	46c0      	nop			@ (mov r8, r8)
 8004916:	46bd      	mov	sp, r7
 8004918:	b00c      	add	sp, #48	@ 0x30
 800491a:	bd80      	pop	{r7, pc}

0800491c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	0018      	movs	r0, r3
 800492e:	f7ff f929 	bl	8003b84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	b004      	add	sp, #16
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b094      	sub	sp, #80	@ 0x50
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2220      	movs	r2, #32
 8004952:	4013      	ands	r3, r2
 8004954:	d16f      	bne.n	8004a36 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004958:	225e      	movs	r2, #94	@ 0x5e
 800495a:	2100      	movs	r1, #0
 800495c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495e:	f3ef 8310 	mrs	r3, PRIMASK
 8004962:	61bb      	str	r3, [r7, #24]
  return(result);
 8004964:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004966:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004968:	2301      	movs	r3, #1
 800496a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			@ (mov r8, r8)
 8004974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	493a      	ldr	r1, [pc, #232]	@ (8004a68 <UART_DMAReceiveCplt+0x12c>)
 8004980:	400a      	ands	r2, r1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004986:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f383 8810 	msr	PRIMASK, r3
}
 800498e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004990:	f3ef 8310 	mrs	r3, PRIMASK
 8004994:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004998:	647b      	str	r3, [r7, #68]	@ 0x44
 800499a:	2301      	movs	r3, #1
 800499c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a0:	f383 8810 	msr	PRIMASK, r3
}
 80049a4:	46c0      	nop			@ (mov r8, r8)
 80049a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2101      	movs	r1, #1
 80049b2:	438a      	bics	r2, r1
 80049b4:	609a      	str	r2, [r3, #8]
 80049b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049bc:	f383 8810 	msr	PRIMASK, r3
}
 80049c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c2:	f3ef 8310 	mrs	r3, PRIMASK
 80049c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80049cc:	2301      	movs	r3, #1
 80049ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d2:	f383 8810 	msr	PRIMASK, r3
}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2140      	movs	r1, #64	@ 0x40
 80049e4:	438a      	bics	r2, r1
 80049e6:	609a      	str	r2, [r3, #8]
 80049e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ee:	f383 8810 	msr	PRIMASK, r3
}
 80049f2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049f6:	228c      	movs	r2, #140	@ 0x8c
 80049f8:	2120      	movs	r1, #32
 80049fa:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d118      	bne.n	8004a36 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a04:	f3ef 8310 	mrs	r3, PRIMASK
 8004a08:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a0e:	2301      	movs	r3, #1
 8004a10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f383 8810 	msr	PRIMASK, r3
}
 8004a18:	46c0      	nop			@ (mov r8, r8)
 8004a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2110      	movs	r1, #16
 8004a26:	438a      	bics	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f383 8810 	msr	PRIMASK, r3
}
 8004a34:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a38:	2200      	movs	r2, #0
 8004a3a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d108      	bne.n	8004a56 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a46:	225c      	movs	r2, #92	@ 0x5c
 8004a48:	5a9a      	ldrh	r2, [r3, r2]
 8004a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a4c:	0011      	movs	r1, r2
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f7fb fe54 	bl	80006fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a54:	e003      	b.n	8004a5e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7fc f855 	bl	8000b08 <HAL_UART_RxCpltCallback>
}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	46bd      	mov	sp, r7
 8004a62:	b014      	add	sp, #80	@ 0x50
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	fffffeff 	.word	0xfffffeff

08004a6c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d10a      	bne.n	8004a9e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	225c      	movs	r2, #92	@ 0x5c
 8004a8c:	5a9b      	ldrh	r3, [r3, r2]
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	0011      	movs	r1, r2
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7fb fe30 	bl	80006fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a9c:	e003      	b.n	8004aa6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7fc f841 	bl	8000b28 <HAL_UART_RxHalfCpltCallback>
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b004      	add	sp, #16
 8004aac:	bd80      	pop	{r7, pc}

08004aae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b086      	sub	sp, #24
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2288      	movs	r2, #136	@ 0x88
 8004ac0:	589b      	ldr	r3, [r3, r2]
 8004ac2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	228c      	movs	r2, #140	@ 0x8c
 8004ac8:	589b      	ldr	r3, [r3, r2]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2280      	movs	r2, #128	@ 0x80
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b80      	cmp	r3, #128	@ 0x80
 8004ad8:	d10a      	bne.n	8004af0 <UART_DMAError+0x42>
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b21      	cmp	r3, #33	@ 0x21
 8004ade:	d107      	bne.n	8004af0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2256      	movs	r2, #86	@ 0x56
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	0018      	movs	r0, r3
 8004aec:	f7ff fe24 	bl	8004738 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2240      	movs	r2, #64	@ 0x40
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b40      	cmp	r3, #64	@ 0x40
 8004afc:	d10a      	bne.n	8004b14 <UART_DMAError+0x66>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b22      	cmp	r3, #34	@ 0x22
 8004b02:	d107      	bne.n	8004b14 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	225e      	movs	r2, #94	@ 0x5e
 8004b08:	2100      	movs	r1, #0
 8004b0a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f7ff fe52 	bl	80047b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2290      	movs	r2, #144	@ 0x90
 8004b18:	589b      	ldr	r3, [r3, r2]
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2190      	movs	r1, #144	@ 0x90
 8004b22:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	0018      	movs	r0, r3
 8004b28:	f7ff f834 	bl	8003b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b2c:	46c0      	nop			@ (mov r8, r8)
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b006      	add	sp, #24
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	225e      	movs	r2, #94	@ 0x5e
 8004b46:	2100      	movs	r1, #0
 8004b48:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2256      	movs	r2, #86	@ 0x56
 8004b4e:	2100      	movs	r1, #0
 8004b50:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7ff f81d 	bl	8003b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b004      	add	sp, #16
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b086      	sub	sp, #24
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b70:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	2301      	movs	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f383 8810 	msr	PRIMASK, r3
}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2140      	movs	r1, #64	@ 0x40
 8004b8c:	438a      	bics	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f383 8810 	msr	PRIMASK, r3
}
 8004b9a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2288      	movs	r2, #136	@ 0x88
 8004ba0:	2120      	movs	r1, #32
 8004ba2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f7fe ffe1 	bl	8003b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b006      	add	sp, #24
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bc2:	46c0      	nop			@ (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b002      	add	sp, #8
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004bd2:	46c0      	nop			@ (mov r8, r8)
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b002      	add	sp, #8
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b082      	sub	sp, #8
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2284      	movs	r2, #132	@ 0x84
 8004bf8:	5c9b      	ldrb	r3, [r3, r2]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e027      	b.n	8004c52 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2284      	movs	r2, #132	@ 0x84
 8004c06:	2101      	movs	r1, #1
 8004c08:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2288      	movs	r2, #136	@ 0x88
 8004c0e:	2124      	movs	r1, #36	@ 0x24
 8004c10:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2101      	movs	r1, #1
 8004c26:	438a      	bics	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c5c <HAL_UARTEx_DisableFifoMode+0x70>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2288      	movs	r2, #136	@ 0x88
 8004c44:	2120      	movs	r1, #32
 8004c46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2284      	movs	r2, #132	@ 0x84
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b004      	add	sp, #16
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	dfffffff 	.word	0xdfffffff

08004c60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2284      	movs	r2, #132	@ 0x84
 8004c6e:	5c9b      	ldrb	r3, [r3, r2]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e02e      	b.n	8004cd6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2284      	movs	r2, #132	@ 0x84
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2288      	movs	r2, #136	@ 0x88
 8004c84:	2124      	movs	r1, #36	@ 0x24
 8004c86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	438a      	bics	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	08d9      	lsrs	r1, r3, #3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f000 f8bc 	bl	8004e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2288      	movs	r2, #136	@ 0x88
 8004cc8:	2120      	movs	r1, #32
 8004cca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2284      	movs	r2, #132	@ 0x84
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b004      	add	sp, #16
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2284      	movs	r2, #132	@ 0x84
 8004cee:	5c9b      	ldrb	r3, [r3, r2]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e02f      	b.n	8004d58 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2284      	movs	r2, #132	@ 0x84
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2288      	movs	r2, #136	@ 0x88
 8004d04:	2124      	movs	r1, #36	@ 0x24
 8004d06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	438a      	bics	r2, r1
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	4a0e      	ldr	r2, [pc, #56]	@ (8004d60 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f000 f87b 	bl	8004e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2288      	movs	r2, #136	@ 0x88
 8004d4a:	2120      	movs	r1, #32
 8004d4c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2284      	movs	r2, #132	@ 0x84
 8004d52:	2100      	movs	r1, #0
 8004d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	0018      	movs	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b004      	add	sp, #16
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	f1ffffff 	.word	0xf1ffffff

08004d64 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b08a      	sub	sp, #40	@ 0x28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	1dbb      	adds	r3, r7, #6
 8004d70:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	228c      	movs	r2, #140	@ 0x8c
 8004d76:	589b      	ldr	r3, [r3, r2]
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d156      	bne.n	8004e2a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004d82:	1dbb      	adds	r3, r7, #6
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e04e      	b.n	8004e2c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	2380      	movs	r3, #128	@ 0x80
 8004d94:	015b      	lsls	r3, r3, #5
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d109      	bne.n	8004dae <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d105      	bne.n	8004dae <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2201      	movs	r2, #1
 8004da6:	4013      	ands	r3, r2
 8004da8:	d001      	beq.n	8004dae <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e03e      	b.n	8004e2c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004dba:	2527      	movs	r5, #39	@ 0x27
 8004dbc:	197c      	adds	r4, r7, r5
 8004dbe:	1dbb      	adds	r3, r7, #6
 8004dc0:	881a      	ldrh	r2, [r3, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f7ff fc10 	bl	80045ec <UART_Start_Receive_DMA>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004dd0:	197b      	adds	r3, r7, r5
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d124      	bne.n	8004e22 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d11c      	bne.n	8004e1a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2210      	movs	r2, #16
 8004de6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dec:	617b      	str	r3, [r7, #20]
  return(result);
 8004dee:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df0:	623b      	str	r3, [r7, #32]
 8004df2:	2301      	movs	r3, #1
 8004df4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f383 8810 	msr	PRIMASK, r3
}
 8004dfc:	46c0      	nop			@ (mov r8, r8)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2110      	movs	r1, #16
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f383 8810 	msr	PRIMASK, r3
}
 8004e18:	e003      	b.n	8004e22 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004e1a:	2327      	movs	r3, #39	@ 0x27
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004e22:	2327      	movs	r3, #39	@ 0x27
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	e000      	b.n	8004e2c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
  }
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b00a      	add	sp, #40	@ 0x28
 8004e32:	bdb0      	pop	{r4, r5, r7, pc}

08004e34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d108      	bne.n	8004e56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	226a      	movs	r2, #106	@ 0x6a
 8004e48:	2101      	movs	r1, #1
 8004e4a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2268      	movs	r2, #104	@ 0x68
 8004e50:	2101      	movs	r1, #1
 8004e52:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e54:	e043      	b.n	8004ede <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e56:	260f      	movs	r6, #15
 8004e58:	19bb      	adds	r3, r7, r6
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e5e:	200e      	movs	r0, #14
 8004e60:	183b      	adds	r3, r7, r0
 8004e62:	2208      	movs	r2, #8
 8004e64:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	0e5b      	lsrs	r3, r3, #25
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	240d      	movs	r4, #13
 8004e72:	193b      	adds	r3, r7, r4
 8004e74:	2107      	movs	r1, #7
 8004e76:	400a      	ands	r2, r1
 8004e78:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	0f5b      	lsrs	r3, r3, #29
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	250c      	movs	r5, #12
 8004e86:	197b      	adds	r3, r7, r5
 8004e88:	2107      	movs	r1, #7
 8004e8a:	400a      	ands	r2, r1
 8004e8c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e8e:	183b      	adds	r3, r7, r0
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	197a      	adds	r2, r7, r5
 8004e94:	7812      	ldrb	r2, [r2, #0]
 8004e96:	4914      	ldr	r1, [pc, #80]	@ (8004ee8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e98:	5c8a      	ldrb	r2, [r1, r2]
 8004e9a:	435a      	muls	r2, r3
 8004e9c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e9e:	197b      	adds	r3, r7, r5
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	4a12      	ldr	r2, [pc, #72]	@ (8004eec <UARTEx_SetNbDataToProcess+0xb8>)
 8004ea4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	f7fb f9b6 	bl	8000218 <__divsi3>
 8004eac:	0003      	movs	r3, r0
 8004eae:	b299      	uxth	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	226a      	movs	r2, #106	@ 0x6a
 8004eb4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004eb6:	19bb      	adds	r3, r7, r6
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	193a      	adds	r2, r7, r4
 8004ebc:	7812      	ldrb	r2, [r2, #0]
 8004ebe:	490a      	ldr	r1, [pc, #40]	@ (8004ee8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ec0:	5c8a      	ldrb	r2, [r1, r2]
 8004ec2:	435a      	muls	r2, r3
 8004ec4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ec6:	193b      	adds	r3, r7, r4
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	4a08      	ldr	r2, [pc, #32]	@ (8004eec <UARTEx_SetNbDataToProcess+0xb8>)
 8004ecc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ece:	0019      	movs	r1, r3
 8004ed0:	f7fb f9a2 	bl	8000218 <__divsi3>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	b299      	uxth	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2268      	movs	r2, #104	@ 0x68
 8004edc:	5299      	strh	r1, [r3, r2]
}
 8004ede:	46c0      	nop			@ (mov r8, r8)
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b005      	add	sp, #20
 8004ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	08005028 	.word	0x08005028
 8004eec:	08005030 	.word	0x08005030

08004ef0 <memset>:
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	1882      	adds	r2, r0, r2
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d100      	bne.n	8004efa <memset+0xa>
 8004ef8:	4770      	bx	lr
 8004efa:	7019      	strb	r1, [r3, #0]
 8004efc:	3301      	adds	r3, #1
 8004efe:	e7f9      	b.n	8004ef4 <memset+0x4>

08004f00 <__libc_init_array>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	2600      	movs	r6, #0
 8004f04:	4c0c      	ldr	r4, [pc, #48]	@ (8004f38 <__libc_init_array+0x38>)
 8004f06:	4d0d      	ldr	r5, [pc, #52]	@ (8004f3c <__libc_init_array+0x3c>)
 8004f08:	1b64      	subs	r4, r4, r5
 8004f0a:	10a4      	asrs	r4, r4, #2
 8004f0c:	42a6      	cmp	r6, r4
 8004f0e:	d109      	bne.n	8004f24 <__libc_init_array+0x24>
 8004f10:	2600      	movs	r6, #0
 8004f12:	f000 f819 	bl	8004f48 <_init>
 8004f16:	4c0a      	ldr	r4, [pc, #40]	@ (8004f40 <__libc_init_array+0x40>)
 8004f18:	4d0a      	ldr	r5, [pc, #40]	@ (8004f44 <__libc_init_array+0x44>)
 8004f1a:	1b64      	subs	r4, r4, r5
 8004f1c:	10a4      	asrs	r4, r4, #2
 8004f1e:	42a6      	cmp	r6, r4
 8004f20:	d105      	bne.n	8004f2e <__libc_init_array+0x2e>
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	00b3      	lsls	r3, r6, #2
 8004f26:	58eb      	ldr	r3, [r5, r3]
 8004f28:	4798      	blx	r3
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	e7ee      	b.n	8004f0c <__libc_init_array+0xc>
 8004f2e:	00b3      	lsls	r3, r6, #2
 8004f30:	58eb      	ldr	r3, [r5, r3]
 8004f32:	4798      	blx	r3
 8004f34:	3601      	adds	r6, #1
 8004f36:	e7f2      	b.n	8004f1e <__libc_init_array+0x1e>
 8004f38:	08005040 	.word	0x08005040
 8004f3c:	08005040 	.word	0x08005040
 8004f40:	08005044 	.word	0x08005044
 8004f44:	08005040 	.word	0x08005040

08004f48 <_init>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	46c0      	nop			@ (mov r8, r8)
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr

08004f54 <_fini>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr
